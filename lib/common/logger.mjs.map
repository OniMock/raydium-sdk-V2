{"version":3,"sources":["../../src/common/logger.ts"],"sourceRoot":"../src","sourcesContent":["import { get, set } from \"lodash\";\r\n\r\nexport type ModuleName = \"Common.Api\";\r\n\r\nexport enum LogLevel {\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug,\r\n}\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n  private name: string;\r\n  constructor(params: { name: string; logLevel?: LogLevel }) {\r\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\r\n    this.name = params.name;\r\n  }\r\n\r\n  set level(logLevel: LogLevel) {\r\n    this.logLevel = logLevel;\r\n  }\r\n  get time(): string {\r\n    return Date.now().toString();\r\n  }\r\n  get moduleName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private isLogLevel(level: LogLevel): boolean {\r\n    return level <= this.logLevel;\r\n  }\r\n\r\n  public error(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Error)) return this;\r\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public logWithError(...props): Logger {\r\n    // this.error(...props)\r\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\r\n    throw new Error(msg);\r\n  }\r\n\r\n  public warning(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\r\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public info(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Info)) return this;\r\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public debug(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\r\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\r\n    return this;\r\n  }\r\n}\r\n\r\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\r\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\r\n\r\nexport function createLogger(moduleName: string): Logger {\r\n  let logger = get(moduleLoggers, moduleName);\r\n  if (!logger) {\r\n    // default level is error\r\n    const logLevel = get(moduleLevels, moduleName);\r\n\r\n    logger = new Logger({ name: moduleName, logLevel });\r\n    set(moduleLoggers, moduleName, logger);\r\n  }\r\n\r\n  return logger;\r\n}\r\n\r\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\r\n  set(moduleLevels, moduleName, level);\r\n\r\n  const logger = get(moduleLoggers, moduleName);\r\n  if (logger) logger.level = level;\r\n}\r\n"],"mappings":";AAAA;AAIO,IAAK,WAAL,kBAAK,cAAL;AACL;AACA;AACA;AACA;AAJU;AAAA;AAML,mBAAa;AAAA,EACV;AAAA,EACA;AAAA,EACR,YAAY,QAA+C;AACzD,SAAK,WAAW,OAAO,aAAa,SAAY,OAAO,WAAW;AAClE,SAAK,OAAO,OAAO;AAAA,EACrB;AAAA,MAEI,MAAM,UAAoB;AAC5B,SAAK,WAAW;AAAA,EAClB;AAAA,MACI,OAAe;AACjB,WAAO,KAAK,IAAI,EAAE,SAAS;AAAA,EAC7B;AAAA,MACI,aAAqB;AACvB,WAAO,KAAK;AAAA,EACd;AAAA,EAEQ,WAAW,OAA0B;AAC3C,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA,EAEO,SAAS,OAAe;AAC7B,QAAI,CAAC,KAAK,WAAW,aAAc;AAAG,aAAO;AAC7C,YAAQ,MAAM,KAAK,MAAM,KAAK,MAAM,oBAAoB,GAAG,KAAK;AAChE,WAAO;AAAA,EACT;AAAA,EAEO,gBAAgB,OAAe;AAEpC,UAAM,MAAM,MAAM,IAAI,CAAC,QAAS,OAAO,QAAQ,WAAW,KAAK,UAAU,GAAG,IAAI,GAAI,EAAE,KAAK,IAAI;AAC/F,UAAM,IAAI,MAAM,GAAG;AAAA,EACrB;AAAA,EAEO,WAAW,OAAe;AAC/B,QAAI,CAAC,KAAK,WAAW,eAAgB;AAAG,aAAO;AAC/C,YAAQ,KAAK,KAAK,MAAM,KAAK,MAAM,sBAAsB,GAAG,KAAK;AACjE,WAAO;AAAA,EACT;AAAA,EAEO,QAAQ,OAAe;AAC5B,QAAI,CAAC,KAAK,WAAW,YAAa;AAAG,aAAO;AAC5C,YAAQ,KAAK,KAAK,MAAM,KAAK,MAAM,mBAAmB,GAAG,KAAK;AAC9D,WAAO;AAAA,EACT;AAAA,EAEO,SAAS,OAAe;AAC7B,QAAI,CAAC,KAAK,WAAW,aAAc;AAAG,aAAO;AAC7C,YAAQ,MAAM,KAAK,MAAM,KAAK,MAAM,oBAAoB,GAAG,KAAK;AAChE,WAAO;AAAA,EACT;AACF;AAEA,IAAM,gBAAkD,CAAC;AACzD,IAAM,eAAmD,CAAC;AAEnD,sBAAsB,YAA4B;AACvD,MAAI,SAAS,IAAI,eAAe,UAAU;AAC1C,MAAI,CAAC,QAAQ;AAEX,UAAM,WAAW,IAAI,cAAc,UAAU;AAE7C,aAAS,IAAI,OAAO,EAAE,MAAM,YAAY,SAAS,CAAC;AAClD,QAAI,eAAe,YAAY,MAAM;AAAA,EACvC;AAEA,SAAO;AACT;AAEO,wBAAwB,YAAoB,OAAuB;AACxE,MAAI,cAAc,YAAY,KAAK;AAEnC,QAAM,SAAS,IAAI,eAAe,UAAU;AAC5C,MAAI;AAAQ,WAAO,QAAQ;AAC7B;","names":[]}