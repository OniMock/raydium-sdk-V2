{"version":3,"sources":["../../src/common/pubKey.ts"],"sourceRoot":"../src","sourcesContent":["import { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\ninterface AccountMetaProps {\r\n  pubkey: PublicKey;\r\n  isSigner?: boolean;\r\n  isWritable?: boolean;\r\n}\r\n\r\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\r\n  return {\r\n    pubkey,\r\n    isWritable,\r\n    isSigner,\r\n  };\r\n}\r\n\r\nexport const commonSystemAccountMeta = [\r\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n];\r\n\r\nexport type PublicKeyish = PublicKey | string;\r\n\r\nexport function validateAndParsePublicKey({\r\n  publicKey: orgPubKey,\r\n  transformSol,\r\n}: {\r\n  publicKey: PublicKeyish;\r\n  transformSol?: boolean;\r\n}): PublicKey {\r\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\r\n\r\n  if (publicKey instanceof PublicKey) {\r\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\r\n    return publicKey;\r\n  }\r\n\r\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\r\n\r\n  if (typeof publicKey === \"string\") {\r\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\r\n    try {\r\n      const key = new PublicKey(publicKey);\r\n      return key;\r\n    } catch {\r\n      throw new Error(\"invalid public key\");\r\n    }\r\n  }\r\n\r\n  throw new Error(\"invalid public key\");\r\n}\r\n\r\nexport function tryParsePublicKey(v: string): PublicKey | string {\r\n  try {\r\n    return new PublicKey(v);\r\n  } catch (e) {\r\n    return v;\r\n  }\r\n}\r\n\r\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\r\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\r\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\r\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\r\n\r\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\r\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\r\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\r\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\r\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\r\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\r\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\r\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\r\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\r\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\r\nexport const SOLMint = PublicKey.default;\r\n\r\nexport function solToWSol(mint: PublicKeyish): PublicKey {\r\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA0E;AAC1E,uBAAiC;AAQ1B,qBAAqB,EAAE,QAAQ,WAAW,OAAO,aAAa,QAAuC;AAC1G,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,IAAM,0BAA0B;AAAA,EACrC,YAAY,EAAE,QAAQ,mCAAkB,YAAY,MAAM,CAAC;AAAA,EAC3D,YAAY,EAAE,QAAQ,0BAAc,WAAW,YAAY,MAAM,CAAC;AAAA,EAClE,YAAY,EAAE,QAAQ,gCAAoB,YAAY,MAAM,CAAC;AAC/D;AAIO,mCAAmC;AAAA,EACxC,WAAW;AAAA,EACX;AAAA,GAIY;AACZ,QAAM,YAAY,kBAAkB,UAAU,SAAS,CAAC;AAExD,MAAI,qBAAqB,uBAAW;AAClC,QAAI,gBAAgB,UAAU,OAAO,OAAO;AAAG,aAAO;AACtD,WAAO;AAAA,EACT;AAEA,MAAI,gBAAgB,UAAU,SAAS,MAAM,QAAQ,SAAS;AAAG,WAAO;AAExE,MAAI,OAAO,cAAc,UAAU;AACjC,QAAI,cAAc,sBAAU,QAAQ,SAAS;AAAG,aAAO,sBAAU;AACjE,QAAI;AACF,YAAM,MAAM,IAAI,sBAAU,SAAS;AACnC,aAAO;AAAA,IACT,QAAE;AACA,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACtC;AAAA,EACF;AAEA,QAAM,IAAI,MAAM,oBAAoB;AACtC;AAEO,2BAA2B,GAA+B;AAC/D,MAAI;AACF,WAAO,IAAI,sBAAU,CAAC;AAAA,EACxB,SAAS,GAAP;AACA,WAAO;AAAA,EACT;AACF;AAEO,IAAM,kBAAkB,IAAI,sBAAU,6CAA6C;AACnF,IAAM,mBAAmB,IAAI,sBAAU,6CAA6C;AACpF,IAAM,kBAAkB,IAAI,sBAAU,6CAA6C;AACnF,IAAM,mBAAmB,IAAI,sBAAU,6CAA6C;AACpF,IAAM,sBAAsB,IAAI,sBAAU,6CAA6C;AACvF,IAAM,yBAAyB,IAAI,sBAAU,6CAA6C;AAC1F,IAAM,oBAAoB,0BAAc;AAExC,IAAM,UAAU,IAAI,sBAAU,8CAA8C;AAC5E,IAAM,UAAU,IAAI,sBAAU,8CAA8C;AAC5E,IAAM,UAAU,IAAI,sBAAU,6CAA6C;AAC3E,IAAM,WAAW,IAAI,sBAAU,8CAA8C;AAC7E,IAAM,WAAW,IAAI,sBAAU,8CAA8C;AAC7E,IAAM,WAAW,IAAI,sBAAU,6CAA6C;AAC5E,IAAM,YAAY,IAAI,sBAAU,8CAA8C;AAC9E,IAAM,WAAW,IAAI,sBAAU,6CAA6C;AAC5E,IAAM,UAAU,IAAI,sBAAU,6CAA6C;AAC3E,IAAM,UAAU,IAAI,sBAAU,8CAA8C;AAC5E,IAAM,UAAU,IAAI,sBAAU,8CAA8C;AAC5E,IAAM,WAAW,IAAI,sBAAU,6CAA6C;AAC5E,IAAM,UAAU,sBAAU;AAE1B,mBAAmB,MAA+B;AACvD,SAAO,0BAA0B,EAAE,WAAW,MAAM,cAAc,KAAK,CAAC;AAC1E;","names":[]}