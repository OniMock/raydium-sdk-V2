{"version":3,"sources":["../../../src/raydium/launchpad/instrument.ts","../../../src/marshmallow/index.ts","../../../src/marshmallow/buffer-layout.ts","../../../src/common/accountInfo.ts","../../../src/common/logger.ts","../../../src/common/bignumber.ts","../../../node_modules/decimal.js/decimal.mjs","../../../src/module/amount.ts","../../../src/module/formatter.ts","../../../src/module/fraction.ts","../../../src/common/constant.ts","../../../src/raydium/token/constant.ts","../../../src/module/token.ts","../../../src/common/pubKey.ts","../../../src/module/currency.ts","../../../src/module/percent.ts","../../../src/module/price.ts","../../../src/common/utility.ts","../../../src/common/pda.ts","../../../src/common/txTool/txUtils.ts","../../../src/common/programId.ts","../../../src/common/transfer.ts","../../../src/common/txTool/lookupTable.ts","../../../src/common/txTool/txTool.ts","../../../src/common/fee.ts","../../../src/raydium/clmm/clmm.ts","../../../src/raydium/token/utils.ts","../../../src/raydium/clmm/instrument.ts","../../../src/raydium/clmm/utils/tick.ts","../../../src/raydium/clmm/utils/constants.ts","../../../src/raydium/clmm/utils/math.ts","../../../src/raydium/clmm/utils/pda.ts","../../../src/raydium/clmm/utils/pool.ts","../../../src/raydium/clmm/utils/position.ts","../../../src/raydium/clmm/utils/tickarrayBitmap.ts","../../../src/raydium/clmm/layout.ts","../../../src/raydium/launchpad/pda.ts"],"sourceRoot":"../src","sourcesContent":["import { PublicKey, SystemProgram, TransactionInstruction, AccountMeta } from \"@solana/web3.js\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport { publicKey, str, struct, u64, u8 } from \"@/marshmallow\";\r\nimport { RENT_PROGRAM_ID, METADATA_PROGRAM_ID } from \"@/common\";\r\nimport { getPdaCpiEvent } from \"./pda\";\r\nexport const anchorDataBuf = {\r\n  initialize: Buffer.from([175, 175, 109, 31, 13, 152, 155, 237]),\r\n  buyExactIn: Buffer.from([250, 234, 13, 123, 213, 156, 19, 236]),\r\n  buyExactOut: Buffer.from([24, 211, 116, 40, 105, 3, 153, 56]),\r\n  sellExactIn: Buffer.from([149, 39, 222, 155, 211, 124, 152, 26]),\r\n  sellExactOut: Buffer.from([95, 200, 71, 34, 8, 9, 11, 166]),\r\n  createVestingAccount: Buffer.from([129, 178, 2, 13, 217, 172, 230, 218]),\r\n  claimVestedToken: Buffer.from([49, 33, 104, 30, 189, 157, 79, 35]),\r\n\r\n  createPlatformConfig: Buffer.from([176, 90, 196, 175, 253, 113, 220, 20]),\r\n  claimPlatformFee: Buffer.from([156, 39, 208, 135, 76, 237, 61, 72]),\r\n  updatePlaformConfig: Buffer.from([195, 60, 76, 129, 146, 45, 67, 143]),\r\n};\r\n\r\nexport function initialize(\r\n  programId: PublicKey,\r\n\r\n  payer: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  metadataId: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  decimals: number,\r\n  name: string,\r\n  symbol: string,\r\n  uri: string,\r\n\r\n  curveParam: ({ type: \"ConstantCurve\"; totalSellA: BN } | { type: \"FixedCurve\" } | { type: \"LinearCurve\" }) & {\r\n    migrateType: \"amm\" | \"cpmm\";\r\n    supply: BN;\r\n    totalFundRaisingB: BN;\r\n  },\r\n\r\n  totalLockedAmount: BN,\r\n  cliffPeriod: BN,\r\n  unlockPeriod: BN,\r\n): TransactionInstruction {\r\n  const dataLayout1 = struct([u8(\"decimals\"), str(\"name\"), str(\"symbol\"), str(\"uri\")]);\r\n  const dataLayout3 = struct([u64(\"totalLockedAmount\"), u64(\"cliffPeriod\"), u64(\"unlockPeriod\")]);\r\n\r\n  const dataLayout21 = struct([u8(\"index\"), u64(\"supply\"), u64(\"totalFundRaisingB\"), u8(\"migrateType\")]);\r\n  const dataLayout22 = struct([\r\n    u8(\"index\"),\r\n    u64(\"supply\"),\r\n    u64(\"totalSellA\"),\r\n    u64(\"totalFundRaisingB\"),\r\n    u8(\"migrateType\"),\r\n  ]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: creator, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: true, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: metadataId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data1 = Buffer.alloc(\r\n    Buffer.from(name, \"utf-8\").length +\r\n    Buffer.from(symbol, \"utf-8\").length +\r\n    Buffer.from(uri, \"utf-8\").length +\r\n    4 * 3 +\r\n    1,\r\n  );\r\n  const data3 = Buffer.alloc(dataLayout3.span);\r\n  const data2 = Buffer.alloc(curveParam.type === \"ConstantCurve\" ? dataLayout22.span : dataLayout21.span);\r\n\r\n  dataLayout1.encode({ decimals, name, symbol, uri }, data1);\r\n  if (curveParam.type === \"ConstantCurve\") {\r\n    dataLayout22.encode({ index: 0, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"FixedCurve\") {\r\n    dataLayout21.encode({ index: 1, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"LinearCurve\") {\r\n    dataLayout21.encode({ index: 2, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  }\r\n\r\n  dataLayout3.encode({ totalLockedAmount, cliffPeriod, unlockPeriod }, data3);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initialize, ...data1, ...data2, ...data3]),\r\n  });\r\n}\r\nexport function buyExactInInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  amountB: BN,\r\n  minAmountA: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountB\"), u64(\"minAmountA\"), u64(\"shareFeeRate\")]);\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n  console.log({\r\n    amountB: amountB.toString(),\r\n    minAmountA: minAmountA.toString(),\r\n  });\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountB,\r\n      minAmountA,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.buyExactIn, ...data]),\r\n  });\r\n}\r\n\r\nexport function buyExactOutInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  amountA: BN,\r\n  maxAmountB: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountA\"), u64(\"maxAmountB\"), u64(\"shareFeeRate\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountA,\r\n      maxAmountB,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.buyExactOut, ...data]),\r\n  });\r\n}\r\n\r\nexport function sellExactInInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  amountA: BN,\r\n  minAmountB: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountA\"), u64(\"minAmountB\"), u64(\"shareFeeRate\")]);\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountA,\r\n      minAmountB,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.sellExactIn, ...data]),\r\n  });\r\n}\r\n\r\nexport function sellExactOut(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  amountB: BN,\r\n  maxAmountA: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountB\"), u64(\"maxAmountA\"), u64(\"shareFeeRate\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountB,\r\n      maxAmountA,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.sellExactOut, ...data]),\r\n  });\r\n}\r\n\r\nexport function claimVestedToken(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n\r\n  vestingRecord: PublicKey,\r\n\r\n  userTokenAccountA: PublicKey,\r\n  vaultA: PublicKey,\r\n  mintA: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vestingRecord, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({}, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.claimVestedToken, ...data]),\r\n  });\r\n}\r\n\r\nexport function createVestingAccount(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  beneficiary: PublicKey,\r\n  poolId: PublicKey,\r\n\r\n  vestingRecord: PublicKey,\r\n  shareAmount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"shareAmount\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: beneficiary, isSigner: false, isWritable: true },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vestingRecord, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ shareAmount }, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.createVestingAccount, ...data]),\r\n  });\r\n}\r\n\r\nexport function claimPlatformFee(\r\n  programId: PublicKey,\r\n  platformClaimFeeWallet: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n  platformId: PublicKey,\r\n  vaultB: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformClaimFeeWallet, isSigner: true, isWritable: true },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: true },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: true },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: anchorDataBuf.claimPlatformFee,\r\n  });\r\n}\r\n\r\nexport function createPlatformConfig(\r\n  programId: PublicKey,\r\n\r\n  platformAdmin: PublicKey,\r\n  platformClaimFeeWallet: PublicKey,\r\n  platformLockNftWallet: PublicKey,\r\n  platformId: PublicKey,\r\n\r\n  cpConfigId: PublicKey,\r\n\r\n  migrateCpLockNftScale: {\r\n    platformScale: BN;\r\n    creatorScale: BN;\r\n    burnScale: BN;\r\n  },\r\n  feeRate: BN,\r\n  name: string,\r\n  web: string,\r\n  img: string,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([\r\n    u64(\"platformScale\"),\r\n    u64(\"creatorScale\"),\r\n    u64(\"burnScale\"),\r\n\r\n    u64(\"feeRate\"),\r\n    str(\"name\"),\r\n    str(\"web\"),\r\n    str(\"img\"),\r\n  ]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformAdmin, isSigner: true, isWritable: true },\r\n    { pubkey: platformClaimFeeWallet, isSigner: false, isWritable: false },\r\n    { pubkey: platformLockNftWallet, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n    { pubkey: cpConfigId, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(\r\n    8 * 4 +\r\n    Buffer.from(name, \"utf-8\").length +\r\n    Buffer.from(web, \"utf-8\").length +\r\n    Buffer.from(img, \"utf-8\").length +\r\n    4 * 3,\r\n  );\r\n  dataLayout.encode(\r\n    {\r\n      platformScale: migrateCpLockNftScale.platformScale,\r\n      creatorScale: migrateCpLockNftScale.creatorScale,\r\n      burnScale: migrateCpLockNftScale.burnScale,\r\n      feeRate,\r\n      name,\r\n      web,\r\n      img,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.createPlatformConfig, ...data]),\r\n  });\r\n}\r\n\r\nexport function updatePlatformConfig(\r\n  programId: PublicKey,\r\n\r\n  platformAdmin: PublicKey,\r\n  platformId: PublicKey,\r\n\r\n  updateInfo:\r\n    | { type: \"updateClaimFeeWallet\" | \"updateLockNftWallet\"; value: PublicKey }\r\n    | { type: \"updateFeeRate\"; value: BN }\r\n    | { type: \"updateName\" | \"updateImg\" | \"updateWeb\"; value: string }\r\n    | { type: \"migrateCpLockNftScale\"; value: { platformScale: BN; creatorScale: BN; burnScale: BN } }\r\n    | { type: 'updateCpConfigId', value: PublicKey }\r\n    | {\r\n      type: 'updateAll', value: {\r\n        platformClaimFeeWallet: PublicKey,\r\n        platformLockNftWallet: PublicKey,\r\n        cpConfigId: PublicKey,\r\n        migrateCpLockNftScale: {\r\n          platformScale: BN,\r\n          creatorScale: BN,\r\n          burnScale: BN,\r\n        },\r\n        feeRate: BN,\r\n        name: string,\r\n        web: string,\r\n        img: string,\r\n      }\r\n    },\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformAdmin, isSigner: true, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  let data: Buffer;\r\n  if (updateInfo.type === \"updateClaimFeeWallet\") {\r\n    const dataLayout = struct([u8(\"index\"), publicKey(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 0, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateLockNftWallet\") {\r\n    const dataLayout = struct([u8(\"index\"), publicKey(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 1, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"migrateCpLockNftScale\") {\r\n    const dataLayout = struct([u8(\"index\"), u64(\"platformScale\"), u64(\"creatorScale\"), u64(\"burnScale\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 2, ...updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateFeeRate\") {\r\n    const dataLayout = struct([u8(\"index\"), u64(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 3, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateImg\" || updateInfo.type === \"updateName\" || updateInfo.type === \"updateWeb\") {\r\n    const dataLayout = struct([u8(\"index\"), str(\"value\")]);\r\n    data = Buffer.alloc(Buffer.from(updateInfo.value, 'utf-8').length + 4 + 1 * 1);\r\n    if (updateInfo.type === \"updateName\") dataLayout.encode({ index: 4, value: updateInfo.value }, data);\r\n    else if (updateInfo.type === \"updateWeb\") dataLayout.encode({ index: 5, value: updateInfo.value }, data);\r\n    else if (updateInfo.type === \"updateImg\") dataLayout.encode({ index: 6, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === 'updateCpConfigId') {\r\n    keys.push({ pubkey: updateInfo.value, isSigner: false, isWritable: false })\r\n\r\n    const dataLayout = struct([u8('index')])\r\n    data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode({ index: 7 }, data)\r\n  } else if (updateInfo.type === 'updateAll') {\r\n    console.log('Please note that this update will overwrite all data in the platform account with the new data.')\r\n    keys.push({ pubkey: updateInfo.value.cpConfigId, isSigner: false, isWritable: false })\r\n\r\n    const dataLayout = struct([\r\n      u8('index'),\r\n      publicKey('platformClaimFeeWallet'),\r\n      publicKey('platformLockNftWallet'),\r\n      u64('platformScale'),\r\n      u64('creatorScale'),\r\n      u64('burnScale'),\r\n\r\n      u64('feeRate'),\r\n      str('name'),\r\n      str('web'),\r\n      str('img'),\r\n    ])\r\n    data = Buffer.alloc(1 + 32 + 32 + 8 * 4 + 4 * 3 + Buffer.from(updateInfo.value.name, 'utf-8').length + Buffer.from(updateInfo.value.web, 'utf-8').length + Buffer.from(updateInfo.value.img, 'utf-8').length)\r\n    dataLayout.encode({\r\n      index: 8,\r\n      platformClaimFeeWallet: updateInfo.value.platformClaimFeeWallet,\r\n      platformLockNftWallet: updateInfo.value.platformLockNftWallet,\r\n      platformScale: updateInfo.value.migrateCpLockNftScale.platformScale,\r\n      creatorScale: updateInfo.value.migrateCpLockNftScale.creatorScale,\r\n      burnScale: updateInfo.value.migrateCpLockNftScale.burnScale,\r\n      feeRate: updateInfo.value.feeRate,\r\n      name: updateInfo.value.name,\r\n      web: updateInfo.value.web,\r\n      img: updateInfo.value.img,\r\n    }, data)\r\n  } else {\r\n    throw Error(\"updateInfo params type error\");\r\n  }\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.updatePlaformConfig, ...data]),\r\n  });\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN, { isBN } from \"bn.js\";\r\n\r\nimport {\r\n  bits,\r\n  blob,\r\n  Blob,\r\n  Layout,\r\n  offset as _offset,\r\n  seq as _seq,\r\n  Structure as _Structure,\r\n  u32 as _u32,\r\n  u8 as _u8,\r\n  UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n} from \"./buffer-layout\";\r\n\r\nexport * from \"./buffer-layout\";\r\nexport { blob };\r\n\r\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\r\n  blob: Layout<Buffer>;\r\n  signed: boolean;\r\n\r\n  constructor(span: number, signed: boolean, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\r\n    super(span, property);\r\n    this.blob = blob(span);\r\n    this.signed = signed;\r\n  }\r\n\r\n  /** @override */\r\n  decode(b: Buffer, offset = 0): BN {\r\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\r\n    if (this.signed) {\r\n      return num.fromTwos(this.span * 8).clone();\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /** @override */\r\n  encode(src: BN, b: Buffer, offset = 0): number {\r\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\r\n    if (this.signed) {\r\n      src = src.toTwos(this.span * 8);\r\n    }\r\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\r\n  }\r\n}\r\n\r\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\r\n  _lower: any;\r\n  _upper: any;\r\n  // TODO: unknown\r\n  constructor(property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(8, property);\r\n    this._lower = bits(_u32(), false);\r\n    this._upper = bits(_u32(), false);\r\n  }\r\n\r\n  addBoolean(property: string): void {\r\n    if (this._lower.fields.length < 32) {\r\n      this._lower.addBoolean(property);\r\n    } else {\r\n      this._upper.addBoolean(property);\r\n    }\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\r\n    const lowerDecoded = this._lower.decode(b, offset);\r\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\r\n    return { ...lowerDecoded, ...upperDecoded };\r\n  }\r\n\r\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\r\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\r\n  }\r\n}\r\n\r\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(1, property);\r\n}\r\n\r\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(4, property);\r\n}\r\n\r\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, false, property);\r\n}\r\n\r\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, false, property);\r\n}\r\n\r\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(1, true, property);\r\n}\r\n\r\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, true, property);\r\n}\r\n\r\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, true, property);\r\n}\r\n\r\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\r\n  layout: Layout<T>;\r\n  decoder: (data: T) => U;\r\n  encoder: (src: U) => T;\r\n\r\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(layout.span, property);\r\n    this.layout = layout;\r\n    this.decoder = decoder;\r\n    this.encoder = encoder;\r\n  }\r\n\r\n  decode(b: Buffer, offset?: number): U {\r\n    return this.decoder(this.layout.decode(b, offset));\r\n  }\r\n\r\n  encode(src: U, b: Buffer, offset?: number): number {\r\n    return this.layout.encode(this.encoder(src), b, offset);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset?: number): number {\r\n    return this.layout.getSpan(b, offset);\r\n  }\r\n}\r\n\r\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\r\n  return new WrappedLayout(\r\n    blob(32),\r\n    (b: Buffer) => new PublicKey(b),\r\n    (key: PublicKey) => key.toBuffer(),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\r\n  layout: Layout<T>;\r\n  discriminator: Layout<number>;\r\n\r\n  constructor(layout: Layout<T>, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(-1, property);\r\n    this.layout = layout;\r\n    this.discriminator = _u8();\r\n  }\r\n\r\n  encode(src: T | null, b: Buffer, offset = 0): number {\r\n    if (src === null || src === undefined) {\r\n      return this.discriminator.encode(0, b, offset);\r\n    }\r\n    this.discriminator.encode(1, b, offset);\r\n    return this.layout.encode(src, b, offset + 1) + 1;\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): T | null {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return null;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.decode(b, offset + 1);\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset = 0): number {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return 1;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.getSpan(b, offset + 1) + 1;\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n}\r\n\r\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\r\n  return new OptionLayout<T, P>(layout, property);\r\n}\r\n\r\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\r\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\r\n}\r\n\r\nexport function decodeBool(value: number): boolean {\r\n  if (value === 0) {\r\n    return false;\r\n  } else if (value === 1) {\r\n    return true;\r\n  }\r\n  throw new Error(\"Invalid bool: \" + value);\r\n}\r\n\r\nexport function encodeBool(value: boolean): number {\r\n  return value ? 1 : 0;\r\n}\r\n\r\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ values: T[] }> = struct([\r\n    length,\r\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\r\n  ]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\r\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\r\n\r\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\r\n    if (!receivedTag.eq(tag)) {\r\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\r\n}\r\n\r\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ data }) => data,\r\n    (data) => ({ data }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\r\n  return new WrappedLayout(\r\n    vecU8(),\r\n    (data) => data.toString(\"utf-8\"),\r\n    (s) => Buffer.from(s, \"utf-8\"),\r\n    property,\r\n  );\r\n}\r\n\r\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\r\n  registry: Record<string, Layout<any>>;\r\n}\r\n\r\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\r\n  const unionLayout = _union(_u8(), property);\r\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\r\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\r\n}\r\n\r\nexport function array<T, P extends string = \"\">(\r\n  elementLayout: Layout<T>,\r\n  length: number,\r\n  property?: P,\r\n): Layout<T[], P> {\r\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class Structure<T, P, D extends { [key: string]: any; }> extends _Structure<T, P, D> {\r\n  /** @override */\r\n  decode(b: Buffer, offset?: number): D {\r\n    return super.decode(b, offset);\r\n  }\r\n}\r\n\r\nexport function struct<T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n): T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n    Value,\r\n    P,\r\n    {\r\n      [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n      ? V\r\n      : any;\r\n    }\r\n  >\r\n  : any {\r\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\r\n  return new Structure(fields, property, decodePrefixes);\r\n}\r\n\r\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\r\n  ? S\r\n  : any;\r\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any; }> = Structure<any, any, S>;\r\n\r\nexport class Union<Schema extends { [key: string]: any; }> extends _Union<Schema> {\r\n  encodeInstruction(instruction: any): Buffer {\r\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\r\n    const b = Buffer.alloc(instructionMaxSpan);\r\n    return b.slice(0, this.encode(instruction, b));\r\n  }\r\n\r\n  decodeInstruction(instruction: any): Partial<Schema> {\r\n    return this.decode(instruction);\r\n  }\r\n}\r\nexport function union<UnionSchema extends { [key: string]: any } = any>(\r\n  discr: any,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n): Union<UnionSchema> {\r\n  return new Union(discr, defaultLayout, property);\r\n}\r\n\r\nclass Zeros extends Blob {\r\n  decode(b: Buffer, offset: number): Buffer {\r\n    const slice = super.decode(b, offset);\r\n    if (!slice.every((v) => v === 0)) {\r\n      throw new Error(\"nonzero padding bytes\");\r\n    }\r\n    return slice;\r\n  }\r\n}\r\n\r\nexport function zeros(length: number): Zeros {\r\n  return new Zeros(length);\r\n}\r\n\r\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\r\n  elementLayout: Layout<T, P>,\r\n  count: number | BN | Layout<BN | number, P>,\r\n  property?: AnotherP,\r\n): Layout<T[], AnotherP> {\r\n  let parsedCount: number;\r\n  const superCount =\r\n    typeof count === \"number\"\r\n      ? count\r\n      : isBN(count)\r\n        ? count.toNumber()\r\n        : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\r\n          get(target, property): any {\r\n            if (!parsedCount) {\r\n              // get count in targetLayout. note that count may be BN\r\n              const countProperty = Reflect.get(target, \"count\");\r\n\r\n              // let targetLayout's  property:count be a number\r\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\r\n\r\n              // record the count\r\n              Reflect.set(target, \"count\", parsedCount);\r\n            }\r\n            return Reflect.get(target, property);\r\n          },\r\n          set(target, property, value): any {\r\n            if (property === \"count\") {\r\n              parsedCount = value;\r\n            }\r\n            return Reflect.set(target, property, value);\r\n          },\r\n        });\r\n\r\n  // @ts-expect-error force type\r\n  return _seq(elementLayout, superCount, property);\r\n}\r\n","import {\r\n  bits as _bits,\r\n  BitStructure as _BitStructure,\r\n  blob as _blob,\r\n  Blob as _Blob,\r\n  cstr as _cstr,\r\n  f32 as _f32,\r\n  f32be as _f32be,\r\n  f64 as _f64,\r\n  f64be as _f64be,\r\n  greedy as _greedy,\r\n  Layout as _Layout,\r\n  ns64 as _ns64,\r\n  ns64be as _ns64be,\r\n  nu64 as _nu64,\r\n  nu64be as _nu64be,\r\n  offset as _offset,\r\n  s16 as _s16,\r\n  s16be as _s16be,\r\n  s24 as _s24,\r\n  s24be as _s24be,\r\n  s32 as _s32,\r\n  s32be as _s32be,\r\n  s40 as _s40,\r\n  s40be as _s40be,\r\n  s48 as _s48,\r\n  s48be as _s48be,\r\n  s8 as _s8,\r\n  seq as _seq,\r\n  struct as _struct,\r\n  Structure as _Structure,\r\n  u16 as _u16,\r\n  u16be as _u16be,\r\n  u24 as _u24,\r\n  u24be as _u24be,\r\n  u32 as _u32,\r\n  u32be as _u32be,\r\n  u40 as _u40,\r\n  u40be as _u40be,\r\n  u48 as _u48,\r\n  u48be as _u48be,\r\n  u8 as _u8,\r\n  UInt as _UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\r\n  utf8 as _utf8,\r\n} from \"@solana/buffer-layout\";\r\n\r\n//#region ------------------- Layout -------------------\r\nexport interface Layout<T = any, P = \"\"> {\r\n  span: number;\r\n  property?: P;\r\n  decode(b: Buffer, offset?: number): T;\r\n  encode(src: T, b: Buffer, offset?: number): number;\r\n  getSpan(b: Buffer, offset?: number): number;\r\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\r\n}\r\nexport interface LayoutConstructor {\r\n  new <T, P>(): Layout<T, P>; // for class extends syntex\r\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\r\n  readonly prototype: Layout;\r\n}\r\nexport const Layout = _Layout as unknown as LayoutConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Structure -------------------\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\r\n  extends Layout<DecodeSchema, P> {\r\n  span: number;\r\n  decode(b: Buffer, offset?: number): DecodeSchema;\r\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\r\n  offsetOf<AP extends string>(property: AP): number;\r\n}\r\ninterface StructureConstructor {\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\r\n    fields: T,\r\n    property?: P,\r\n    decodePrefixes?: boolean,\r\n  ): Structure<T, P, DecodeSchema>;\r\n}\r\nexport const Structure = _Structure as unknown as StructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Union -------------------\r\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\r\n  registry: object;\r\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\r\n  addVariant(\r\n    variant: number,\r\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\r\n    property?: string,\r\n  ): any /* TEMP: code in Layout.js 1809 */;\r\n}\r\ninterface UnionConstructor {\r\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\r\n  new <UnionSchema extends { [key: string]: any } = any>(\r\n    discr: Layout<any, any>,\r\n    defaultLayout: Layout<any, any>,\r\n    property?: string,\r\n  ): Union<UnionSchema>;\r\n}\r\nexport const Union = _Union as unknown as UnionConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- BitStructure -------------------\r\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\r\ninterface BitStructureConstructor {\r\n  new (...params: any[]): BitStructure;\r\n}\r\nexport const BitStructure = _BitStructure as BitStructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- UInt -------------------\r\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\r\ninterface UIntConstructor {\r\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\r\n}\r\nexport const UInt = _UInt as UIntConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Blob -------------------\r\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\r\ninterface BlobConstructor {\r\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\r\n}\r\nexport const Blob = _Blob as unknown as BlobConstructor;\r\n//#endregion\r\n\r\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\r\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\n\r\nexport const struct = _struct as <T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n) => T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any;\r\n\r\nexport const seq = _seq as unknown as <T, P>(\r\n  elementLayout: Layout<T, string>,\r\n  count: number | Layout<number, string>,\r\n  property?: P,\r\n) => Layout<T[]>;\r\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\r\n  discr: Layout<any, any>,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n) => Union<UnionSchema>;\r\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\r\n  layout: Layout<any, P>,\r\n  property?: P,\r\n) => any;\r\nexport const blob = _blob as unknown as <P extends string = \"\">(\r\n  length: number | Layout<number, P>,\r\n  property?: P,\r\n) => Blob<P>;\r\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\r\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\r\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\r\n  word: Layout<T>,\r\n  msb?: boolean,\r\n  property?: P,\r\n) => BitStructure<T, P>; // TODO: not quite sure\r\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\r\n  layout: Layout<T, P>,\r\n  offset?: number,\r\n  property?: P,\r\n) => Layout<T, P>;\r\n\r\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\r\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\r\nimport { WSOLMint, chunkArray, solToWSol } from \"./\";\r\nimport { createLogger } from \"./logger\";\r\nimport { MINT_SIZE, TOKEN_PROGRAM_ID, getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\r\n\r\ninterface MultipleAccountsJsonRpcResponse {\r\n  jsonrpc: string;\r\n  id: string;\r\n  error?: {\r\n    code: number;\r\n    message: string;\r\n  };\r\n  result: {\r\n    context: { slot: number };\r\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\r\n  };\r\n}\r\n\r\nexport interface GetMultipleAccountsInfoConfig {\r\n  batchRequest?: boolean;\r\n  commitment?: Commitment;\r\n  chunkCount?: number;\r\n}\r\n\r\nconst logger = createLogger(\"Raydium_accountInfo_util\");\r\n\r\nexport async function getMultipleAccountsInfo(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<(AccountInfo<Buffer> | null)[]> {\r\n  const {\r\n    batchRequest,\r\n    commitment = \"confirmed\",\r\n    chunkCount = 100,\r\n  } = {\r\n    batchRequest: false,\r\n    ...config,\r\n  };\r\n\r\n  const chunkedKeys = chunkArray(publicKeys, chunkCount);\r\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\r\n\r\n  if (batchRequest) {\r\n    const batch = chunkedKeys.map((keys) => {\r\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\r\n      return {\r\n        methodName: \"getMultipleAccounts\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const _batch = chunkArray(batch, 10);\r\n\r\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\r\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\r\n    ).flat();\r\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\r\n      if (unsafeRes.error)\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\r\n\r\n      return unsafeRes.result.value.map((accountInfo) => {\r\n        if (accountInfo) {\r\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\r\n\r\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\r\n\r\n          return {\r\n            data: Buffer.from(data[0], \"base64\"),\r\n            executable,\r\n            lamports,\r\n            owner: new PublicKey(owner),\r\n            rentEpoch,\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n    });\r\n  } else {\r\n    try {\r\n      results = (await Promise.all(\r\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\r\n      )) as (AccountInfo<Buffer> | null)[][];\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return results.flat();\r\n}\r\n\r\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\r\n  connection: Connection,\r\n  publicKeysWithCustomFlag: T[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\r\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\r\n    connection,\r\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\r\n    config,\r\n  );\r\n\r\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\r\n}\r\n\r\nexport enum AccountType {\r\n  Uninitialized,\r\n  Mint,\r\n  Account,\r\n}\r\nexport const ACCOUNT_TYPE_SIZE = 1;\r\n\r\nexport async function fetchMultipleMintInfos({\r\n  connection,\r\n  mints,\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  mints: PublicKey[];\r\n  config?: { batchRequest?: boolean };\r\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\r\n  if (mints.length === 0) return {};\r\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\r\n    connection,\r\n    mints.map((i) => ({ pubkey: solToWSol(i) })),\r\n    config,\r\n  );\r\n\r\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\r\n  for (const i of mintInfos) {\r\n    if (!i.accountInfo || i.accountInfo.data.length < MINT_SIZE) {\r\n      console.log(\"invalid mint account\", i.pubkey.toBase58());\r\n      continue;\r\n    }\r\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\r\n    mintK[i.pubkey.toString()] = {\r\n      ...t,\r\n      programId: i.accountInfo?.owner || TOKEN_PROGRAM_ID,\r\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\r\n    };\r\n  }\r\n  mintK[PublicKey.default.toBase58()] = mintK[WSOLMint.toBase58()];\r\n\r\n  return mintK;\r\n}\r\n","import { get, set } from \"lodash\";\r\n\r\nexport type ModuleName = \"Common.Api\";\r\n\r\nexport enum LogLevel {\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug,\r\n}\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n  private name: string;\r\n  constructor(params: { name: string; logLevel?: LogLevel }) {\r\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\r\n    this.name = params.name;\r\n  }\r\n\r\n  set level(logLevel: LogLevel) {\r\n    this.logLevel = logLevel;\r\n  }\r\n  get time(): string {\r\n    return Date.now().toString();\r\n  }\r\n  get moduleName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private isLogLevel(level: LogLevel): boolean {\r\n    return level <= this.logLevel;\r\n  }\r\n\r\n  public error(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Error)) return this;\r\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public logWithError(...props): Logger {\r\n    // this.error(...props)\r\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\r\n    throw new Error(msg);\r\n  }\r\n\r\n  public warning(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\r\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public info(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Info)) return this;\r\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public debug(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\r\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\r\n    return this;\r\n  }\r\n}\r\n\r\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\r\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\r\n\r\nexport function createLogger(moduleName: string): Logger {\r\n  let logger = get(moduleLoggers, moduleName);\r\n  if (!logger) {\r\n    // default level is error\r\n    const logLevel = get(moduleLevels, moduleName);\r\n\r\n    logger = new Logger({ name: moduleName, logLevel });\r\n    set(moduleLoggers, moduleName, logger);\r\n  }\r\n\r\n  return logger;\r\n}\r\n\r\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\r\n  set(moduleLevels, moduleName, level);\r\n\r\n  const logger = get(moduleLoggers, moduleName);\r\n  if (logger) logger.level = level;\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { CurrencyAmount, TokenAmount } from \"../module/amount\";\r\nimport { Currency } from \"../module/currency\";\r\nimport { Fraction } from \"../module/fraction\";\r\nimport { Percent } from \"../module/percent\";\r\nimport { Price } from \"../module/price\";\r\nimport { Token } from \"../module/token\";\r\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\nimport { parseBigNumberish } from \"./constant\";\r\nimport { mul } from \"./fractionUtil\";\r\nimport { notInnerObject } from \"./utility\";\r\n\r\nexport const BN_ZERO = new BN(0);\r\nexport const BN_ONE = new BN(1);\r\nexport const BN_TWO = new BN(2);\r\nexport const BN_THREE = new BN(3);\r\nexport const BN_FIVE = new BN(5);\r\nexport const BN_TEN = new BN(10);\r\nexport const BN_100 = new BN(100);\r\nexport const BN_1000 = new BN(1000);\r\nexport const BN_10000 = new BN(10000);\r\nexport type BigNumberish = BN | string | number | bigint;\r\nexport type Numberish = number | string | bigint | Fraction | BN;\r\n\r\nexport function tenExponential(shift: BigNumberish): BN {\r\n  return BN_TEN.pow(parseBigNumberish(shift));\r\n}\r\n\r\n/**\r\n *\r\n * @example\r\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\r\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\r\n */\r\nexport function parseNumberInfo(n: Numberish | undefined): {\r\n  denominator: string;\r\n  numerator: string;\r\n  sign?: string;\r\n  int?: string;\r\n  dec?: string;\r\n} {\r\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\r\n  if (n instanceof BN) {\r\n    return { numerator: n.toString(), denominator: \"1\" };\r\n  }\r\n\r\n  if (n instanceof Fraction) {\r\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\r\n  }\r\n\r\n  const s = String(n);\r\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  const denominator = \"1\" + \"0\".repeat(dec.length);\r\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\r\n  return { denominator, numerator, sign, int, dec };\r\n}\r\n\r\n// round up\r\nexport function divCeil(a: BN, b: BN): BN {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const dm = a.divmod(b);\r\n\r\n  // Fast case - exact division\r\n  if (dm.mod.isZero()) return dm.div;\r\n\r\n  // Round up\r\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\r\n}\r\n\r\nexport function shakeFractionDecimal(n: Fraction): string {\r\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  return `${sign}${int}`;\r\n}\r\n\r\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\r\n  if (n instanceof BN) return n;\r\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\r\n}\r\n\r\nexport function toFraction(value: Numberish): Fraction {\r\n  //  to complete math format(may have decimal), not int\r\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\r\n\r\n  if (value instanceof Price) return value.adjusted;\r\n\r\n  // to complete math format(may have decimal), not BN\r\n  if (value instanceof TokenAmount)\r\n    try {\r\n      return toFraction(value.toExact());\r\n    } catch {\r\n      return new Fraction(BN_ZERO);\r\n    }\r\n\r\n  // do not ideal with other fraction value\r\n  if (value instanceof Fraction) return value;\r\n\r\n  // wrap to Fraction\r\n  const n = String(value);\r\n  const details = parseNumberInfo(n);\r\n  return new Fraction(details.numerator, details.denominator);\r\n}\r\n\r\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\r\n}\r\n\r\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\r\n}\r\n\r\n/**\r\n * @example\r\n * toPercent(3.14) // => Percent { 314.00% }\r\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\r\n */\r\nexport function toPercent(\r\n  n: Numberish,\r\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\r\n): Percent {\r\n  const { numerator, denominator } = parseNumberInfo(n);\r\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\r\n}\r\n\r\nexport function toTokenPrice(params: {\r\n  token: TokenJson | Token | SplToken;\r\n  numberPrice: Numberish;\r\n  decimalDone?: boolean;\r\n}): Price {\r\n  const { token, numberPrice, decimalDone } = params;\r\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\r\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\r\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\r\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\r\n\r\n  return new Price({\r\n    baseToken: usdCurrency,\r\n    denominator: parsedDenominator.toString(),\r\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\r\n    numerator: parsedNumerator.toString(),\r\n  });\r\n}\r\n\r\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\r\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\r\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\r\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\r\n}\r\n\r\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\r\n  if (!price || !amount) return toUsdCurrency(0);\r\n  return toUsdCurrency(mul(amount, price)!);\r\n}\r\n\r\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\r\n  if (n == null) return undefined;\r\n  const { numerator, denominator } = parseNumberInfo(n.toString());\r\n  return new Fraction(numerator, denominator);\r\n}\r\n\r\nexport function isDecimal(val: unknown): boolean {\r\n  return val instanceof Decimal;\r\n}\r\n\r\nexport function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\r\n  // @ts-expect-error no need type for inner code\r\n  return isDecimal(info)\r\n    ? decimalToFraction(info as any)\r\n    : Array.isArray(info)\r\n    ? info.map((k) => recursivelyDecimalToFraction(k))\r\n    : notInnerObject(info)\r\n    ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\r\n    : info;\r\n}\r\n","/*\r\n *  decimal.js v10.3.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { BigNumberish, BN_TEN } from \"../common/bignumber\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common\";\r\nimport { Currency } from \"./currency\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_amount\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nexport function splitNumber(num: string, decimals: number): [string, string] {\r\n  let integral = \"0\";\r\n  let fractional = \"0\";\r\n\r\n  if (num.includes(\".\")) {\r\n    const splited = num.split(\".\");\r\n    if (splited.length === 2) {\r\n      [integral, fractional] = splited;\r\n      fractional = fractional.padEnd(decimals, \"0\");\r\n    } else {\r\n      logger.logWithError(`invalid number string, num: ${num}`);\r\n    }\r\n  } else {\r\n    integral = num;\r\n  }\r\n\r\n  // fix decimals is 0\r\n  return [integral, fractional.slice(0, decimals) || fractional];\r\n}\r\n\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token;\r\n  protected logger: Logger;\r\n\r\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.token = token;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n  public gt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\r\n    return new TokenAmount(this.token, this.raw.add(other.raw));\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\r\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.token.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n  protected logger: Logger;\r\n\r\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.currency = currency;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n\r\n  /**\r\n   * a greater than b\r\n   */\r\n  public gt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\r\n  }\r\n\r\n  public sub(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\r\n\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\r\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\r\nimport _toFarmat from \"toformat\";\r\n\r\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\r\ninterface FormatOptions {\r\n  decimalSeparator?: string;\r\n  groupSeparator?: string;\r\n  groupSize?: number;\r\n  fractionGroupSeparator?: string;\r\n  fractionGroupSize?: number;\r\n}\r\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\r\n  new (value: BigSource): WrappedBig;\r\n  (value: BigSource): WrappedBig;\r\n  (): WrappedBigConstructor;\r\n\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedBig extends Big {\r\n  add(n: BigSource): WrappedBig;\r\n  abs(): WrappedBig;\r\n  div(n: BigSource): WrappedBig;\r\n  minus(n: BigSource): WrappedBig;\r\n  mod(n: BigSource): WrappedBig;\r\n  mul(n: BigSource): WrappedBig;\r\n  plus(n: BigSource): WrappedBig;\r\n  pow(exp: number): WrappedBig;\r\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\r\n  sqrt(): WrappedBig;\r\n  sub(n: BigSource): WrappedBig;\r\n  times(n: BigSource): WrappedBig;\r\n  toFormat(): string;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\ntype DecimalConstructor = typeof Decimal;\r\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\r\n  new (value: Numeric): WrappedDecimal;\r\n  clone(config?: Config): WrappedDecimalConstructor;\r\n  config(config: Config): WrappedDecimal;\r\n  set(config: Config): WrappedDecimal;\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedDecimal extends Decimal {\r\n  absoluteValue(): WrappedDecimal;\r\n  abs(): WrappedDecimal;\r\n  dividedBy(y: Numeric): WrappedDecimal;\r\n  div(y: Numeric): WrappedDecimal;\r\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\r\n  idiv(y: Numeric): WrappedDecimal;\r\n  logarithm(base?: Numeric): WrappedDecimal;\r\n  log(base?: Numeric): WrappedDecimal;\r\n  minus(y: Numeric): WrappedDecimal;\r\n  sub(y: Numeric): WrappedDecimal;\r\n  modulo(y: Numeric): WrappedDecimal;\r\n  mod(y: Numeric): WrappedDecimal;\r\n  naturalExponetial(): WrappedDecimal;\r\n  exp(): WrappedDecimal;\r\n  naturalLogarithm(): WrappedDecimal;\r\n  ln(): WrappedDecimal;\r\n  negated(): WrappedDecimal;\r\n  neg(): WrappedDecimal;\r\n  plus(y: Numeric): WrappedDecimal;\r\n  add(y: Numeric): WrappedDecimal;\r\n  squareRoot(): WrappedDecimal;\r\n  sqrt(): WrappedDecimal;\r\n  times(y: Numeric): WrappedDecimal;\r\n  mul(y: Numeric): WrappedDecimal;\r\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\r\n  todp(dp?: number, rm?: number): WrappedDecimal;\r\n  toInteger(): WrappedDecimal;\r\n  toint(): WrappedDecimal;\r\n  toPower(y: Numeric): WrappedDecimal;\r\n  pow(y: Numeric): WrappedDecimal;\r\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\r\n  tosd(sd?: number, rm?: number): WrappedDecimal;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\nconst toFormat: {\r\n  (fn: BigConstructor): WrappedBigConstructor;\r\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\r\n} = _toFarmat;\r\nexport default toFormat;\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\nimport _Decimal from \"decimal.js-light\";\r\n\r\nimport { BigNumberish } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common/constant\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\n\r\nconst logger = createLogger(\"module/fraction\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nconst Decimal = toFormat(_Decimal);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\r\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\r\n  [Rounding.ROUND_UP]: _Big.roundUp,\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: BN;\r\n  public readonly denominator: BN;\r\n\r\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\r\n    this.numerator = parseBigNumberish(numerator);\r\n    this.denominator = parseBigNumberish(denominator);\r\n  }\r\n\r\n  public get quotient(): BN {\r\n    return this.numerator.div(this.denominator);\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  }\r\n\r\n  public add(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public sub(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public mul(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\r\n  }\r\n\r\n  public div(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\r\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\r\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding] || 1;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.numerator.isZero();\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { BigNumberish } from \"./bignumber\";\r\nimport { createLogger } from \"./logger\";\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nconst MAX_SAFE = 0x1fffffffffffff;\r\n\r\nexport function parseBigNumberish(value: BigNumberish): BN {\r\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\r\n  // BN\r\n  if (value instanceof BN) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === \"string\") {\r\n    if (value.match(/^-?[0-9]+$/)) {\r\n      return new BN(value);\r\n    }\r\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\r\n  }\r\n\r\n  if (typeof value === \"number\") {\r\n    if (value % 1) {\r\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\r\n    }\r\n\r\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\r\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\r\n    }\r\n\r\n    return new BN(String(value));\r\n  }\r\n\r\n  if (typeof value === \"bigint\") {\r\n    return new BN(value.toString());\r\n  }\r\n  logger.error(`invalid BigNumberish value: ${value}`);\r\n  return new BN(0); // never reach, because logWithError will throw error\r\n}","import { PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nexport const SOL_INFO: TokenInfo = {\r\n  chainId: 101,\r\n  address: PublicKey.default.toBase58(),\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"SOL\",\r\n  name: \"solana\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n\r\nexport const TOKEN_WSOL: TokenInfo = {\r\n  chainId: 101,\r\n  address: \"So11111111111111111111111111111111111111112\",\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"WSOL\",\r\n  name: \"Wrapped SOL\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\r\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\r\n\r\n/**\r\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n */\r\nexport interface TokenProps {\r\n  mint: PublicKeyish;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n  skipMint?: boolean;\r\n  isToken2022?: boolean;\r\n}\r\n\r\nexport class Token {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n  public readonly isToken2022: boolean;\r\n\r\n  public readonly mint: PublicKey;\r\n  public static readonly WSOL: Token = new Token({\r\n    ...TOKEN_WSOL,\r\n    mint: TOKEN_WSOL.address,\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\r\n   */\r\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\r\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\r\n      this.decimals = TOKEN_WSOL.decimals;\r\n      this.symbol = TOKEN_WSOL.symbol;\r\n      this.name = TOKEN_WSOL.name;\r\n      this.mint = new PublicKey(TOKEN_WSOL.address);\r\n      this.isToken2022 = false;\r\n      return;\r\n    }\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol || mint.toString().substring(0, 6);\r\n    this.name = name || mint.toString().substring(0, 6);\r\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\r\n    this.isToken2022 = isToken2022;\r\n  }\r\n\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.mint.equals(other.mint);\r\n  }\r\n}\r\n","import { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\ninterface AccountMetaProps {\r\n  pubkey: PublicKey;\r\n  isSigner?: boolean;\r\n  isWritable?: boolean;\r\n}\r\n\r\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\r\n  return {\r\n    pubkey,\r\n    isWritable,\r\n    isSigner,\r\n  };\r\n}\r\n\r\nexport const commonSystemAccountMeta = [\r\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n];\r\n\r\nexport type PublicKeyish = PublicKey | string;\r\n\r\nexport function validateAndParsePublicKey({\r\n  publicKey: orgPubKey,\r\n  transformSol,\r\n}: {\r\n  publicKey: PublicKeyish;\r\n  transformSol?: boolean;\r\n}): PublicKey {\r\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\r\n\r\n  if (publicKey instanceof PublicKey) {\r\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\r\n    return publicKey;\r\n  }\r\n\r\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\r\n\r\n  if (typeof publicKey === \"string\") {\r\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\r\n    try {\r\n      const key = new PublicKey(publicKey);\r\n      return key;\r\n    } catch {\r\n      throw new Error(\"invalid public key\");\r\n    }\r\n  }\r\n\r\n  throw new Error(\"invalid public key\");\r\n}\r\n\r\nexport function tryParsePublicKey(v: string): PublicKey | string {\r\n  try {\r\n    return new PublicKey(v);\r\n  } catch (e) {\r\n    return v;\r\n  }\r\n}\r\n\r\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\r\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\r\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\r\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\r\n\r\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\r\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\r\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\r\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\r\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\r\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\r\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\r\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\r\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\r\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\r\nexport const SOLMint = PublicKey.default;\r\n\r\nexport function solToWSol(mint: PublicKeyish): PublicKey {\r\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\r\n}\r\n","import { SOL_INFO } from \"../raydium/token/constant\";\r\n\r\nimport { Token } from \"./token\";\r\n\r\ninterface CurrencyProps {\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n/**\r\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n * The only instance of the base class `Currency` is SOL.\r\n */\r\nexport class Currency {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\r\n   * @param decimals - decimals of the currency\r\n   * @param symbol - symbol of the currency\r\n   * @param name - name of the currency\r\n   */\r\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { Rounding } from \"../common\";\r\nimport { Fraction } from \"./fraction\";\r\n\r\nexport const _100_PERCENT = new Fraction(new BN(100));\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { Rounding } from \"../common\";\r\nimport { BigNumberish, tenExponential } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_price\");\r\n\r\ninterface PriceProps {\r\n  baseToken: Token;\r\n  denominator: BigNumberish;\r\n  quoteToken: Token;\r\n  numerator: BigNumberish;\r\n}\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseToken: Token; // input i.e. denominator\r\n  public readonly quoteToken: Token; // output i.e. numerator\r\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n  public readonly scalar: Fraction;\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(params: PriceProps) {\r\n    const { baseToken, quoteToken, numerator, denominator } = params;\r\n    super(numerator, denominator);\r\n\r\n    this.baseToken = baseToken;\r\n    this.quoteToken = quoteToken;\r\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.mul(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price({\r\n      baseToken: this.quoteToken,\r\n      quoteToken: this.baseToken,\r\n      denominator: this.numerator,\r\n      numerator: this.denominator,\r\n    });\r\n  }\r\n\r\n  public mul(other: Price): Price {\r\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\r\n\r\n    const fraction = super.mul(other);\r\n    return new Price({\r\n      baseToken: this.baseToken,\r\n      quoteToken: other.quoteToken,\r\n      denominator: fraction.denominator,\r\n      numerator: fraction.numerator,\r\n    });\r\n  }\r\n\r\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\n\r\nimport { tryParsePublicKey } from \"./pubKey\";\r\n\r\nexport async function sleep(ms: number): Promise<void> {\r\n  new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function getTimestamp(): number {\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function notInnerObject(v: unknown): v is Record<string, any> {\r\n  return (\r\n    typeof v === \"object\" &&\r\n    v !== null &&\r\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\r\n  );\r\n}\r\n\r\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\r\n  // @ts-expect-error no need type for inner code\r\n  return typeof jsonInfo === \"string\"\r\n    ? tryParsePublicKey(jsonInfo)\r\n    : Array.isArray(jsonInfo)\r\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\r\n    : notInnerObject(jsonInfo)\r\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\r\n    : jsonInfo;\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { findProgramAddress } from \"./txTool/txUtils\";\r\n\r\nexport function getATAAddress(\r\n  owner: PublicKey,\r\n  mint: PublicKey,\r\n  programId?: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\r\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\r\n  );\r\n}\r\n","import {\r\n  Commitment,\r\n  ComputeBudgetProgram,\r\n  Connection,\r\n  EpochInfo,\r\n  Keypair,\r\n  PublicKey,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"../logger\";\r\nimport { CacheLTA } from \"./lookupTable\";\r\nimport { InstructionType } from \"./txType\";\r\n\r\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst logger = createLogger(\"Raydium_txUtil\");\r\n\r\nexport const MAX_BASE64_SIZE = 1644;\r\n\r\nexport function addComputeBudget(config: ComputeBudgetConfig): {\r\n  instructions: TransactionInstruction[];\r\n  instructionTypes: string[];\r\n} {\r\n  const ins: TransactionInstruction[] = [];\r\n  const insTypes: string[] = [];\r\n  if (config.microLamports) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\r\n    insTypes.push(InstructionType.SetComputeUnitPrice);\r\n  }\r\n  if (config.units) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\r\n    insTypes.push(InstructionType.SetComputeUnitLimit);\r\n  }\r\n\r\n  return {\r\n    instructions: ins,\r\n    instructionTypes: insTypes,\r\n  };\r\n}\r\n\r\nexport async function getRecentBlockHash(connection: Connection, propsCommitment?: Commitment): Promise<string> {\r\n  const commitment = propsCommitment ?? \"confirmed\";\r\n  return (await connection.getLatestBlockhash?.({ commitment }))?.blockhash;\r\n}\r\n\r\nexport async function confirmTransaction(connection: Connection, txId: string): Promise<string> {\r\n  connection.getSignatureStatuses([txId]);\r\n  return new Promise((resolve, reject) => {\r\n    const id = setTimeout(reject, 60 * 1000);\r\n    connection.onSignature(\r\n      txId,\r\n      (signatureResult) => {\r\n        clearTimeout(id);\r\n        if (!signatureResult.err) {\r\n          resolve(\"\");\r\n          return;\r\n        }\r\n        reject(Object.assign(signatureResult.err, { txId }));\r\n      },\r\n      \"confirmed\",\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Forecast transaction size\r\n */\r\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\r\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\r\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\r\n\r\n  const transaction = new Transaction();\r\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\r\n  transaction.feePayer = signers[0];\r\n  transaction.add(...instructions);\r\n\r\n  try {\r\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Simulates multiple instruction\r\n */\r\n/**\r\n * Simulates multiple instruction\r\n */\r\nexport async function simulateMultipleInstruction(\r\n  connection: Connection,\r\n  instructions: TransactionInstruction[],\r\n  keyword: string,\r\n  batchRequest = true,\r\n): Promise<string[]> {\r\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\r\n\r\n  const transactions: Transaction[] = [];\r\n\r\n  let transaction = new Transaction();\r\n  transaction.feePayer = feePayer;\r\n\r\n  for (const instruction of instructions) {\r\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\r\n      transactions.push(transaction);\r\n      transaction = new Transaction();\r\n      transaction.feePayer = feePayer;\r\n    }\r\n    transaction.add(instruction);\r\n  }\r\n  if (transaction.instructions.length > 0) {\r\n    transactions.push(transaction);\r\n  }\r\n\r\n  let results: SimulatedTransactionResponse[] = [];\r\n\r\n  try {\r\n    results = await simulateTransaction(connection, transactions, batchRequest);\r\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  const logs: string[] = [];\r\n  for (const result of results) {\r\n    logger.debug(\"simulate result:\", result);\r\n\r\n    if (result.logs) {\r\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\r\n      logger.debug(\"filteredLog:\", logs);\r\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\r\n      logs.push(...filteredLog);\r\n    }\r\n  }\r\n\r\n  return logs;\r\n}\r\n\r\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\r\n  const results = log.match(/{[\"\\w:,]+}/g);\r\n  if (!results || results.length !== 1) {\r\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\r\n  }\r\n\r\n  return results[0];\r\n}\r\n\r\nexport function parseSimulateValue(log: string, key: string): any {\r\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\r\n\r\n  const results = reg.exec(log);\r\n  if (!results || results.length !== 2) {\r\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\r\n  }\r\n\r\n  return results[1];\r\n}\r\n\r\nexport interface ProgramAddress {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n}\r\nexport function findProgramAddress(\r\n  seeds: Array<Buffer | Uint8Array>,\r\n  programId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\r\n  return { publicKey, nonce };\r\n}\r\n\r\nexport async function simulateTransaction(\r\n  connection: Connection,\r\n  transactions: Transaction[],\r\n  batchRequest?: boolean,\r\n): Promise<any[]> {\r\n  let results: any[] = [];\r\n  if (batchRequest) {\r\n    const getLatestBlockhash = await connection.getLatestBlockhash();\r\n\r\n    const encodedTransactions: string[] = [];\r\n    for (const transaction of transactions) {\r\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\r\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const message = transaction._compile();\r\n      const signData = message.serialize();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const wireTransaction = transaction._serialize(signData);\r\n      const encodedTransaction = wireTransaction.toString(\"base64\");\r\n\r\n      encodedTransactions.push(encodedTransaction);\r\n    }\r\n\r\n    const batch = encodedTransactions.map((keys) => {\r\n      const args = connection._buildArgs([keys], undefined, \"base64\");\r\n      return {\r\n        methodName: \"simulateTransaction\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const reqData: { methodName: string; args: any[] }[][] = [];\r\n    const itemReqIndex = 20;\r\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\r\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    results = await (\r\n      await Promise.all(\r\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\r\n      )\r\n    ).flat();\r\n  } else {\r\n    try {\r\n      results = await Promise.all(\r\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function checkLegacyTxSize({\r\n  instructions,\r\n  payer,\r\n  signers,\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  signers: PublicKey[];\r\n}): boolean {\r\n  return forecastTransactionSize(instructions, [payer, ...signers]);\r\n}\r\n\r\nexport function checkV0TxSize({\r\n  instructions,\r\n  payer,\r\n  lookupTableAddressAccount,\r\n  recentBlockhash = Keypair.generate().publicKey.toString(),\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  lookupTableAddressAccount?: CacheLTA;\r\n  recentBlockhash?: string;\r\n}): boolean {\r\n  const transactionMessage = new TransactionMessage({\r\n    payerKey: payer,\r\n    recentBlockhash,\r\n    instructions,\r\n  });\r\n\r\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\r\n  try {\r\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\r\n    return buildLength < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\r\n  time: 0,\r\n  data: undefined,\r\n};\r\n\r\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\r\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\r\n    const data = await connection.getEpochInfo();\r\n    epochInfoCache = {\r\n      time: Date.now(),\r\n      data,\r\n    };\r\n    return data;\r\n  } else {\r\n    return epochInfoCache.data;\r\n  }\r\n}\r\n\r\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\r\n  if (Buffer.isBuffer(arr)) {\r\n    return arr;\r\n  } else if (arr instanceof Uint8Array) {\r\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\r\n  } else {\r\n    return Buffer.from(arr);\r\n  }\r\n};\r\n\r\nexport const txToBase64 = (transaction: Transaction | VersionedTransaction): string => {\r\n  let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  try {\r\n    return serialized instanceof Buffer ? serialized.toString(\"base64\") : Buffer.from(serialized).toString(\"base64\");\r\n  } catch {\r\n    return serialized.toString(\"base64\");\r\n  }\r\n};\r\n\r\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\r\n  const allBase64: string[] = [];\r\n  transactions.forEach((transaction) => {\r\n    if (transaction instanceof Transaction) {\r\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\r\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\r\n    }\r\n    allBase64.push(txToBase64(transaction));\r\n  });\r\n  console.log(\"simulate tx string:\", allBase64);\r\n\r\n  return allBase64;\r\n}\r\n\r\nexport function transformTxToBase64(tx: Transaction | VersionedTransaction): string {\r\n  let serialized = tx.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (tx instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  return serialized.toString(\"base64\");\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\n// raydium\r\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\r\n// temp fusion\r\nexport const FARM_PROGRAM_ID_V4 = new PublicKey(\"CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T\");\r\n// \"fusion\"\r\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\r\n// echosystem\r\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\r\n\r\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\r\n\r\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\r\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\r\n\r\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\r\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\r\nexport const LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\r\nexport const CLMM_LOCK_PROGRAM_ID = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const CLMM_LOCK_AUTH_ID = new PublicKey(\"kN1kEznaF5Xbd8LYuqtEFcxzWSBk5Fv6ygX6SqEGJVy\");\r\n\r\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\r\nexport const FEE_DESTINATION_ID = new PublicKey(\"7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5\");\r\n\r\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\r\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\r\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\r\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\r\n\r\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C\");\r\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL\");\r\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8\");\r\n\r\nexport const DEV_CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMDWBwJDtYax9qW7AyRuVC19Cc4L4Vcy4n2BHAbHkCW\");\r\nexport const DEV_CREATE_CPMM_POOL_AUTH = new PublicKey(\"7rQ1QFNosMkUCuh7Z7fPbTHvh73b68sQYdirycEzJVuw\");\r\nexport const DEV_CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"G11FKBRaAkHAKuLCgLM6K6NUc9rTjPAznRCjZifrTQe2\");\r\n\r\nexport const LOCK_CPMM_PROGRAM = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const DEV_LOCK_CPMM_PROGRAM = new PublicKey(\"DLockwT7X7sxtLmGH9g5kmfcjaBtncdbUmi738m5bvQC\");\r\n\r\nexport const LOCK_CPMM_AUTH = new PublicKey(\"3f7GcQFG397GAaEnv51zR6tsTVihYRydnydDD1cXekxH\");\r\nexport const DEV_LOCK_CPMM_AUTH = new PublicKey(\"7AFUeLVRjBfzqK3tTGw8hN48KLQWSk6DTE8xprWdPqix\");\r\n\r\nexport const LAUNCHPAD_PROGRAM = new PublicKey(\"LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj\");\r\nexport const LAUNCHPAD_AUTH = new PublicKey(\"WLHv2UAZm6z4KyaaELi5pjdbJh6RESMva1Rnn8pJVVh\");\r\n\r\nexport const DEV_LAUNCHPAD_PROGRAM = new PublicKey(\"LanD8FpTBBvzZFXjTxsAoipkFsxPUCDB4qAqKxYDiNP\");\r\nexport const DEV_LAUNCHPAD_AUTH = new PublicKey(\"HYNHiyKJ3gGVFvyxJAurK7qr7P2o5J9THmvCGMdULtpW\");\r\n\r\nexport const IDO_ALL_PROGRAM = {\r\n  IDO_PROGRAM_ID_V1,\r\n  IDO_PROGRAM_ID_V2,\r\n  IDO_PROGRAM_ID_V3,\r\n  IDO_PROGRAM_ID_V4,\r\n};\r\n\r\nexport const ALL_PROGRAM_ID = {\r\n  AMM_V4,\r\n  AMM_STABLE,\r\n  CLMM_PROGRAM_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_LOCK_AUTH_ID,\r\n\r\n  FARM_PROGRAM_ID_V3,\r\n  FARM_PROGRAM_ID_V5,\r\n  FARM_PROGRAM_ID_V6,\r\n\r\n  OPEN_BOOK_PROGRAM,\r\n  SERUM_PROGRAM_ID_V3,\r\n\r\n  UTIL1216,\r\n\r\n  Router,\r\n\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  LOCK_CPMM_PROGRAM,\r\n  LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH,\r\n};\r\n\r\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\r\n\r\nexport const DEVNET_PROGRAM_ID = {\r\n  SERUM_MARKET: PublicKey.default,\r\n  OPENBOOK_MARKET: new PublicKey(\"EoTcMgcDRTJVZDMZWBoU6rhYHZfkNTVEAfz3uUJRcYGj\"),\r\n\r\n  UTIL1216: PublicKey.default,\r\n\r\n  FarmV3: new PublicKey(\"85BFyr98MbCUU9MVTEgzx1nbhWACbJqLzho6zd6DZcWL\"),\r\n  FarmV5: new PublicKey(\"EcLzTrNg9V7qhcdyXDe2qjtPkiGzDM2UbdRaeaadU5r2\"),\r\n  FarmV6: new PublicKey(\"Farm2hJLcqPtPg8M4rR6DMrsRNc5TPm5Cs4bVQrMe2T7\"),\r\n\r\n  AmmV4: new PublicKey(\"HWy1jotHpo6UqeQxx49dpYYdQB8wj9Qk9MdxwjLvDHB8\"),\r\n  AmmStable: new PublicKey(\"DDg4VmQaJV9ogWce7LpcjBA9bv22wRp5uaTPa5pGjijF\"),\r\n\r\n  CLMM: new PublicKey(\"devi51mZmdwUJGU9hjN27vEz64Gps7uUefqxg27EAtH\"),\r\n  CLMM_LOCK_PROGRAM_ID: new PublicKey(\"DLockwT7X7sxtLmGH9g5kmfcjaBtncdbUmi738m5bvQC\"),\r\n  CLMM_LOCK_AUTH_ID: new PublicKey(\"8qmHNvu2Kr2C7U8mJL4Vz1vTDxMhVuXKREwU7TNoaVEo\"),\r\n\r\n  Router: new PublicKey(\"BVChZ3XFEwTMUk1o9i3HAf91H6mFxSwa5X2wFAWhYPhU\"),\r\n\r\n  CREATE_CPMM_POOL_PROGRAM: DEV_CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH: DEV_CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC: DEV_CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  FEE_DESTINATION_ID: new PublicKey(\"3XMrhbv989VxAMi3DErLV9eJht1pHppW5LbKxe9fkEFR\"),\r\n\r\n  LOCK_CPMM_PROGRAM: DEV_LOCK_CPMM_PROGRAM,\r\n  LCOK_CPMM_AUTH: DEV_LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM: DEV_LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH: DEV_LAUNCHPAD_AUTH,\r\n};\r\n","import { EpochInfo } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { TransferFee, TransferFeeConfig } from \"@solana/spl-token\";\r\n\r\nimport { TransferFeeDataBaseType } from \"../api/type\";\r\nimport { GetTransferAmountFee } from \"../raydium/type\";\r\n\r\nconst POINT = 10_000;\r\nexport function getTransferAmountFee(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function getTransferAmountFeeV2(\r\n  amount: BN,\r\n  _feeConfig: TransferFeeDataBaseType | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (_feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const feeConfig = {\r\n    ..._feeConfig,\r\n    olderTransferFee: {\r\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\r\n    },\r\n    newerTransferFee: {\r\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\r\n    },\r\n  };\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function minExpirationTime(\r\n  expirationTime1: number | undefined,\r\n  expirationTime2: number | undefined,\r\n): number | undefined {\r\n  if (expirationTime1 === undefined) return expirationTime2;\r\n  if (expirationTime2 === undefined) return expirationTime1;\r\n\r\n  return Math.min(expirationTime1, expirationTime2);\r\n}\r\n\r\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\r\n  const { div, mod } = bn1.divmod(bn2);\r\n\r\n  if (mod.gt(new BN(0))) {\r\n    return div.add(new BN(1));\r\n  } else {\r\n    return div;\r\n  }\r\n}\r\n\r\nexport function ceilDivBN(amountA: BN, amountB: BN): BN {\r\n  if (amountA.isZero()) return new BN(0);\r\n\r\n  const quotient = amountA.div(amountB);\r\n\r\n  if (quotient.isZero()) return new BN(1);\r\n\r\n  const remainder = amountA.mod(amountB);\r\n  if (remainder.gt(new BN(0))) {\r\n    return quotient.add(new BN(1));\r\n  }\r\n  return quotient;\r\n}\r\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\r\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\r\n\r\nexport interface CacheLTA {\r\n  [key: string]: AddressLookupTableAccount;\r\n}\r\n\r\nexport async function getMultipleLookupTableInfo({\r\n  connection,\r\n  address,\r\n}: {\r\n  connection: Connection;\r\n  address: PublicKey[];\r\n}): Promise<CacheLTA> {\r\n  const dataInfos = await getMultipleAccountsInfo(\r\n    connection,\r\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\r\n  );\r\n\r\n  const outDict: CacheLTA = {};\r\n  for (let i = 0; i < address.length; i++) {\r\n    const info = dataInfos[i];\r\n    const key = address[i];\r\n    if (!info) continue;\r\n    const lookupAccount = new AddressLookupTableAccount({\r\n      key,\r\n      state: AddressLookupTableAccount.deserialize(info.data),\r\n    });\r\n    outDict[key.toString()] = lookupAccount;\r\n    LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n  }\r\n\r\n  return outDict;\r\n}\r\n\r\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\r\n  \"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\": new AddressLookupTableAccount({\r\n    key: new PublicKey(\"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\"),\r\n    state: AddressLookupTableAccount.deserialize(\r\n      Buffer.from(\r\n        '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',\r\n        \"base64\",\r\n      ),\r\n    ),\r\n  }),\r\n};\r\n","import {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  sendAndConfirmTransaction,\r\n  SignatureResult,\r\n  Signer,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\nimport axios from \"axios\";\r\n\r\nimport { Api } from \"../../api\";\r\nimport { ComputeBudgetConfig, SignAllTransactions, TxTipConfig } from \"../../raydium/type\";\r\nimport { Cluster } from \"../../solana\";\r\nimport { Owner } from \"../owner\";\r\nimport { CacheLTA, getMultipleLookupTableInfo, LOOKUP_TABLE_CACHE } from \"./lookupTable\";\r\nimport { InstructionType, TxVersion } from \"./txType\";\r\nimport {\r\n  addComputeBudget,\r\n  checkLegacyTxSize,\r\n  checkV0TxSize,\r\n  confirmTransaction,\r\n  getRecentBlockHash,\r\n  printSimulate,\r\n} from \"./txUtils\";\r\n\r\ninterface SolanaFeeInfo {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  priorityTx: number;\r\n  nonVotes: number;\r\n  priorityRatio: number;\r\n  avgCuPerBlock: number;\r\n  blockspaceUsageRatio: number;\r\n}\r\ntype SolanaFeeInfoJson = {\r\n  \"1\": SolanaFeeInfo;\r\n  \"5\": SolanaFeeInfo;\r\n  \"15\": SolanaFeeInfo;\r\n};\r\n\r\ninterface ExecuteParams {\r\n  skipPreflight?: boolean;\r\n  recentBlockHash?: string;\r\n  sendAndConfirm?: boolean;\r\n  notSendToRpc?: boolean;\r\n}\r\n\r\ninterface TxBuilderInit {\r\n  connection: Connection;\r\n  feePayer: PublicKey;\r\n  cluster: Cluster;\r\n  owner?: Owner;\r\n  blockhashCommitment?: Commitment;\r\n  loopMultiTxStatus?: boolean;\r\n  api?: Api;\r\n  signAllTransactions?: SignAllTransactions;\r\n}\r\n\r\nexport interface AddInstructionParam {\r\n  addresses?: Record<string, PublicKey>;\r\n  instructions?: TransactionInstruction[];\r\n  endInstructions?: TransactionInstruction[];\r\n  lookupTableAddress?: string[];\r\n  signers?: Signer[];\r\n  instructionTypes?: string[];\r\n  endInstructionTypes?: string[];\r\n}\r\n\r\nexport interface TxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transaction: Transaction;\r\n  instructionTypes: string[];\r\n  signers: Signer[];\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transaction: VersionedTransaction;\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\r\n}\r\n\r\ntype TxUpdateParams = {\r\n  txId: string;\r\n  status: \"success\" | \"error\" | \"sent\";\r\n  signedTx: Transaction | VersionedTransaction;\r\n};\r\nexport interface MultiTxExecuteParam extends ExecuteParams {\r\n  sequentially: boolean;\r\n  skipTxCount?: number;\r\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\r\n}\r\nexport interface MultiTxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transactions: Transaction[];\r\n  instructionTypes: string[];\r\n  signers: Signer[][];\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface MultiTxV0BuildData<T = Record<string, any>>\r\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transactions: VersionedTransaction[];\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\r\n}\r\n\r\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? MultiTxBuildData<O>\r\n  : MultiTxV0BuildData<O>;\r\n\r\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? TxBuildData<O>\r\n  : TxV0BuildData<O>;\r\n\r\nconst LOOP_INTERVAL = 2000;\r\n\r\nexport class TxBuilder {\r\n  private connection: Connection;\r\n  private owner?: Owner;\r\n  private instructions: TransactionInstruction[] = [];\r\n  private endInstructions: TransactionInstruction[] = [];\r\n  private lookupTableAddress: string[] = [];\r\n  private signers: Signer[] = [];\r\n  private instructionTypes: string[] = [];\r\n  private endInstructionTypes: string[] = [];\r\n  private feePayer: PublicKey;\r\n  private cluster: Cluster;\r\n  private signAllTransactions?: SignAllTransactions;\r\n  private blockhashCommitment?: Commitment;\r\n  private loopMultiTxStatus: boolean;\r\n\r\n  constructor(params: TxBuilderInit) {\r\n    this.connection = params.connection;\r\n    this.feePayer = params.feePayer;\r\n    this.signAllTransactions = params.signAllTransactions;\r\n    this.owner = params.owner;\r\n    this.cluster = params.cluster;\r\n    this.blockhashCommitment = params.blockhashCommitment;\r\n    this.loopMultiTxStatus = !!params.loopMultiTxStatus;\r\n  }\r\n\r\n  get AllTxData(): {\r\n    instructions: TransactionInstruction[];\r\n    endInstructions: TransactionInstruction[];\r\n    signers: Signer[];\r\n    instructionTypes: string[];\r\n    endInstructionTypes: string[];\r\n    lookupTableAddress: string[];\r\n  } {\r\n    return {\r\n      instructions: this.instructions,\r\n      endInstructions: this.endInstructions,\r\n      signers: this.signers,\r\n      instructionTypes: this.instructionTypes,\r\n      endInstructionTypes: this.endInstructionTypes,\r\n      lookupTableAddress: this.lookupTableAddress,\r\n    };\r\n  }\r\n\r\n  get allInstructions(): TransactionInstruction[] {\r\n    return [...this.instructions, ...this.endInstructions];\r\n  }\r\n\r\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\r\n    const json = (\r\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\r\n    ).data;\r\n    const { avg } = json?.[15] ?? {};\r\n    if (!avg) return undefined;\r\n    return {\r\n      units: 600000,\r\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\r\n    };\r\n  }\r\n\r\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\r\n    if (config) {\r\n      const { instructions, instructionTypes } = addComputeBudget(config);\r\n      this.instructions.unshift(...instructions);\r\n      this.instructionTypes.unshift(...instructionTypes);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public addTipInstruction(tipConfig?: TxTipConfig): boolean {\r\n    if (tipConfig) {\r\n      this.endInstructions.push(\r\n        SystemProgram.transfer({\r\n          fromPubkey: tipConfig.feePayer ?? this.feePayer,\r\n          toPubkey: new PublicKey(tipConfig.address),\r\n          lamports: BigInt(tipConfig.amount.toString()),\r\n        }),\r\n      );\r\n      this.endInstructionTypes.push(InstructionType.TransferTip);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async calComputeBudget({\r\n    config: propConfig,\r\n    defaultIns,\r\n  }: {\r\n    config?: ComputeBudgetConfig;\r\n    defaultIns?: TransactionInstruction[];\r\n  }): Promise<void> {\r\n    try {\r\n      const config = propConfig || (await this.getComputeBudgetConfig());\r\n      if (this.addCustomComputeBudget(config)) return;\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    } catch {\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    }\r\n  }\r\n\r\n  public addInstruction({\r\n    instructions = [],\r\n    endInstructions = [],\r\n    signers = [],\r\n    instructionTypes = [],\r\n    endInstructionTypes = [],\r\n    lookupTableAddress = [],\r\n  }: AddInstructionParam): TxBuilder {\r\n    this.instructions.push(...instructions);\r\n    this.endInstructions.push(...endInstructions);\r\n    this.signers.push(...signers);\r\n    this.instructionTypes.push(...instructionTypes);\r\n    this.endInstructionTypes.push(...endInstructionTypes);\r\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\r\n    return this;\r\n  }\r\n\r\n  public async versionBuild<O = Record<string, any>>(\r\n    {\r\n      txVersion,\r\n      extInfo,\r\n    }: {\r\n      txVersion?: TxVersion;\r\n      extInfo?: O;\r\n    },\r\n    nonce?: string,\r\n  ): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0({ ...(extInfo || {}) }, nonce)) as MakeTxData<TxVersion.V0, O>;\r\n    return this.build<O>(extInfo, nonce) as MakeTxData<TxVersion.LEGACY, O>;\r\n  }\r\n\r\n  public build<O = Record<string, any>>(extInfo?: O, nonce?: string): MakeTxData<TxVersion.LEGACY, O> {\r\n    const transaction = new Transaction();\r\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\r\n    transaction.feePayer = this.feePayer;\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        const recentBlockHash =\r\n          propBlockHash ?? nonce ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        transaction.recentBlockhash = recentBlockHash;\r\n        if (this.signers.length) transaction.sign(...this.signers);\r\n\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = sendAndConfirm\r\n            ? await sendAndConfirmTransaction(\r\n                this.connection,\r\n                transaction,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              )\r\n            : await this.connection.sendRawTransaction(transaction.serialize(), { skipPreflight });\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(...this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || ({} as O),\r\n    };\r\n  }\r\n\r\n  public buildMultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\r\n    extInfo?: T;\r\n  }): MultiTxBuildData {\r\n    const { extraPreBuildData = [], extInfo } = params;\r\n    const { transaction } = this.build(extInfo);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\r\n\r\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            let i = 0;\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) continue;\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                tx.recentBlockhash = recentBlockHash;\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\r\n            tx.recentBlockhash = recentBlockHash;\r\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n            return tx;\r\n          });\r\n          printSimulate(partialSignedTxs);\r\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return {\r\n              txIds,\r\n              signedTxs,\r\n            };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\r\n    extraPreBuildData,\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\r\n    txVersion?: T;\r\n    extInfo?: O;\r\n  }): Promise<MakeMultiTxData<T, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0MultiTx({\r\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\r\n        buildProps: extInfo || {},\r\n      })) as MakeMultiTxData<T, O>;\r\n    return this.buildMultiTx<O>({\r\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\r\n      extInfo,\r\n    }) as MakeMultiTxData<T, O>;\r\n  }\r\n\r\n  public async buildV0<O = Record<string, any>>(\r\n    props?: O & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    },\r\n    nonce?: string,\r\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\r\n    const {\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      forerunCreate,\r\n      recentBlockhash: propRecentBlockhash,\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    if (needCacheLTA.length > 0) {\r\n      const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n      for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n    }\r\n\r\n    const recentBlockhash =\r\n      nonce ??\r\n      (forerunCreate\r\n        ? PublicKey.default.toBase58()\r\n        : propRecentBlockhash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment)));\r\n    const messageV0 = new TransactionMessage({\r\n      payerKey: this.feePayer,\r\n      recentBlockhash,\r\n      instructions: [...this.allInstructions],\r\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n    const transaction = new VersionedTransaction(messageV0);\r\n\r\n    transaction.sign(this.signers);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\r\n          if (sendAndConfirm) {\r\n            await confirmTransaction(this.connection, txId);\r\n          }\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendTransaction(txs[0], { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: (extInfo || {}) as O,\r\n    };\r\n  }\r\n\r\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\r\n    buildProps?: T & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    };\r\n  }): Promise<MultiTxV0BuildData> {\r\n    const { extraPreBuildData = [], buildProps } = params;\r\n    const { transaction } = await this.buildV0(buildProps);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\r\n\r\n    const allTransactions: VersionedTransaction[] = [\r\n      transaction,\r\n      ...filterExtraBuildData.map((data) => data.transaction),\r\n    ];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach(async (tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      buildProps,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: buildProps || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuild(\r\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig; splitIns?: TransactionInstruction[] },\r\n  ): Promise<MultiTxBuildData> {\r\n    const { splitIns = [], computeBudgetConfig, ...extInfo } = props || {};\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n\r\n    const allTransactions: Transaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      const _signerStrs = new Set<string>(\r\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\r\n\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer }) ||\r\n          checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          checkLegacyTxSize({\r\n            instructions: computeBudgetConfig\r\n              ? [...computeBudgetData.instructions, ...instructionQueue]\r\n              : [...instructionQueue],\r\n            payer: this.feePayer,\r\n            signers: _signer,\r\n          })\r\n        ) {\r\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n        } else {\r\n          allTransactions.push(new Transaction().add(...instructionQueue));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        checkLegacyTxSize({\r\n          instructions: computeBudgetConfig\r\n            ? [...computeBudgetData.instructions, ...instructionQueue]\r\n            : [...instructionQueue],\r\n          payer: this.feePayer,\r\n          signers: _signers.map((s) => s.publicKey),\r\n        })\r\n      ) {\r\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n      } else {\r\n        allTransactions.push(new Transaction().add(...instructionQueue));\r\n      }\r\n      allSigners.push(_signers);\r\n    }\r\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        allTransactions.forEach(async (tx, idx) => {\r\n          tx.recentBlockhash = recentBlockHash;\r\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n              }\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuildV0(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                console.log(\"skip tx: \", i);\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"../../api/type\";\r\nimport {\r\n  CLMM_LOCK_AUTH_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_PROGRAM_ID,\r\n  InstructionType,\r\n  WSOLMint,\r\n  fetchMultipleMintInfos,\r\n  getATAAddress,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n} from \"@/common\";\r\nimport { AccountLayout, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { toApiV3Token, toFeeConfig } from \"../../raydium/token/utils\";\r\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos, TxTipConfig } from \"../../raydium/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { MakeTransaction } from \"../type\";\r\nimport { ClmmInstrument } from \"./instrument\";\r\nimport { ClmmConfigLayout, ClmmPositionLayout, OperationLayout, PoolInfoLayout, PositionInfoLayout } from \"./layout\";\r\nimport {\r\n  ClmmRpcData,\r\n  ClosePositionExtInfo,\r\n  CollectRewardParams,\r\n  CollectRewardsParams,\r\n  ComputeClmmPoolInfo,\r\n  CreateConcentratedPool,\r\n  DecreaseLiquidity,\r\n  HarvestAllRewardsParams,\r\n  HarvestLockPosition,\r\n  IncreasePositionFromBase,\r\n  IncreasePositionFromLiquidity,\r\n  InitRewardExtInfo,\r\n  InitRewardParams,\r\n  InitRewardsParams,\r\n  LockPosition,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBase,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidity,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  SetRewardParams,\r\n  SetRewardsParams,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport { MAX_SQRT_PRICE_X64, MIN_SQRT_PRICE_X64, mockV3CreatePoolInfo, ZERO } from \"./utils/constants\";\r\nimport { MathUtil, SqrtPriceMath } from \"./utils/math\";\r\nimport {\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaTickArrayAddress,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaExBitmapAccount,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils, clmmComputeInfoToApiInfo } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\n\r\nexport class Clmm extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async getClmmPoolKeys(poolId: string): Promise<ClmmKeys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as ClmmKeys[])[0];\r\n  }\r\n\r\n  public async createPool<T extends TxVersion>(\r\n    props: CreateConcentratedPool<T>,\r\n  ): Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>> {\r\n    const {\r\n      programId,\r\n      owner = this.scope.owner?.publicKey || PublicKey.default,\r\n      mint1,\r\n      mint2,\r\n      ammConfig,\r\n      initialPrice,\r\n      computeBudgetConfig,\r\n      forerunCreate,\r\n      getObserveState,\r\n      txVersion,\r\n      txTipConfig,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const [mintA, mintB, initPrice] = new BN(new PublicKey(mint1.address).toBuffer()).gt(\r\n      new BN(new PublicKey(mint2.address).toBuffer()),\r\n    )\r\n      ? [mint2, mint1, new Decimal(1).div(initialPrice)]\r\n      : [mint1, mint2, initialPrice];\r\n\r\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\r\n\r\n    const extendMintAccount: PublicKey[] = [];\r\n    const fetchAccounts: PublicKey[] = [];\r\n    if (mintA.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintA.address)).publicKey);\r\n    if (mintB.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintB.address)).publicKey);\r\n    const extMintRes = await this.scope.connection.getMultipleAccountsInfo(fetchAccounts);\r\n\r\n    extMintRes.forEach((r, idx) => {\r\n      if (r) extendMintAccount.push(fetchAccounts[idx]);\r\n    });\r\n\r\n    const insInfo = await ClmmInstrument.createPoolInstructions({\r\n      connection: this.scope.connection,\r\n      programId,\r\n      owner,\r\n      mintA,\r\n      mintB,\r\n      ammConfigId: ammConfig.id,\r\n      initialPriceX64,\r\n      forerunCreate: !getObserveState && forerunCreate,\r\n      extendMintAccount,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{\r\n      mockPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n      address: ClmmKeys;\r\n      forerunCreate?: boolean;\r\n    }>({\r\n      txVersion,\r\n      extInfo: {\r\n        address: {\r\n          ...insInfo.address,\r\n          observationId: insInfo.address.observationId.toBase58(),\r\n          exBitmapAccount: insInfo.address.exBitmapAccount.toBase58(),\r\n          programId: programId.toString(),\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          openTime: \"0\",\r\n          vault: { A: insInfo.address.mintAVault.toString(), B: insInfo.address.mintBVault.toString() },\r\n          rewardInfos: [],\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        },\r\n        mockPoolInfo: {\r\n          type: \"Concentrated\",\r\n          rewardDefaultPoolInfos: \"Clmm\",\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          feeRate: ammConfig.tradeFeeRate,\r\n          openTime: \"0\",\r\n          programId: programId.toString(),\r\n          price: initPrice.toNumber(),\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          burnPercent: 0,\r\n          ...mockV3CreatePoolInfo,\r\n        },\r\n        forerunCreate,\r\n      },\r\n    }) as Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>>;\r\n  }\r\n\r\n  public async openPositionFromBase<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    getEphemeralSigners,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: OpenPositionFromBase<T>): Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>> {\r\n    if (this.scope.availability.addConcentratedPosition === false)\r\n      this.logAndCreateError(\"add position feature disabled in your region\");\r\n\r\n    this.scope.checkOwner();\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const [amountA, amountB] = base === \"MintA\" ? [baseAmount, otherAmountMax] : [otherAmountMax, baseAmount];\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountA,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountB,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", {\r\n        ownerTokenAccountA: ownerTokenAccountA?.toBase58(),\r\n        ownerTokenAccountB: ownerTokenAccountB?.toBase58(),\r\n      });\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n    const insInfo = await ClmmInstrument.openPositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        ...ownerInfo,\r\n        feePayer: this.scope.ownerPubKey,\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromBaseExtInfo>({\r\n      txVersion,\r\n      extInfo: { ...insInfo.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>>;\r\n  }\r\n\r\n  public async openPositionFromLiquidity<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n    feePayer,\r\n  }: OpenPositionFromLiquidity<T>): Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>> {\r\n    if (this.scope.availability.createConcentratedPosition === false)\r\n      this.logAndCreateError(\"open position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountMaxA,\r\n            }\r\n            : undefined,\r\n\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountMaxB,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (ownerTokenAccountA === undefined || ownerTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n\r\n    const makeOpenPositionInstructions = await ClmmInstrument.openPositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n    txBuilder.addInstruction(makeOpenPositionInstructions);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: makeOpenPositionInstructions.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromLiquidity<T extends TxVersion>(\r\n    props: IncreasePositionFromLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      liquidity,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountMaxA,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountMaxB,\r\n            }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.increasePositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromBase<T extends TxVersion>(\r\n    props: IncreasePositionFromBase<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      ownerPosition,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || (base === \"MintA\" ? baseAmount : otherAmountMax).isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || (base === \"MintA\" ? otherAmountMax : baseAmount).isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n            }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const ins = ClmmInstrument.increasePositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async decreaseLiquidity<T extends TxVersion>(\r\n    props: DecreaseLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo & Partial<ClosePositionExtInfo>>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      ownerInfo,\r\n      amountMinA,\r\n      amountMinB,\r\n      liquidity,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount: PublicKey | undefined;\r\n\r\n      if (itemReward.mint.address === poolInfo.mintA.address) ownerRewardAccount = ownerTokenAccountA;\r\n      else if (itemReward.mint.address === poolInfo.mintB.address) ownerRewardAccount = ownerTokenAccountB;\r\n      else {\r\n        const { account: _ownerRewardAccount, instructionParams: ownerRewardAccountInstructions } =\r\n          await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            createInfo: {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n        ownerRewardAccount = _ownerRewardAccount;\r\n        ownerRewardAccountInstructions && txBuilder.addInstruction(ownerRewardAccountInstructions);\r\n      }\r\n\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\r\n        \"cannot found target token accounts\",\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccountRawInfos,\r\n      );\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const nft2022 = (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(\r\n      TOKEN_2022_PROGRAM_ID,\r\n    );\r\n    const decreaseInsInfo = await ClmmInstrument.decreaseLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n        rewardAccounts,\r\n      },\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: decreaseInsInfo.instructions,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n    });\r\n\r\n    let extInfo = { ...decreaseInsInfo.address };\r\n    if (ownerInfo.closePosition) {\r\n      const closeInsInfo = await ClmmInstrument.closePositionInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: { wallet: this.scope.ownerPubKey },\r\n        ownerPosition,\r\n        nft2022,\r\n      });\r\n      txBuilder.addInstruction({\r\n        endInstructions: closeInsInfo.instructions,\r\n        endInstructionTypes: closeInsInfo.instructionTypes,\r\n      });\r\n      extInfo = { ...extInfo, ...closeInsInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: extInfo },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async lockPosition<T extends TxVersion>(props: LockPosition<T>): Promise<MakeTxData<ClmmLockAddress>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      poolProgramId = CLMM_PROGRAM_ID,\r\n      ownerPosition,\r\n      payer,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      getEphemeralSigners,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const lockIns = await ClmmInstrument.makeLockPositions({\r\n      programId,\r\n      authProgramId,\r\n      poolProgramId,\r\n      wallet: this.scope.ownerPubKey,\r\n      payer: payer ?? this.scope.ownerPubKey,\r\n      nftMint: ownerPosition.nftMint,\r\n      getEphemeralSigners,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n\r\n    txBuilder.addInstruction(lockIns);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: lockIns.address,\r\n    }) as Promise<MakeTxData<ClmmLockAddress>>;\r\n  }\r\n\r\n  public async harvestLockPosition<T extends TxVersion>(props: HarvestLockPosition<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      clmmProgram = CLMM_PROGRAM_ID,\r\n      poolKeys: propPoolKeys,\r\n      lockData,\r\n      ownerInfo = { useSOLBalance: true },\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(lockData.poolId.toString()));\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const positionData = await this.scope.connection.getAccountInfo(lockData.positionId);\r\n    if (!positionData) this.logger.logWithError(\"position not found\", lockData.positionId);\r\n    const position = PositionInfoLayout.decode(positionData!.data);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintA.programId,\r\n        mint: new PublicKey(poolKeys.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintB.programId,\r\n        mint: new PublicKey(poolKeys.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolKeys.rewardInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n      if (!ownerRewardAccount) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(itemReward.mint.programId),\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n        });\r\n        ownerRewardAccount = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockData.lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(this.scope.ownerPubKey, lockData.lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickLower,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickUpper,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayLowerStartIndex,\r\n    );\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayUpperStartIndex,\r\n    );\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      position.tickLower,\r\n      position.tickUpper,\r\n    );\r\n\r\n    const rewardAccountsFullInfo: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n      rewardAccountsFullInfo.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const harvestLockIns = await ClmmInstrument.harvestLockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      lockPositionId,\r\n      clmmProgram,\r\n      lockOwner: this.scope.ownerPubKey,\r\n      lockNftMint: lockData.lockNftMint,\r\n      lockNftAccount,\r\n      positionNftAccount: lockData.nftAccount,\r\n      positionId: lockData.positionId,\r\n      poolId: lockData.poolId,\r\n      protocolPosition,\r\n      vaultA: new PublicKey(poolKeys.vault.A),\r\n      vaultB: new PublicKey(poolKeys.vault.B),\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      userVaultA: ownerTokenAccountA!,\r\n      userVaultB: ownerTokenAccountB!,\r\n      mintA: new PublicKey(poolKeys.mintA.address),\r\n      mintB: new PublicKey(poolKeys.mintB.address),\r\n      rewardAccounts: rewardAccountsFullInfo,\r\n      exTickArrayBitmap: getPdaExBitmapAccount(clmmProgram, lockData.poolId).publicKey,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [harvestLockIns],\r\n      instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async closePosition<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerPosition,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    txVersion: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T, ClosePositionExtInfo>> {\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.closePositionInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: { wallet: this.scope.ownerPubKey },\r\n      ownerPosition,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.addInstruction(ins).versionBuild<ClosePositionExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ClosePositionExtInfo>>;\r\n  }\r\n\r\n  public async initReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardParams<T>): Promise<MakeTxData<T, InitRewardExtInfo>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const rewardMintUseSOLBalance =\r\n      ownerInfo.useSOLBalance && rewardInfo.mint.address.toString() === WSOLMint.toString();\r\n    const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo.mint.address),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: new BN(\r\n              new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                ? _baseRewardAmount.toFixed(0)\r\n                : _baseRewardAmount.add(1).toFixed(0),\r\n            ),\r\n          }\r\n          : undefined,\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.initRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        programId: new PublicKey(rewardInfo.mint.programId),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<InitRewardExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, InitRewardExtInfo>>;\r\n  }\r\n\r\n  public async initRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n    }\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardInfo of rewardInfos) {\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                  ? _baseRewardAmount.toFixed(0)\r\n                  : _baseRewardAmount.add(1).toFixed(0),\r\n              ),\r\n            }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.initRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          programId: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n      txBuilder.addInstruction(insInfo);\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: rewardInfo.programId,\r\n        mint: rewardInfo.mint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: new BN(\r\n              new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n              )\r\n                ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                : rewardInfo.perSecond\r\n                  .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                  .add(1)\r\n                  .toFixed(0),\r\n            ),\r\n          }\r\n          : undefined,\r\n\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.setRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        mint: rewardInfo.mint,\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                  rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n                )\r\n                  ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                  : rewardInfo.perSecond\r\n                    .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                    .add(1)\r\n                    .toFixed(0),\r\n              ),\r\n            }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.setRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMint,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: CollectRewardParams<T>): Promise<MakeTxData<{ address: Record<string, PublicKey> }>> {\r\n    const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n    if (!rewardInfo) this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo!.mint.programId),\r\n        mint: rewardMint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.collectRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardMint,\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<{ address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectRewards({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMints,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CollectRewardsParams): Promise<MakeTransaction> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardMint of rewardMints) {\r\n      const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n      if (!rewardInfo) {\r\n        this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n        continue;\r\n      }\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: rewardMint,\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n      const insInfo = ClmmInstrument.collectRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n\r\n        rewardMint,\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = { ...address, ...insInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address });\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    inputMint: string | PublicKey;\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = inputMint.toString() === poolInfo.mintA.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = baseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? amountIn : 0,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? 0 : amountIn,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        inputMint: new PublicKey(inputMint),\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swapBaseOut<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    outputMint: string | PublicKey;\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = outputMint.toString() === poolInfo.mintB.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 =\r\n        outputMint.toString() === poolInfo.mintB.address\r\n          ? MIN_SQRT_PRICE_X64.add(new BN(1))\r\n          : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? amountInMax : 0,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? 0 : amountInMax,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseOutInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        outputMint: new PublicKey(outputMint),\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>({\r\n    allPoolInfo,\r\n    allPositions,\r\n    lockInfo,\r\n    ownerInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    programId,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n  }: HarvestAllRewardsParams<T>): Promise<MakeMultiTxData<T>> {\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccountRawInfos) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, programId).publicKey;\r\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      } else {\r\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      }\r\n    }\r\n    const allNftMints = Object.values(allPositions)\r\n      .flat()\r\n      .map((p) => p.nftMint);\r\n\r\n    const mintData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      allNftMints.map((n) => ({ pubkey: n })),\r\n    );\r\n    const record: Record<string, PublicKey | null> = {};\r\n    mintData.forEach((data) => {\r\n      record[data.pubkey.toBase58()] = data?.accountInfo?.owner ?? null;\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    for (const itemInfo of Object.values(allPoolInfo)) {\r\n      if (allPositions[itemInfo.id] === undefined) continue;\r\n      if (\r\n        !allPositions[itemInfo.id].find(\r\n          (i) => !i.liquidity.isZero() || i.rewardInfos.find((ii) => !ii.rewardAmountOwed.isZero()),\r\n        )\r\n      )\r\n        continue;\r\n\r\n      const poolInfo = itemInfo;\r\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n      let ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.address];\r\n      if (!ownerTokenAccountA) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: poolInfo.mintA.programId,\r\n          mint: new PublicKey(poolInfo.mintA.address),\r\n          notUseTokenAccount: mintAUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !mintAUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerTokenAccountA = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      let ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.address];\r\n      if (!ownerTokenAccountB) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: poolInfo.mintB.programId,\r\n          mint: new PublicKey(poolInfo.mintB.address),\r\n          notUseTokenAccount: mintBUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !mintBUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerTokenAccountB = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[poolInfo.mintA.address] = ownerTokenAccountA;\r\n      ownerMintToAccount[poolInfo.mintB.address] = ownerTokenAccountB;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n\r\n      for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          });\r\n          ownerRewardAccount = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount!);\r\n      }\r\n\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n\r\n      const rewardAccountsFullInfo: {\r\n        poolRewardVault: PublicKey;\r\n        ownerRewardVault: PublicKey;\r\n        rewardMint: PublicKey;\r\n      }[] = [];\r\n      for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n        rewardAccountsFullInfo.push({\r\n          poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n          ownerRewardVault: rewardAccounts[i],\r\n          rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n        });\r\n      }\r\n\r\n      for (const itemPosition of allPositions[itemInfo.id]) {\r\n        const lockData = lockInfo?.[itemInfo.id]?.[itemPosition.nftMint.toBase58()];\r\n        if (lockData) {\r\n          const lockNftAccount = getATAAddress(\r\n            this.scope.ownerPubKey,\r\n            lockData.lockNftMint,\r\n            TOKEN_PROGRAM_ID,\r\n          ).publicKey;\r\n\r\n          const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickLower,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickUpper,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayLowerStartIndex,\r\n          );\r\n          const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayUpperStartIndex,\r\n          );\r\n          const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            itemPosition.tickLower,\r\n            itemPosition.tickUpper,\r\n          );\r\n          const lockPositionId = getPdaLockClPositionIdV2(CLMM_LOCK_PROGRAM_ID, lockData.lockNftMint).publicKey;\r\n          const harvestLockIns = ClmmInstrument.harvestLockPositionInstructionV2({\r\n            programId: CLMM_LOCK_PROGRAM_ID,\r\n            auth: CLMM_LOCK_AUTH_ID,\r\n            lockPositionId,\r\n            clmmProgram: CLMM_PROGRAM_ID,\r\n            lockOwner: this.scope.ownerPubKey,\r\n            lockNftMint: lockData.lockNftMint,\r\n            lockNftAccount,\r\n            positionNftAccount: lockData.nftAccount,\r\n            positionId: lockData.positionId,\r\n            poolId: lockData.poolId,\r\n            protocolPosition,\r\n            vaultA: new PublicKey(poolKeys.vault.A),\r\n            vaultB: new PublicKey(poolKeys.vault.B),\r\n            tickArrayLower,\r\n            tickArrayUpper,\r\n            userVaultA: ownerTokenAccountA!,\r\n            userVaultB: ownerTokenAccountB!,\r\n            mintA: new PublicKey(poolKeys.mintA.address),\r\n            mintB: new PublicKey(poolKeys.mintB.address),\r\n            rewardAccounts: rewardAccountsFullInfo,\r\n            exTickArrayBitmap: getPdaExBitmapAccount(CLMM_PROGRAM_ID, lockData.poolId).publicKey,\r\n          });\r\n          txBuilder.addInstruction({\r\n            instructions: [harvestLockIns],\r\n            instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n            lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n          });\r\n        } else {\r\n          const insData = ClmmInstrument.decreaseLiquidityInstructions({\r\n            poolInfo,\r\n            poolKeys,\r\n            ownerPosition: itemPosition,\r\n            ownerInfo: {\r\n              wallet: this.scope.ownerPubKey,\r\n              tokenAccountA: ownerTokenAccountA,\r\n              tokenAccountB: ownerTokenAccountB,\r\n              rewardAccounts,\r\n            },\r\n            liquidity: new BN(0),\r\n            amountMinA: new BN(0),\r\n            amountMinB: new BN(0),\r\n            nft2022: record[itemPosition.nftMint.toBase58()]?.equals(TOKEN_2022_PROGRAM_ID),\r\n          });\r\n          txBuilder.addInstruction(insData);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async getWhiteListMint({ programId }: { programId: PublicKey }): Promise<PublicKey[]> {\r\n    const accountInfo = await this.scope.connection.getAccountInfo(getPdaOperationAccount(programId).publicKey);\r\n    if (!accountInfo) return [];\r\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data);\r\n    return whitelistMintsInfo.whitelistMints.filter((i) => !i.equals(PublicKey.default));\r\n  }\r\n\r\n  public async getOwnerPositionInfo({\r\n    programId,\r\n  }: {\r\n    programId: string | PublicKey;\r\n  }): Promise<ReturnType<typeof PositionInfoLayout.decode>[]> {\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\r\n    const allPositionKey = balanceMints.map(\r\n      (acc) => getPdaPersonalPositionAddress(new PublicKey(programId), acc.accountInfo.mint).publicKey,\r\n    );\r\n\r\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\r\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\r\n    accountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = PositionInfoLayout.decode(positionRes.data);\r\n      allPosition.push(position);\r\n    });\r\n\r\n    return allPosition;\r\n  }\r\n\r\n  public async getRpcClmmPoolInfo({ poolId }: { poolId: string | PublicKey }): Promise<ClmmRpcData> {\r\n    return (await this.getRpcClmmPoolInfos({ poolIds: [poolId] }))[String(poolId)];\r\n  }\r\n\r\n  public async getRpcClmmPoolInfos({\r\n    poolIds,\r\n    config,\r\n  }: {\r\n    poolIds: (string | PublicKey)[];\r\n    config?: { batchRequest?: boolean; chunkCount?: number };\r\n  }): Promise<{\r\n    [poolId: string]: ClmmRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n    const returnData: {\r\n      [poolId: string]: ClmmRpcData;\r\n    } = {};\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = PoolInfoLayout.decode(item.accountInfo.data);\r\n      const currentPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n        rpc.sqrtPriceX64,\r\n        rpc.mintDecimalsA,\r\n        rpc.mintDecimalsB,\r\n      ).toNumber();\r\n\r\n      returnData[String(poolIds[i])] = {\r\n        ...rpc,\r\n        currentPrice,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  public async getComputeClmmPoolInfos({\r\n    clmmPoolsRpcInfo,\r\n    mintInfos,\r\n  }: {\r\n    clmmPoolsRpcInfo: Record<\r\n      string,\r\n      ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number; programId: PublicKey }\r\n    >;\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n  }): Promise<{\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const configSet = new Set(Object.keys(clmmPoolsRpcInfo).map((p) => clmmPoolsRpcInfo[p].ammConfig.toBase58()));\r\n    const res = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      Array.from(configSet).map((s) => ({ pubkey: new PublicKey(s) })),\r\n    );\r\n    const clmmConfigs: Record<string, ReturnType<typeof ClmmConfigLayout.decode>> = {};\r\n    res.forEach((acc) => {\r\n      if (!acc.accountInfo) return;\r\n      clmmConfigs[acc.pubkey.toBase58()] = ClmmConfigLayout.decode(acc.accountInfo.data);\r\n    });\r\n    const computeClmmPoolInfo = await PoolUtils.fetchComputeMultipleClmmInfo({\r\n      connection: this.scope.connection,\r\n      rpcDataMap: clmmPoolsRpcInfo,\r\n      poolList: Object.keys(clmmPoolsRpcInfo).map((poolId) => {\r\n        const [mintA, mintB] = [clmmPoolsRpcInfo[poolId].mintA.toBase58(), clmmPoolsRpcInfo[poolId].mintB.toBase58()];\r\n        return {\r\n          id: poolId,\r\n          programId: clmmPoolsRpcInfo[poolId].programId.toBase58(),\r\n          mintA: toApiV3Token({\r\n            address: mintA,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsA,\r\n            programId: mintInfos[mintA].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          mintB: toApiV3Token({\r\n            address: mintB,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsB,\r\n            programId: mintInfos[mintB].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          price: clmmPoolsRpcInfo[poolId].currentPrice,\r\n          config: {\r\n            ...clmmConfigs[clmmPoolsRpcInfo[poolId].ammConfig.toBase58()],\r\n            id: clmmPoolsRpcInfo[poolId].ammConfig.toBase58(),\r\n\r\n            fundFeeRate: 0,\r\n            description: \"\",\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        };\r\n      }),\r\n    });\r\n\r\n    const computePoolTickData = await PoolUtils.fetchMultiplePoolTickArrays({\r\n      connection: this.scope.connection,\r\n      poolKeys: Object.values(computeClmmPoolInfo),\r\n    });\r\n\r\n    return {\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n    };\r\n  }\r\n\r\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    computePoolInfo: ComputeClmmPoolInfo;\r\n    tickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const rpcData = await this.getRpcClmmPoolInfo({ poolId });\r\n\r\n    const mintSet = new Set([rpcData.mintA.toBase58(), rpcData.mintB.toBase58()]);\r\n\r\n    const mintInfos = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo: { [poolId]: rpcData },\r\n      mintInfos,\r\n    });\r\n    const vaultData = await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, [\r\n      { pubkey: rpcData.vaultA },\r\n      { pubkey: rpcData.vaultB },\r\n    ]);\r\n\r\n    const poolInfo = clmmComputeInfoToApiInfo(computeClmmPoolInfo[poolId]);\r\n\r\n    if (!vaultData[0].accountInfo || !vaultData[1].accountInfo) throw new Error(\"pool vault data not found\");\r\n    poolInfo.mintAmountA = Number(AccountLayout.decode(vaultData[0].accountInfo.data).amount.toString());\r\n    poolInfo.mintAmountB = Number(AccountLayout.decode(vaultData[1].accountInfo?.data).amount.toString());\r\n\r\n    const poolKeys: ClmmKeys = {\r\n      ...computeClmmPoolInfo[poolId],\r\n      exBitmapAccount: computeClmmPoolInfo[poolId].exBitmapAccount.toBase58(),\r\n      observationId: computeClmmPoolInfo[poolId].observationId.toBase58(),\r\n      id: poolId,\r\n      programId: rpcData.programId.toBase58(),\r\n      openTime: rpcData.startTime.toString(),\r\n      vault: {\r\n        A: rpcData.vaultA.toBase58(),\r\n        B: rpcData.vaultB.toBase58(),\r\n      },\r\n      config: poolInfo.config,\r\n      rewardInfos: computeClmmPoolInfo[poolId].rewardInfos\r\n        .filter((r) => !r.tokenVault.equals(PublicKey.default))\r\n        .map((r) => ({\r\n          mint: toApiV3Token({ address: r.tokenMint.toBase58(), programId: TOKEN_PROGRAM_ID.toBase58(), decimals: 10 }),\r\n          vault: r.tokenVault.toBase58(),\r\n        })),\r\n    };\r\n    return { poolInfo, poolKeys, computePoolInfo: computeClmmPoolInfo[poolId], tickData: computePoolTickData };\r\n  }\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { MintLayout, RawMint, TOKEN_PROGRAM_ID, TransferFeeConfigLayout } from \"@solana/spl-token\";\r\nimport { BigNumberish } from \"@/common/bignumber\";\r\nimport { Token, TokenAmount } from \"../../module\";\r\nimport { SOL_INFO, TOKEN_WSOL } from \"./constant\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nimport { ApiV3Token } from \"../../api\";\r\nimport { solToWSol } from \"@/common\";\r\n\r\nexport const parseTokenInfo = async ({\r\n  connection,\r\n  mint,\r\n}: {\r\n  connection: Connection;\r\n  mint: PublicKey | string;\r\n}): Promise<RawMint | undefined> => {\r\n  const accountData = await connection.getAccountInfo(new PublicKey(mint));\r\n  if (!accountData || accountData.data.length !== MintLayout.span) return;\r\n  const tokenInfo = MintLayout.decode(accountData.data);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n  return tokenInfo;\r\n};\r\n\r\nexport const toTokenInfo = ({\r\n  mint,\r\n  decimals,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  logoURI = \"\",\r\n  priority = 3,\r\n}: {\r\n  mint: PublicKey;\r\n  decimals: number;\r\n  programId?: PublicKey | string;\r\n  priority?: number;\r\n  logoURI?: string;\r\n}): TokenInfo => {\r\n  const pubStr = mint.toBase58().substring(0, 6);\r\n  return {\r\n    address: mint.toBase58(),\r\n    decimals,\r\n    symbol: pubStr,\r\n    logoURI,\r\n    extensions: {},\r\n    chainId: 101,\r\n    programId: programId.toString(),\r\n    name: pubStr,\r\n    tags: [],\r\n    priority,\r\n  };\r\n};\r\n\r\nexport const toToken = (props: Omit<TokenInfo, \"priority\">): Token =>\r\n  new Token({\r\n    mint: props.address,\r\n    decimals: props.decimals,\r\n    symbol: props.symbol,\r\n    name: props.name,\r\n  });\r\n\r\nexport const toTokenAmount = ({\r\n  amount,\r\n  isRaw,\r\n  name,\r\n  ...props\r\n}: Omit<TokenInfo, \"priority\"> & {\r\n  amount: BigNumberish;\r\n  isRaw?: boolean;\r\n  name?: string;\r\n}): TokenAmount =>\r\n  new TokenAmount(\r\n    new Token({\r\n      mint: solToWSol(props.address).toBase58(),\r\n      decimals: props.decimals,\r\n      symbol: props.symbol,\r\n      name,\r\n    }),\r\n    amount,\r\n    isRaw,\r\n    name,\r\n  );\r\n\r\nexport function solToWSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === SOL_INFO.address) return TOKEN_WSOL as T;\r\n  return token;\r\n}\r\n\r\nexport function wSolToSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === TOKEN_WSOL.address) return SOL_INFO as T;\r\n  return token;\r\n}\r\n\r\nexport const toApiV3Token = ({\r\n  address,\r\n  programId,\r\n  decimals,\r\n  ...props\r\n}: {\r\n  address: string;\r\n  programId: string;\r\n  decimals: number;\r\n} & Partial<ApiV3Token>): ApiV3Token => ({\r\n  chainId: 101,\r\n  address: solToWSol(address).toBase58(),\r\n  programId,\r\n  logoURI: \"\",\r\n  symbol: \"\",\r\n  name: \"\",\r\n  decimals,\r\n  tags: [],\r\n  extensions: props.extensions || {},\r\n  ...props,\r\n});\r\n\r\nexport const toFeeConfig = (\r\n  config?: ReturnType<typeof TransferFeeConfigLayout.decode> | undefined | null,\r\n): ApiV3Token[\"extensions\"][\"feeConfig\"] | undefined =>\r\n  config\r\n    ? {\r\n        ...config,\r\n        transferFeeConfigAuthority: config.transferFeeConfigAuthority.toBase58(),\r\n        withdrawWithheldAuthority: config.withdrawWithheldAuthority.toBase58(),\r\n        withheldAmount: config.withheldAmount.toString(),\r\n        olderTransferFee: {\r\n          ...config.olderTransferFee,\r\n          epoch: config.olderTransferFee.epoch.toString(),\r\n          maximumFee: config.olderTransferFee.maximumFee.toString(),\r\n        },\r\n        newerTransferFee: {\r\n          ...config.newerTransferFee,\r\n          epoch: config.newerTransferFee.epoch.toString(),\r\n          maximumFee: config.newerTransferFee.maximumFee.toString(),\r\n        },\r\n      }\r\n    : undefined;\r\n","import { Connection, Keypair, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token, ClmmKeys } from \"@/api/type\";\r\nimport {\r\n  InstructionType,\r\n  MEMO_PROGRAM_ID,\r\n  MEMO_PROGRAM_ID2,\r\n  METADATA_PROGRAM_ID,\r\n  RENT_PROGRAM_ID,\r\n  createLogger,\r\n  getATAAddress,\r\n  parseBigNumberish,\r\n} from \"@/common\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { bool, s32, struct, u128, u64, u8 } from \"@/marshmallow\";\r\nimport { ClmmPositionLayout, ObservationInfoLayout } from \"./layout\";\r\nimport {\r\n  ClmmPoolPersonalPosition,\r\n  ClosePositionExtInfo,\r\n  InitRewardExtInfo,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport {\r\n  getPdaExBitmapAccount,\r\n  getPdaLockPositionId,\r\n  getPdaMetadataKey,\r\n  getPdaObservationAccount,\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaPoolId,\r\n  getPdaPoolRewardVaulId,\r\n  getPdaPoolVaultId,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaTickArrayAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\nimport { ZERO } from \"./utils/constants\";\r\nObservationInfoLayout.span; // do not delete this line\r\n\r\nconst logger = createLogger(\"Raydium_Clmm\");\r\n\r\nconst anchorDataBuf = {\r\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\r\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\r\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\r\n  openPosition: [77, 184, 74, 214, 112, 86, 241, 199],\r\n  openPositionWithTokenEx: [77, 255, 174, 82, 125, 29, 201, 46],\r\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\r\n  increaseLiquidity: [133, 29, 89, 223, 69, 238, 176, 10],\r\n  decreaseLiquidity: [58, 127, 188, 62, 79, 82, 196, 96],\r\n  swap: [43, 4, 237, 11, 26, 201, 30, 98], // [248, 198, 158, 145, 225, 117, 135, 200],\r\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\r\n};\r\n\r\nconst lockInsDataBuf = [188, 37, 179, 131, 82, 150, 84, 73];\r\nconst lockHarvestInsDataBuf = [16, 72, 250, 198, 14, 162, 212, 19];\r\n\r\ninterface CreatePoolInstruction {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  ammConfigId: PublicKey;\r\n  initialPriceX64: BN;\r\n  forerunCreate?: boolean;\r\n  extendMintAccount?: PublicKey[];\r\n}\r\n\r\nexport class ClmmInstrument {\r\n  static createPoolInstruction(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    poolCreator: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    observationId: PublicKey,\r\n    mintA: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintProgramIdA: PublicKey,\r\n    mintB: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintProgramIdB: PublicKey,\r\n    exTickArrayBitmap: PublicKey,\r\n    sqrtPriceX64: BN,\r\n    extendMintAccount?: PublicKey[],\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"sqrtPriceX64\"), u64(\"zero\")]);\r\n\r\n    const keys = [\r\n      { pubkey: poolCreator, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n      { pubkey: exTickArrayBitmap, isSigner: false, isWritable: true },\r\n      { pubkey: mintProgramIdA, isSigner: false, isWritable: false },\r\n      { pubkey: mintProgramIdB, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      ...(extendMintAccount?.map((k) => ({ pubkey: k, isSigner: false, isWritable: false })) || []),\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        sqrtPriceX64,\r\n        zero: ZERO,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async createPoolInstructions(props: CreatePoolInstruction): Promise<\r\n    ReturnTypeMakeInstructions<{\r\n      poolId: PublicKey;\r\n      observationId: PublicKey;\r\n      exBitmapAccount: PublicKey;\r\n      mintAVault: PublicKey;\r\n      mintBVault: PublicKey;\r\n    }>\r\n  > {\r\n    const { programId, owner, mintA, mintB, ammConfigId, initialPriceX64, extendMintAccount } = props;\r\n    const [mintAAddress, mintBAddress] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\r\n\r\n    const { publicKey: poolId } = getPdaPoolId(programId, ammConfigId, mintAAddress, mintBAddress);\r\n    const { publicKey: observationId } = getPdaObservationAccount(programId, poolId);\r\n    const { publicKey: mintAVault } = getPdaPoolVaultId(programId, poolId, mintAAddress);\r\n    const { publicKey: mintBVault } = getPdaPoolVaultId(programId, poolId, mintBAddress);\r\n    const exBitmapAccount = getPdaExBitmapAccount(programId, poolId).publicKey;\r\n\r\n    const ins = [\r\n      this.createPoolInstruction(\r\n        programId,\r\n        poolId,\r\n        owner,\r\n        ammConfigId,\r\n        observationId,\r\n        mintAAddress,\r\n        mintAVault,\r\n        new PublicKey(mintA.programId || TOKEN_PROGRAM_ID),\r\n        mintBAddress,\r\n        mintBVault,\r\n        new PublicKey(mintB.programId || TOKEN_PROGRAM_ID),\r\n        exBitmapAccount,\r\n        initialPriceX64,\r\n        extendMintAccount,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.CreateAccount, InstructionType.ClmmCreatePool],\r\n      address: { poolId, observationId, exBitmapAccount, mintAVault, mintBVault },\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      signers,\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n    };\r\n  }\r\n\r\n  static async openPositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromBaseExtInfo>> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromBaseInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromBaseInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromLiquidityExtInfo[\"address\"]>> {\r\n    let nftMintAccount: PublicKey;\r\n    const signers: Keypair[] = [];\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static closePositionInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n    nft2022?: boolean,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([]);\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({}, data);\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static closePositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    ownerPosition,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n    };\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ClosePositionExtInfo[\"address\"]> {\r\n    const programId = new PublicKey(poolInfo.programId);\r\n    // const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    ins.push(\r\n      this.closePositionInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        ownerPosition.nftMint,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        nft2022,\r\n      ),\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        positionNftAccount,\r\n        personalPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmClosePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        optionBaseFlag: 0,\r\n        baseFlag: false,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const ins = this.increasePositionFromLiquidityInstruction(\r\n      programId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(programId, id).publicKey\r\n        : undefined,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPoolPersonalPosition;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [\r\n        this.increasePositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          positionNftAccount,\r\n          personalPosition,\r\n          id,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        ),\r\n      ],\r\n      signers: [],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[],\r\n\r\n    liquidity: BN,\r\n    amountMinA: BN,\r\n    amountMinB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"liquidity\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMinA,\r\n        amountMinB,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMinA,\r\n    amountMinB,\r\n    programId,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n      rewardAccounts: PublicKey[];\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMinA: BN;\r\n    amountMinB: BN;\r\n    programId?: PublicKey;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [poolProgramId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, id, tickArrayUpperStartIndex);\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, programId);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolProgramId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolInfo.rewardDefaultInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: ownerInfo.rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolInfo.rewardDefaultInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    const decreaseIns = this.decreaseLiquidityInstruction(\r\n      poolProgramId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n      rewardAccounts,\r\n\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(poolProgramId, id).publicKey\r\n        : undefined,\r\n    );\r\n    ins.push(decreaseIns);\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static swapInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    inputTokenAccount: PublicKey,\r\n    outputTokenAccount: PublicKey,\r\n    inputVault: PublicKey,\r\n    outputVault: PublicKey,\r\n    inputMint: PublicKey,\r\n    outputMint: PublicKey,\r\n    tickArray: PublicKey[],\r\n    observationId: PublicKey,\r\n\r\n    amount: BN,\r\n    otherAmountThreshold: BN,\r\n    sqrtPriceLimitX64: BN,\r\n    isBaseInput: boolean,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u64(\"amount\"),\r\n      u64(\"otherAmountThreshold\"),\r\n      u128(\"sqrtPriceLimitX64\"),\r\n      bool(\"isBaseInput\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...tickArray.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: false },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: inputVault, isSigner: false, isWritable: true },\r\n      { pubkey: outputVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: inputMint, isSigner: false, isWritable: false },\r\n      { pubkey: outputMint, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        amount,\r\n        otherAmountThreshold,\r\n        sqrtPriceLimitX64,\r\n        isBaseInput,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static makeSwapBaseInInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    inputMint: PublicKey;\r\n\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const isInputMintA = poolInfo.mintA.address === inputMint.toString();\r\n\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n\r\n        isInputMintA ? mintAVault : mintBVault,\r\n        isInputMintA ? mintBVault : mintAVault,\r\n\r\n        isInputMintA ? mintA : mintB,\r\n        isInputMintA ? mintB : mintA,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        true,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseIn],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static makeSwapBaseOutInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    outputMint: PublicKey;\r\n\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n    const isInputMintA = poolInfo.mintA.address === outputMint.toBase58();\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n\r\n        isInputMintA ? mintBVault : mintAVault,\r\n        isInputMintA ? mintAVault : mintBVault,\r\n\r\n        isInputMintA ? mintB : mintA,\r\n        isInputMintA ? mintA : mintB,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        false,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseOut],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static initRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardProgramId: PublicKey,\r\n    rewardMint: PublicKey,\r\n    rewardVault: PublicKey,\r\n\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u64(\"openTime\"), u64(\"endTime\"), u128(\"emissionsPerSecondX64\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: rewardProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n        emissionsPerSecondX64,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static initRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      programId: PublicKey;\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions<InitRewardExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const poolRewardVault = getPdaPoolRewardVaulId(programId, id, rewardInfo.mint).publicKey;\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n    const ins = [\r\n      this.initRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardInfo.programId,\r\n        rewardInfo.mint,\r\n        poolRewardVault,\r\n\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { poolRewardVault, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmInitReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static setRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\"), u128(\"emissionsPerSecondX64\"), u64(\"openTime\"), u64(\"endTime\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: true },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n        emissionsPerSecondX64,\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static setRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    let rewardMint: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardInfo.mint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n        rewardMint = new PublicKey(poolKeys.rewardInfos[index].mint.address);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n\r\n    const ins = [\r\n      this.setRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint!,\r\n\r\n        rewardIndex!,\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault!, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSetReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static collectRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static collectRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardMint,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardMint: PublicKey;\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardMint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const ins = [\r\n      this.collectRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint,\r\n\r\n        rewardIndex!,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault! },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmCollectReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static async makeLockPositions({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    payer,\r\n    wallet,\r\n    nftMint,\r\n    nft2022,\r\n    getEphemeralSigners,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    wallet: PublicKey;\r\n    payer: PublicKey;\r\n    nftMint: PublicKey;\r\n    nft2022?: boolean;\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<ReturnTypeMakeInstructions<ClmmLockAddress>> {\r\n    const signers: Signer[] = [];\r\n    let lockNftMint: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      lockNftMint = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      lockNftMint = _k.publicKey;\r\n    }\r\n\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(wallet, nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(wallet, nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, nftMint);\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(wallet, lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const metadataAccount = getPdaMetadataKey(lockNftMint).publicKey;\r\n\r\n    const ins = ClmmInstrument.lockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      payer,\r\n      positionOwner: wallet,\r\n      lockOwner: wallet,\r\n      positionNftAccount,\r\n      positionId,\r\n      lockPositionId,\r\n      lockNftMint,\r\n      lockNftAccount,\r\n      metadataAccount,\r\n      withMetadata: true,\r\n      nft2022,\r\n\r\n      positionNftMint: nftMint,\r\n      authPositionNftAccount: getATAAddress(authProgramId, nftMint, nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID)\r\n        .publicKey,\r\n      positionNftProgram: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n    });\r\n\r\n    return {\r\n      address: {\r\n        positionId,\r\n        lockPositionId,\r\n        lockNftAccount,\r\n        lockNftMint,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmLockPosition],\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static lockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    payer,\r\n    positionOwner,\r\n    lockOwner,\r\n    positionNftAccount,\r\n    positionId,\r\n    positionNftMint,\r\n    authPositionNftAccount,\r\n    positionNftProgram,\r\n    lockPositionId,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    metadataAccount,\r\n    withMetadata,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    payer: PublicKey;\r\n    positionOwner: PublicKey;\r\n    lockOwner: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    positionNftMint: PublicKey;\r\n    authPositionNftAccount: PublicKey;\r\n    positionNftProgram: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    metadataAccount: PublicKey;\r\n    withMetadata: boolean;\r\n    nft2022?: boolean;\r\n  }): TransactionInstruction {\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionOwner, isSigner: true, isWritable: true },\r\n      { pubkey: lockOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: authPositionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: true },\r\n      { pubkey: lockNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftProgram, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    const dataLayout = struct([bool(\"withMetadata\")]);\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        withMetadata,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...lockInsDataBuf, ...data]);\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static lockPositionInstruction({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    owner,\r\n    positionNft,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    owner: PublicKey;\r\n    positionNft: PublicKey;\r\n  }): TransactionInstruction {\r\n    const { publicKey: nftAccount } = getATAAddress(owner, positionNft, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, positionNft);\r\n\r\n    const keys = [\r\n      { pubkey: authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(programId, positionId).publicKey, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstruction(props: {\r\n    poolKeys: ClmmKeys;\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    ownerPosition: ClmmPositionLayout;\r\n    owner: PublicKey;\r\n    ownerRewardAccounts: PublicKey[];\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n  }): TransactionInstruction {\r\n    const [poolProgramId, poolId] = [new PublicKey(props.poolKeys.programId), new PublicKey(props.poolKeys.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickLower,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickUpper,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayUpperStartIndex);\r\n    const { publicKey: nftAccount } = getATAAddress(props.owner, props.ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, props.ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      poolId,\r\n      props.ownerPosition.tickLower,\r\n      props.ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n\r\n    for (let i = 0; i < props.poolKeys.rewardInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(props.poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: props.ownerRewardAccounts[i],\r\n        rewardMint: new PublicKey(props.poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const remainingAccounts = [\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: props.authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(props.programId, positionId).publicKey, isSigner: false, isWritable: false },\r\n      { pubkey: poolProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: props.owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.A), isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.B), isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintA.address), isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintB.address), isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId: props.programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    lockPositionId,\r\n    clmmProgram,\r\n    lockOwner,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    positionNftAccount,\r\n    positionId,\r\n    poolId,\r\n    protocolPosition,\r\n    vaultA,\r\n    vaultB,\r\n    tickArrayLower,\r\n    tickArrayUpper,\r\n    userVaultA,\r\n    userVaultB,\r\n    mintA,\r\n    mintB,\r\n    rewardAccounts,\r\n    exTickArrayBitmap,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    clmmProgram: PublicKey;\r\n    lockOwner: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    poolId: PublicKey;\r\n    protocolPosition: PublicKey;\r\n    vaultA: PublicKey;\r\n    vaultB: PublicKey;\r\n    tickArrayLower: PublicKey;\r\n    tickArrayUpper: PublicKey;\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n    mintA: PublicKey;\r\n    mintB: PublicKey;\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[];\r\n\r\n    exTickArrayBitmap?: PublicKey;\r\n  }): TransactionInstruction {\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: lockOwner, isSigner: true, isWritable: false },\r\n      // { pubkey: lockNftMint, isSigner: false, isWritable: false },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: false },\r\n      { pubkey: clmmProgram, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: vaultA, isSigner: false, isWritable: true },\r\n      { pubkey: vaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { ClmmPoolInfo, TickArrayBitmapExtensionType } from \"../type\";\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { SqrtPriceMath, TickMath } from \"./math\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport const TICK_ARRAY_SIZE = 60;\r\nexport const TICK_ARRAY_BITMAP_SIZE = 512;\r\n\r\nexport interface ReturnTypeGetTickPrice {\r\n  tick: number;\r\n  price: Decimal;\r\n  tickSqrtPriceX64: BN;\r\n}\r\n\r\nexport interface ReturnTypeGetPriceAndTick {\r\n  tick: number;\r\n  price: Decimal;\r\n}\r\n\r\nexport type Tick = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  rewardGrowthsOutsideX64: BN[];\r\n};\r\n\r\nexport type TickArray = {\r\n  address: PublicKey;\r\n  poolId: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: Tick[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport type TickState = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  tickCumulativeOutside: BN;\r\n  secondsPerLiquidityOutsideX64: BN;\r\n  secondsOutside: number;\r\n  rewardGrowthsOutside: BN[];\r\n};\r\n\r\nexport type TickArrayState = {\r\n  ammPool: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: TickState[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport class TickUtils {\r\n  public static getTickArrayAddressByTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n  ): PublicKey {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return tickArrayAddress;\r\n  }\r\n\r\n  public static getTickOffsetInArray(tickIndex: number, tickSpacing: number): number {\r\n    if (tickIndex % tickSpacing != 0) {\r\n      throw new Error(\"tickIndex % tickSpacing not equal 0\");\r\n    }\r\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing);\r\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\r\n      throw new Error(\"tick offset in array overflow\");\r\n    }\r\n    return offsetInArray;\r\n  }\r\n\r\n  public static getTickArrayBitIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = TickQuery.tickCount(tickSpacing);\r\n\r\n    let startIndex: number = tickIndex / ticksInArray;\r\n    if (tickIndex < 0 && tickIndex % ticksInArray != 0) {\r\n      startIndex = Math.ceil(startIndex) - 1;\r\n    } else {\r\n      startIndex = Math.floor(startIndex);\r\n    }\r\n    return startIndex;\r\n  }\r\n\r\n  public static getTickArrayStartIndexByTick(tickIndex: number, tickSpacing: number): number {\r\n    return this.getTickArrayBitIndex(tickIndex, tickSpacing) * TickQuery.tickCount(tickSpacing);\r\n  }\r\n\r\n  public static getTickArrayOffsetInBitmapByTick(tick: number, tickSpacing: number): number {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    return Math.abs(compressed);\r\n  }\r\n\r\n  public static checkTickArrayIsInitialized(\r\n    bitmap: BN,\r\n    tick: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    isInitialized: boolean;\r\n    startIndex: number;\r\n  } {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    const bitPos = Math.abs(compressed);\r\n    return {\r\n      isInitialized: bitmap.testn(bitPos),\r\n      startIndex: (bitPos - 512) * multiplier,\r\n    };\r\n  }\r\n\r\n  public static getNextTickArrayStartIndex(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): number {\r\n    return zeroForOne\r\n      ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE\r\n      : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE;\r\n  }\r\n\r\n  public static mergeTickArrayBitmap(bns: BN[]): BN {\r\n    let b = new BN(0);\r\n    for (let i = 0; i < bns.length; i++) {\r\n      b = b.add(bns[i].shln(64 * i));\r\n    }\r\n    return b;\r\n  }\r\n\r\n  public static getInitializedTickArrayInRange(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n    tickArrayStartIndex: number,\r\n    expectedCount: number,\r\n  ): number[] {\r\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE));\r\n    return [\r\n      // find right of currenct offset\r\n      ...TickUtils.searchLowBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset - 1,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n\r\n      // find left of current offset\r\n      ...TickUtils.searchHightBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public static getAllInitializedTickArrayStartIndex(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    // find from offset 0 to 1024\r\n    return TickUtils.searchHightBitFromStart(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      -7680,\r\n      TICK_ARRAY_BITMAP_SIZE,\r\n      tickSpacing,\r\n    );\r\n  }\r\n\r\n  public static getAllInitializedTickArrayInfo(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n  ): {\r\n    tickArrayStartIndex: number;\r\n    tickArrayAddress: PublicKey;\r\n  }[] {\r\n    const result: {\r\n      tickArrayStartIndex: number;\r\n      tickArrayAddress: PublicKey;\r\n    }[] = [];\r\n    const allInitializedTickArrayIndex: number[] = TickUtils.getAllInitializedTickArrayStartIndex(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n    );\r\n    for (const startIndex of allInitializedTickArrayIndex) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n      result.push({\r\n        tickArrayStartIndex: startIndex,\r\n        tickArrayAddress: address,\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static getAllInitializedTickInTickArray(tickArray: TickArrayState): TickState[] {\r\n    return tickArray.ticks.filter((i) => i.liquidityGross.gtn(0));\r\n  }\r\n\r\n  public static searchLowBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex >= -7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex--;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static searchHightBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex < 7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex++;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static checkIsOutOfBoundary(tick: number): boolean {\r\n    return tick < MIN_TICK || tick > MAX_TICK;\r\n  }\r\n\r\n  public static nextInitTick(\r\n    tickArrayCurrent: TickArray,\r\n    currentTickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    t: boolean,\r\n  ): Tick | null {\r\n    const currentTickArrayStartIndex = TickQuery.getArrayStartIndex(currentTickIndex, tickSpacing);\r\n    if (currentTickArrayStartIndex != tickArrayCurrent.startTickIndex) {\r\n      return null;\r\n    }\r\n    let offsetInArray = Math.floor((currentTickIndex - tickArrayCurrent.startTickIndex) / tickSpacing);\r\n\r\n    if (zeroForOne) {\r\n      while (offsetInArray >= 0) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray - 1;\r\n      }\r\n    } else {\r\n      if (!t) offsetInArray = offsetInArray + 1;\r\n      while (offsetInArray < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray + 1;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static firstInitializedTick(tickArrayCurrent: TickArray, zeroForOne: boolean): Tick {\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n\r\n    throw Error(`firstInitializedTick check error: ${tickArrayCurrent} - ${zeroForOne}`);\r\n  }\r\n\r\n  public static _getTickPriceLegacy({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static _getPriceAndTickLegacy({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.ammConfig.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n\r\n  public static getTickPrice({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static getPriceAndTick({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.config.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nexport const ZERO = new BN(0);\r\nexport const ONE = new BN(1);\r\nexport const NEGATIVE_ONE = new BN(-1);\r\n\r\nexport const Q64 = new BN(1).shln(64);\r\nexport const Q128 = new BN(1).shln(128);\r\n\r\nexport const MaxU64 = Q64.sub(ONE);\r\n\r\nexport const U64Resolution = 64;\r\n\r\nexport const MaxUint128 = Q128.subn(1);\r\n\r\nexport const MIN_TICK = -443636;\r\nexport const MAX_TICK = -MIN_TICK;\r\n\r\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"4295048016\");\r\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"79226673521066979257578248091\");\r\n\r\nexport const MIN_SQRT_PRICE_X64_ADD_ONE: BN = new BN(\"4295048017\");\r\nexport const MAX_SQRT_PRICE_X64_SUB_ONE: BN = new BN(\"79226673521066979257578248090\");\r\n\r\n// export const MIN_TICK_ARRAY_START_INDEX = -307200;\r\n// export const MAX_TICK_ARRAY_START_INDEX = 306600;\r\n\r\nexport const BIT_PRECISION = 16;\r\nexport const LOG_B_2_X32 = \"59543866431248\";\r\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\r\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\r\n\r\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\r\n\r\nexport enum Fee {\r\n  rate_500 = 500, //  500 / 10e6 = 0.0005\r\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\r\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\r\n}\r\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\r\n  [Fee.rate_500]: 10,\r\n  [Fee.rate_3000]: 60,\r\n  [Fee.rate_10000]: 200,\r\n};\r\n\r\nexport const mockCreatePoolInfo = {\r\n  version: 6,\r\n  liquidity: ZERO,\r\n  tickCurrent: 0,\r\n  feeGrowthGlobalX64A: ZERO,\r\n  feeGrowthGlobalX64B: ZERO,\r\n  protocolFeesTokenA: ZERO,\r\n  protocolFeesTokenB: ZERO,\r\n  swapInAmountTokenA: ZERO,\r\n  swapOutAmountTokenB: ZERO,\r\n  swapInAmountTokenB: ZERO,\r\n  swapOutAmountTokenA: ZERO,\r\n  tickArrayBitmap: [],\r\n\r\n  rewardInfos: [],\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  tvl: 0,\r\n};\r\n\r\nexport const mockV3CreatePoolInfo = {\r\n  tvl: 0,\r\n  volumeQuote: 0,\r\n  mintAmountA: 0,\r\n  mintAmountB: 0,\r\n  rewardDefaultInfos: [],\r\n  farmUpcomingCount: 0,\r\n  farmOngoingCount: 0,\r\n  farmFinishedCount: 0,\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  pooltype: [],\r\n};\r\n\r\nexport const U64_IGNORE_RANGE = new BN(\"18446744073700000000\");\r\n","import { EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common/transfer\";\r\nimport { ReturnTypeGetLiquidityAmountOut, TickArrayBitmapExtensionType } from \"../type\";\r\nimport {\r\n  BIT_PRECISION,\r\n  Fee,\r\n  FEE_RATE_DENOMINATOR,\r\n  LOG_B_2_X32,\r\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\r\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\r\n  MAX_SQRT_PRICE_X64,\r\n  MAX_TICK,\r\n  MaxU64,\r\n  MaxUint128,\r\n  MIN_SQRT_PRICE_X64,\r\n  MIN_TICK,\r\n  NEGATIVE_ONE,\r\n  ONE,\r\n  Q128,\r\n  Q64,\r\n  U64Resolution,\r\n  ZERO,\r\n} from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { PoolUtils } from \"./pool\";\r\nimport { Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class MathUtil {\r\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\r\n    const numerator = a.mul(b);\r\n    let result = numerator.div(denominator);\r\n    if (!numerator.mod(denominator).eq(ZERO)) {\r\n      result = result.add(ONE);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    return a.mul(b).div(denominator);\r\n  }\r\n\r\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    const numerator = a.mul(b).add(denominator.sub(ONE));\r\n    return numerator.div(denominator);\r\n  }\r\n\r\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\r\n    return new Decimal(num.toString()).div(Decimal.pow(2, 64)).toDecimalPlaces(decimalPlaces);\r\n  }\r\n\r\n  public static decimalToX64(num: Decimal): BN {\r\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\r\n  }\r\n\r\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\r\n    return n0.add(Q128).sub(n1).mod(Q128);\r\n  }\r\n}\r\n\r\n// sqrt price math\r\nfunction mulRightShift(val: BN, mulBy: BN): BN {\r\n  return signedRightShift(val.mul(mulBy), 64, 256);\r\n}\r\n\r\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\r\n  twosN0.imaskn(bitWidth + 1);\r\n  return twosN0.fromTwos(bitWidth);\r\n}\r\n\r\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\r\n  twoN0.imaskn(bitWidth - shiftBy + 1);\r\n  return twoN0.fromTwos(bitWidth - shiftBy);\r\n}\r\n\r\nexport class SqrtPriceMath {\r\n  public static sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\r\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\r\n      .pow(2)\r\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\r\n  }\r\n\r\n  public static priceToSqrtPriceX64(price: Decimal, decimalsA: number, decimalsB: number): BN {\r\n    return MathUtil.decimalToX64(price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt());\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromInput(sqrtPriceX64: BN, liquidity: BN, amountIn: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountIn, true)\r\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountIn, true);\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromOutput(sqrtPriceX64: BN, liquidity: BN, amountOut: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountOut, false)\r\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountOut, false);\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    if (amount.eq(ZERO)) return sqrtPriceX64;\r\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\r\n\r\n    if (add) {\r\n      const numerator1 = liquidityLeftShift;\r\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\r\n      if (denominator.gte(numerator1)) {\r\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\r\n      }\r\n      return MathUtil.mulDivRoundingUp(numerator1, ONE, numerator1.div(sqrtPriceX64).add(amount));\r\n    } else {\r\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\r\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\");\r\n      }\r\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\r\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\r\n    }\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    const deltaY = amount.shln(U64Resolution);\r\n    if (add) {\r\n      return sqrtPriceX64.add(deltaY.div(liquidity));\r\n    } else {\r\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(deltaY, ONE, liquidity);\r\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\");\r\n      }\r\n      return sqrtPriceX64.sub(amountDivLiquidity);\r\n    }\r\n  }\r\n\r\n  public static getSqrtPriceX64FromTick(tick: number): BN {\r\n    if (!Number.isInteger(tick)) {\r\n      throw new Error(\"tick must be integer\");\r\n    }\r\n    if (tick < MIN_TICK || tick > MAX_TICK) {\r\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\r\n    }\r\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\r\n\r\n    let ratio: BN = (tickAbs & 0x1) != 0 ? new BN(\"18445821805675395072\") : new BN(\"18446744073709551616\");\r\n    if ((tickAbs & 0x2) != 0) ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\r\n    if ((tickAbs & 0x4) != 0) ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\r\n    if ((tickAbs & 0x8) != 0) ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\r\n    if ((tickAbs & 0x10) != 0) ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\r\n    if ((tickAbs & 0x20) != 0) ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\r\n    if ((tickAbs & 0x40) != 0) ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\r\n    if ((tickAbs & 0x80) != 0) ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\r\n    if ((tickAbs & 0x100) != 0) ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\r\n    if ((tickAbs & 0x200) != 0) ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\r\n    if ((tickAbs & 0x400) != 0) ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\r\n    if ((tickAbs & 0x800) != 0) ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\r\n    if ((tickAbs & 0x1000) != 0) ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\r\n    if ((tickAbs & 0x2000) != 0) ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\r\n    if ((tickAbs & 0x4000) != 0) ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\r\n    if ((tickAbs & 0x8000) != 0) ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\r\n    if ((tickAbs & 0x10000) != 0) ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\r\n    if ((tickAbs & 0x20000) != 0) ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\r\n    if ((tickAbs & 0x40000) != 0) ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\r\n\r\n    if (tick > 0) ratio = MaxUint128.div(ratio);\r\n    return ratio;\r\n  }\r\n\r\n  public static getTickFromPrice(price: Decimal, decimalsA: number, decimalsB: number): number {\r\n    return SqrtPriceMath.getTickFromSqrtPriceX64(SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB));\r\n  }\r\n\r\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\r\n    if (sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) || sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)) {\r\n      throw new Error(\"Provided sqrtPrice is not within the supported sqrtPrice range.\");\r\n    }\r\n\r\n    const msb = sqrtPriceX64.bitLength() - 1;\r\n    const adjustedMsb = new BN(msb - 64);\r\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\r\n\r\n    let bit = new BN(\"8000000000000000\", \"hex\");\r\n    let precision = 0;\r\n    let log2pFractionX64 = new BN(0);\r\n\r\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\r\n\r\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\r\n      r = r.mul(r);\r\n      const rMoreThanTwo = r.shrn(127);\r\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\r\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\r\n      bit = bit.shrn(1);\r\n      precision += 1;\r\n    }\r\n\r\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\r\n\r\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\r\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\r\n\r\n    const tickLow = signedRightShift(logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)), 64, 128).toNumber();\r\n    const tickHigh = signedRightShift(logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)), 64, 128).toNumber();\r\n\r\n    if (tickLow == tickHigh) {\r\n      return tickLow;\r\n    } else {\r\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh);\r\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow;\r\n    }\r\n  }\r\n}\r\n\r\n// tick math\r\nexport class TickMath {\r\n  public static getTickWithPriceAndTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): number {\r\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\r\n      SqrtPriceMath.priceToSqrtPriceX64(price, mintDecimalsA, mintDecimalsB),\r\n    );\r\n    let result = tick / tickSpacing;\r\n    if (result < 0) {\r\n      result = Math.floor(result);\r\n    } else {\r\n      result = Math.ceil(result);\r\n    }\r\n    return result * tickSpacing;\r\n  }\r\n\r\n  public static roundPriceWithTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): Decimal {\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(price, tickSpacing, mintDecimalsA, mintDecimalsB);\r\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    return SqrtPriceMath.sqrtPriceX64ToPrice(sqrtPriceX64, mintDecimalsA, mintDecimalsB);\r\n  }\r\n}\r\n\r\nexport class LiquidityMath {\r\n  public static addDelta(x: BN, y: BN): BN {\r\n    return x.add(y);\r\n  }\r\n\r\n  public static getTokenAmountAFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    const numerator1 = liquidity.ushln(U64Resolution);\r\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivRoundingUp(MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B), ONE, sqrtPriceX64A)\r\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(sqrtPriceX64A);\r\n  }\r\n\r\n  public static getTokenAmountBFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\r\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountA(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountA: BN, roundUp: boolean): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\r\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n    const result = numerator.div(denominator);\r\n\r\n    if (roundUp) {\r\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\r\n    } else {\r\n      return result.shrn(U64Resolution);\r\n    }\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountB(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountB: BN): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    return MathUtil.mulDivFloor(amountB, MaxU64, sqrtPriceX64B.sub(sqrtPriceX64A));\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmounts(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    amountA: BN,\r\n    amountB: BN,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, amountA, false);\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceCurrentX64, sqrtPriceX64B, amountA, false);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceCurrentX64, amountB);\r\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\r\n    } else {\r\n      return LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, amountB);\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidity(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): { amountA: BN; amountB: BN } {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return {\r\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n        amountB: new BN(0),\r\n      };\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\r\n        sqrtPriceCurrentX64,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\r\n        sqrtPriceX64A,\r\n        sqrtPriceCurrentX64,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      return { amountA, amountB };\r\n    } else {\r\n      return {\r\n        amountA: new BN(0),\r\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n      };\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidityWithSlippage(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    amountMax: boolean,\r\n    roundUp: boolean,\r\n    amountSlippage: number,\r\n  ): { amountSlippageA: BN; amountSlippageB: BN } {\r\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n      sqrtPriceCurrentX64,\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      roundUp,\r\n    );\r\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\r\n\r\n    const amount0Slippage = new BN(new Decimal(amountA.toString()).mul(coefficient).toFixed(0));\r\n    const amount1Slippage = new BN(new Decimal(amountB.toString()).mul(coefficient).toFixed(0));\r\n    return {\r\n      amountSlippageA: amount0Slippage,\r\n      amountSlippageB: amount1Slippage,\r\n    };\r\n  }\r\n\r\n  public static getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n\r\n    epochInfo: EpochInfo;\r\n    amountAddFee: boolean;\r\n  }): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, amountAddFee),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, amountAddFee),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n\r\n// swap math\r\n\r\ntype SwapStep = {\r\n  sqrtPriceX64Next: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n};\r\n\r\nexport interface StepComputations {\r\n  sqrtPriceStartX64: BN;\r\n  tickNext: number;\r\n  initialized: boolean;\r\n  sqrtPriceNextX64: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n}\r\n\r\nexport abstract class SwapMath {\r\n  public static swapCompute(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickArrayBitmap: BN[],\r\n    tickarrayBitmapExtension: TickArrayBitmapExtensionType,\r\n    zeroForOne: boolean,\r\n    fee: number,\r\n    liquidity: BN,\r\n    currentTick: number,\r\n    tickSpacing: number,\r\n    currentSqrtPriceX64: BN,\r\n    amountSpecified: BN,\r\n    lastSavedTickArrayStartIndex: number,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    amountSpecifiedRemaining: BN;\r\n    amountCalculated: BN;\r\n    feeAmount: BN;\r\n    sqrtPriceX64: BN;\r\n    liquidity: BN;\r\n    tickCurrent: number;\r\n    accounts: PublicKey[];\r\n  } {\r\n    if (amountSpecified.eq(ZERO)) {\r\n      throw new Error(\"amountSpecified must not be 0\");\r\n    }\r\n    if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n    if (zeroForOne) {\r\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n      }\r\n    } else {\r\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than current\");\r\n      }\r\n    }\r\n    const baseInput = amountSpecified.gt(ZERO);\r\n\r\n    const state = {\r\n      amountSpecifiedRemaining: amountSpecified,\r\n      amountCalculated: ZERO,\r\n      sqrtPriceX64: currentSqrtPriceX64,\r\n      tick:\r\n        currentTick > lastSavedTickArrayStartIndex\r\n          ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n          : lastSavedTickArrayStartIndex,\r\n      accounts: [] as PublicKey[],\r\n      liquidity,\r\n      feeAmount: new BN(0),\r\n    };\r\n    let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n    let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n    let loopCount = 0;\r\n    let t = !zeroForOne && tickArrayCurrent.startTickIndex === state.tick;\r\n    while (\r\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n      !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n      // state.tick < MAX_TICK &&\r\n      // state.tick > MIN_TICK\r\n    ) {\r\n      if (loopCount > 10) {\r\n        // throw Error('liquidity limit')\r\n      }\r\n      const step: Partial<StepComputations> = {};\r\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n      const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne, t);\r\n\r\n      let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n      let tickArrayAddress: null | PublicKey = null;\r\n\r\n      if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n        const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n          {\r\n            tickCurrent: state.tick,\r\n            tickSpacing,\r\n            tickArrayBitmap,\r\n            exBitmapInfo: tickarrayBitmapExtension,\r\n          },\r\n          tickAarrayStartIndex,\r\n          zeroForOne,\r\n        );\r\n        if (!nextInitTickArrayIndex.isExist) {\r\n          if (catchLiquidityInsufficient) {\r\n            return {\r\n              allTrade: false,\r\n              amountSpecifiedRemaining: state.amountSpecifiedRemaining,\r\n              amountCalculated: state.amountCalculated,\r\n              feeAmount: state.feeAmount,\r\n              sqrtPriceX64: state.sqrtPriceX64,\r\n              liquidity: state.liquidity,\r\n              tickCurrent: state.tick,\r\n              accounts: state.accounts,\r\n            };\r\n          }\r\n          throw Error(\"swapCompute LiquidityInsufficient\");\r\n        }\r\n        tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n        const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n          programId,\r\n          poolId,\r\n          tickAarrayStartIndex,\r\n        );\r\n        tickArrayAddress = expectedNextTickArrayAddress;\r\n        tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n        try {\r\n          nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n        } catch (e) {\r\n          throw Error(\"not found next tick info\");\r\n        }\r\n      }\r\n\r\n      step.tickNext = nextInitTick.tick;\r\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n      if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n        state.accounts.push(tickArrayAddress);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n      if (step.tickNext < MIN_TICK) {\r\n        step.tickNext = MIN_TICK;\r\n      } else if (step.tickNext > MAX_TICK) {\r\n        step.tickNext = MAX_TICK;\r\n      }\r\n\r\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n      let targetPrice: BN;\r\n      if (\r\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n      ) {\r\n        targetPrice = sqrtPriceLimitX64;\r\n      } else {\r\n        targetPrice = step.sqrtPriceNextX64;\r\n      }\r\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n        state.sqrtPriceX64,\r\n        targetPrice,\r\n        state.liquidity,\r\n        state.amountSpecifiedRemaining,\r\n        fee,\r\n        zeroForOne,\r\n      );\r\n\r\n      state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n      if (baseInput) {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n      } else {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n        state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n      }\r\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n        if (step.initialized) {\r\n          let liquidityNet = nextInitTick.liquidityNet;\r\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n        }\r\n\r\n        t = step.tickNext != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === step.tickNext;\r\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext; //\r\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n        const _T = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n        t = _T != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === _T;\r\n        state.tick = _T;\r\n      }\r\n      ++loopCount;\r\n    }\r\n\r\n    try {\r\n      const { nextStartIndex: tickAarrayStartIndex, isExist } = TickQuery.nextInitializedTickArray(\r\n        state.tick,\r\n        tickSpacing,\r\n        zeroForOne,\r\n        tickArrayBitmap,\r\n        tickarrayBitmapExtension,\r\n      );\r\n      if (isExist && lastSavedTickArrayStartIndex !== tickAarrayStartIndex) {\r\n        state.accounts.push(getPdaTickArrayAddress(programId, poolId, tickAarrayStartIndex).publicKey);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    return {\r\n      allTrade: true,\r\n      amountSpecifiedRemaining: ZERO,\r\n      amountCalculated: state.amountCalculated,\r\n      feeAmount: state.feeAmount,\r\n      sqrtPriceX64: state.sqrtPriceX64,\r\n      liquidity: state.liquidity,\r\n      tickCurrent: state.tick,\r\n      accounts: state.accounts,\r\n    };\r\n  }\r\n  // public static swapCompute(\r\n  //   programId: PublicKey,\r\n  //   poolId: PublicKey,\r\n  //   tickArrayCache: { [key: string]: TickArray },\r\n  //   tickArrayBitmap: BN[],\r\n  //   tickarrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  //   zeroForOne: boolean,\r\n  //   fee: number,\r\n  //   liquidity: BN,\r\n  //   currentTick: number,\r\n  //   tickSpacing: number,\r\n  //   currentSqrtPriceX64: BN,\r\n  //   amountSpecified: BN,\r\n  //   lastSavedTickArrayStartIndex: number,\r\n  //   sqrtPriceLimitX64?: BN,\r\n  // ): {\r\n  //   amountCalculated: BN;\r\n  //   feeAmount: BN;\r\n  //   sqrtPriceX64: BN;\r\n  //   liquidity: BN;\r\n  //   tickCurrent: number;\r\n  //   accounts: PublicKey[];\r\n  // } {\r\n  //   if (amountSpecified.eq(ZERO)) {\r\n  //     throw new Error(\"amountSpecified must not be 0\");\r\n  //   }\r\n  //   if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n  //   if (zeroForOne) {\r\n  //     if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n  //     }\r\n  //   } else {\r\n  //     if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than current\");\r\n  //     }\r\n  //   }\r\n  //   const baseInput = amountSpecified.gt(ZERO);\r\n\r\n  //   const state = {\r\n  //     amountSpecifiedRemaining: amountSpecified,\r\n  //     amountCalculated: ZERO,\r\n  //     sqrtPriceX64: currentSqrtPriceX64,\r\n  //     tick:\r\n  //       currentTick > lastSavedTickArrayStartIndex\r\n  //         ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n  //         : lastSavedTickArrayStartIndex,\r\n  //     accounts: [] as PublicKey[],\r\n  //     liquidity,\r\n  //     feeAmount: new BN(0),\r\n  //   };\r\n  //   let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n  //   let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n  //   let loopCount = 0;\r\n  //   while (\r\n  //     !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n  //     !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n  //     // state.tick < MAX_TICK &&\r\n  //     // state.tick > MIN_TICK\r\n  //   ) {\r\n  //     if (loopCount > 10) {\r\n  //       throw Error(\"liquidity limit\");\r\n  //     }\r\n  //     const step: Partial<StepComputations> = {};\r\n  //     step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n  //     const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne);\r\n\r\n  //     let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n  //     let tickArrayAddress: PublicKey | null = null;\r\n\r\n  //     if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n  //       const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n  //         {\r\n  //           tickCurrent: state.tick,\r\n  //           tickSpacing,\r\n  //           tickArrayBitmap,\r\n  //           exBitmapInfo: tickarrayBitmapExtension,\r\n  //         },\r\n  //         tickAarrayStartIndex,\r\n  //         zeroForOne,\r\n  //       );\r\n  //       if (!nextInitTickArrayIndex.isExist) {\r\n  //         throw Error(\"swapCompute LiquidityInsufficient\");\r\n  //       }\r\n  //       tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n  //       const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n  //         programId,\r\n  //         poolId,\r\n  //         tickAarrayStartIndex,\r\n  //       );\r\n  //       tickArrayAddress = expectedNextTickArrayAddress;\r\n  //       tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n  //       nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n  //     }\r\n\r\n  //     step.tickNext = nextInitTick.tick;\r\n  //     step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n  //     if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n  //       state.accounts.push(tickArrayAddress);\r\n  //       lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //     }\r\n  //     if (step.tickNext < MIN_TICK) {\r\n  //       step.tickNext = MIN_TICK;\r\n  //     } else if (step.tickNext > MAX_TICK) {\r\n  //       step.tickNext = MAX_TICK;\r\n  //     }\r\n\r\n  //     step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n  //     let targetPrice: BN;\r\n  //     if (\r\n  //       (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n  //       (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n  //     ) {\r\n  //       targetPrice = sqrtPriceLimitX64;\r\n  //     } else {\r\n  //       targetPrice = step.sqrtPriceNextX64;\r\n  //     }\r\n  //     [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n  //       state.sqrtPriceX64,\r\n  //       targetPrice,\r\n  //       state.liquidity,\r\n  //       state.amountSpecifiedRemaining,\r\n  //       fee,\r\n  //     );\r\n\r\n  //     state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n  //     if (baseInput) {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n  //       state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n  //     } else {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n  //       state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n  //     }\r\n  //     if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n  //       if (step.initialized) {\r\n  //         let liquidityNet = nextInitTick.liquidityNet;\r\n  //         if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n  //         state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n  //       }\r\n  //       state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\r\n  //     } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n  //       state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n  //     }\r\n  //     ++loopCount;\r\n  //   }\r\n\r\n  //   // try {\r\n  //   //   console.log('state.tick', state.tick)\r\n  //   //   const { nextStartIndex: tickAarrayStartIndex } = TickQuery.nextInitializedTickArray(\r\n  //   //     state.tick,\r\n  //   //     tickSpacing,\r\n  //   //     zeroForOne,\r\n  //   //     tickArrayBitmap,\r\n  //   //     tickarrayBitmapExtension,\r\n  //   //   );\r\n  //   //   if (\r\n  //   //     lastSavedTickArrayStartIndex !== tickAarrayStartIndex\r\n  //   //   ) {\r\n  //   //     state.accounts.push(getPdaTickArrayAddress(\r\n  //   //       programId,\r\n  //   //       poolId,\r\n  //   //       tickAarrayStartIndex,\r\n  //   //     ).publicKey)\r\n  //   //     lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //   //   }\r\n  //   // } catch (e) { /* empty */ }\r\n\r\n  //   return {\r\n  //     amountCalculated: state.amountCalculated,\r\n  //     feeAmount: state.feeAmount,\r\n  //     sqrtPriceX64: state.sqrtPriceX64,\r\n  //     liquidity: state.liquidity,\r\n  //     tickCurrent: state.tick,\r\n  //     accounts: state.accounts,\r\n  //   };\r\n  // }\r\n\r\n  private static swapStepCompute(\r\n    sqrtPriceX64Current: BN,\r\n    sqrtPriceX64Target: BN,\r\n    liquidity: BN,\r\n    amountRemaining: BN,\r\n    feeRate: Fee,\r\n    zeroForOne: boolean,\r\n  ): [BN, BN, BN, BN] {\r\n    const swapStep: SwapStep = {\r\n      sqrtPriceX64Next: new BN(0),\r\n      amountIn: new BN(0),\r\n      amountOut: new BN(0),\r\n      feeAmount: new BN(0),\r\n    };\r\n\r\n    const baseInput = amountRemaining.gte(ZERO);\r\n\r\n    if (baseInput) {\r\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\r\n        amountRemaining,\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\r\n        FEE_RATE_DENOMINATOR,\r\n      );\r\n      swapStep.amountIn = zeroForOne\r\n        ? LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, true)\r\n        : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, true);\r\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemainingSubtractFee,\r\n          zeroForOne,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountOut = zeroForOne\r\n        ? LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, false)\r\n        : LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, false);\r\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemaining.mul(NEGATIVE_ONE),\r\n          zeroForOne,\r\n        );\r\n      }\r\n    }\r\n\r\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\r\n\r\n    if (zeroForOne) {\r\n      if (!(reachTargetPrice && baseInput)) {\r\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          true,\r\n        );\r\n      }\r\n\r\n      if (!(reachTargetPrice && !baseInput)) {\r\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          false,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountIn =\r\n        reachTargetPrice && baseInput\r\n          ? swapStep.amountIn\r\n          : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, swapStep.sqrtPriceX64Next, liquidity, true);\r\n      swapStep.amountOut =\r\n        reachTargetPrice && !baseInput\r\n          ? swapStep.amountOut\r\n          : LiquidityMath.getTokenAmountAFromLiquidity(\r\n            sqrtPriceX64Current,\r\n            swapStep.sqrtPriceX64Next,\r\n            liquidity,\r\n            false,\r\n          );\r\n    }\r\n\r\n    if (!baseInput && swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))) {\r\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\r\n    }\r\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\r\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\r\n    } else {\r\n      swapStep.feeAmount = MathUtil.mulDivCeil(\r\n        swapStep.amountIn,\r\n        new BN(feeRate),\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate)),\r\n      );\r\n    }\r\n    return [swapStep.sqrtPriceX64Next, swapStep.amountIn, swapStep.amountOut, swapStep.feeAmount];\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { findProgramAddress, METADATA_PROGRAM_ID } from \"../../../common\";\r\n\r\nimport { i32ToBytes, u16ToBytes } from \"./util\";\r\n\r\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\r\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\r\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\r\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\r\nexport const POOL_TICK_ARRAY_BITMAP_SEED = Buffer.from(\"pool_tick_array_bitmap_extension\", \"utf8\");\r\nexport const OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\r\n\r\nexport function getPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolVaultId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  vaultMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolRewardVaulId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  rewardMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaTickArrayAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  startIndex: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)], programId);\r\n}\r\n\r\nexport function getPdaProtocolPositionAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  tickLower: number,\r\n  tickUpper: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [POSITION_SEED, poolId.toBuffer(), i32ToBytes(tickLower), i32ToBytes(tickUpper)],\r\n    programId,\r\n  );\r\n}\r\n\r\nexport function getPdaPersonalPositionAddress(\r\n  programId: PublicKey,\r\n  nftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POSITION_SEED, nftMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaMetadataKey(mint: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [Buffer.from(\"metadata\", \"utf8\"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    METADATA_PROGRAM_ID,\r\n  );\r\n}\r\n\r\nexport function getPdaOperationAccount(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OPERATION_SEED], programId);\r\n}\r\n\r\nexport function getPdaExBitmapAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_TICK_ARRAY_BITMAP_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaObservationAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport const POOL_LOCK_ID_SEED = Buffer.from(\"locked_position\", \"utf8\");\r\nexport function getPdaLockPositionId(\r\n  programId: PublicKey,\r\n  positionId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, positionId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLockClPositionIdV2(\r\n  programId: PublicKey,\r\n  lockNftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, lockNftMint.toBuffer()], programId);\r\n}\r\n\r\nexport const SUPPORT_MINT_SEED = Buffer.from(\"support_mint\", \"utf8\");\r\nexport function getPdaMintExAccount(\r\n  programId: PublicKey,\r\n  mintAddress: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([SUPPORT_MINT_SEED, mintAddress.toBuffer()], programId);\r\n}\r\n","import { Connection, EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  ClmmPoolInfo,\r\n  ClmmPoolRewardInfo,\r\n  ClmmPoolRewardLayoutInfo,\r\n  ComputeClmmPoolInfo,\r\n  ReturnTypeComputeAmountOut,\r\n  ReturnTypeComputeAmountOutBaseOut,\r\n  ReturnTypeComputeAmountOutFormat,\r\n  ReturnTypeFetchExBitmaps,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  ReturnTypeGetLiquidityAmountOut,\r\n  SDKParsedConcentratedInfo,\r\n  TickArrayBitmapExtensionType,\r\n} from \"../type\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token } from \"@/api/type\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport {\r\n  getMultipleAccountsInfo,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getTransferAmountFeeV2,\r\n  minExpirationTime,\r\n  solToWSol,\r\n} from \"@/common\";\r\nimport { Percent, Price, Token, TokenAmount } from \"@/module\";\r\nimport { TokenAccountRaw } from \"@/raydium/account/types\";\r\nimport { PoolInfoLayout, PositionInfoLayout, TickArrayBitmapExtensionLayout, TickArrayLayout } from \"../layout\";\r\nimport { MAX_SQRT_PRICE_X64, MAX_TICK, MIN_SQRT_PRICE_X64, MIN_TICK, NEGATIVE_ONE, Q64, ZERO } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath, SwapMath } from \"./math\";\r\nimport { getPdaExBitmapAccount, getPdaPersonalPositionAddress, getPdaTickArrayAddress } from \"./pda\";\r\nimport { PositionUtils } from \"./position\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickArrayBitmap, TickArrayBitmapExtensionUtils } from \"./tickarrayBitmap\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class PoolUtils {\r\n  public static getOutputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    inputTokenMint: PublicKey,\r\n    inputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    expectedAmountOut: BN;\r\n    remainingAccounts: PublicKey[];\r\n    executionPrice: BN;\r\n    feeAmount: BN;\r\n  } {\r\n    const zeroForOne = inputTokenMint.toBase58() === poolInfo.mintA.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    // try {\r\n    //   const preTick = this.preInitializedTickArrayStartIndex(poolInfo, !zeroForOne)\r\n    //   if (preTick.isExist) {\r\n    //     const { publicKey: address } = getPdaTickArrayAddress(\r\n    //       poolInfo.programId,\r\n    //       poolInfo.id,\r\n    //       preTick.nextStartIndex\r\n    //     );\r\n    //     allNeededAccounts.push(address)\r\n    //   }\r\n    // } catch (e) { /* empty */ }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      allTrade,\r\n      amountCalculated: outputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      inputAmount,\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return {\r\n      allTrade,\r\n      expectedAmountOut: outputAmount.mul(NEGATIVE_ONE),\r\n      remainingAccounts: allNeededAccounts,\r\n      executionPrice,\r\n      feeAmount,\r\n    };\r\n  }\r\n\r\n  public static getInputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    outputTokenMint: PublicKey,\r\n    outputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n  ): { expectedAmountIn: BN; remainingAccounts: PublicKey[]; executionPrice: BN; feeAmount: BN } {\r\n    const zeroForOne = outputTokenMint.toBase58() === poolInfo.mintB.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    try {\r\n      const preTick = this.preInitializedTickArrayStartIndex(poolInfo, zeroForOne);\r\n      if (preTick.isExist) {\r\n        const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, preTick.nextStartIndex);\r\n        allNeededAccounts.push(address);\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      amountCalculated: inputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      outputAmount.mul(NEGATIVE_ONE),\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return { expectedAmountIn: inputAmount, remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\r\n  }\r\n\r\n  public static getFirstInitializedTickArray(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ):\r\n    | { isExist: true; startIndex: number; nextAccountMeta: PublicKey }\r\n    | { isExist: false; startIndex: undefined; nextAccountMeta: undefined } {\r\n    const { isInitialized, startIndex } = PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.tickSpacing, [\r\n      poolInfo.tickCurrent,\r\n    ])\r\n      ? TickArrayBitmapExtensionUtils.checkTickArrayIsInit(\r\n        TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n        poolInfo.tickSpacing,\r\n        poolInfo.exBitmapInfo,\r\n      )\r\n      : TickUtils.checkTickArrayIsInitialized(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        poolInfo.tickCurrent,\r\n        poolInfo.tickSpacing,\r\n      );\r\n\r\n    if (isInitialized) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, startIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(\r\n      poolInfo,\r\n      TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n      zeroForOne,\r\n    );\r\n    if (isExist) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, nextStartIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex: nextStartIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined };\r\n  }\r\n\r\n  public static preInitializedTickArrayStartIndex(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    const currentOffset = Math.floor(poolInfo.tickCurrent / TickQuery.tickCount(poolInfo.tickSpacing));\r\n\r\n    const result: number[] = !zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(\r\n        poolInfo.tickArrayBitmap,\r\n        poolInfo.exBitmapInfo,\r\n        currentOffset - 1,\r\n        1,\r\n        poolInfo.tickSpacing,\r\n      )\r\n      : TickUtils.searchHightBitFromStart(\r\n        poolInfo.tickArrayBitmap,\r\n        poolInfo.exBitmapInfo,\r\n        currentOffset + 1,\r\n        1,\r\n        poolInfo.tickSpacing,\r\n      );\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    poolInfo:\r\n      | {\r\n        tickCurrent: number;\r\n        tickSpacing: number;\r\n        tickArrayBitmap: BN[];\r\n        exBitmapInfo: TickArrayBitmapExtensionType;\r\n      }\r\n      | ClmmPoolInfo,\r\n    lastTickArrayStartIndex: number,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    lastTickArrayStartIndex = TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing);\r\n\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const { isInit: startIsInit, tickIndex: startIndex } = TickArrayBitmap.nextInitializedTickArrayStartIndex(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n      );\r\n      if (startIsInit) {\r\n        return { isExist: true, nextStartIndex: startIndex };\r\n      }\r\n      lastTickArrayStartIndex = startIndex;\r\n\r\n      const { isInit, tickIndex } = TickArrayBitmapExtensionUtils.nextInitializedTickArrayFromOneBitmap(\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n        poolInfo.exBitmapInfo,\r\n      );\r\n      if (isInit) return { isExist: true, nextStartIndex: tickIndex };\r\n\r\n      lastTickArrayStartIndex = tickIndex;\r\n\r\n      if (lastTickArrayStartIndex < MIN_TICK || lastTickArrayStartIndex > MAX_TICK)\r\n        return { isExist: false, nextStartIndex: 0 };\r\n    }\r\n\r\n    // const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\r\n    //   poolInfo.tickArrayBitmap\r\n    // );\r\n    // const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\r\n    //   poolInfo.tickCurrent,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n    // const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset - 1,\r\n    //   0,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // ) : TickUtils.searchHightBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset,\r\n    //   1024,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n\r\n    // return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\r\n  }\r\n\r\n  public static async updatePoolRewardInfos({\r\n    connection,\r\n    apiPoolInfo,\r\n    chainTime,\r\n    poolLiquidity,\r\n    rewardInfos,\r\n  }: {\r\n    connection: Connection;\r\n    apiPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n    chainTime: number;\r\n    poolLiquidity: BN;\r\n    rewardInfos: ClmmPoolRewardLayoutInfo[];\r\n  }): Promise<ClmmPoolRewardInfo[]> {\r\n    const nRewardInfo: ClmmPoolRewardInfo[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      const _itemReward = rewardInfos[i];\r\n      const apiRewardProgram =\r\n        apiPoolInfo.rewardDefaultInfos[i]?.mint.programId ??\r\n        (await connection.getAccountInfo(_itemReward.tokenMint))?.owner;\r\n      if (apiRewardProgram === undefined) throw Error(\"get new reward mint info error\");\r\n\r\n      const itemReward: ClmmPoolRewardInfo = {\r\n        ..._itemReward,\r\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\r\n        remainingRewards: undefined,\r\n        tokenProgramId: new PublicKey(apiRewardProgram),\r\n      };\r\n\r\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue;\r\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\r\n        nRewardInfo.push(itemReward);\r\n        continue;\r\n      }\r\n\r\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime));\r\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime);\r\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, poolLiquidity);\r\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64);\r\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, Q64);\r\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta);\r\n      nRewardInfo.push({\r\n        ...itemReward,\r\n        rewardGrowthGlobalX64,\r\n        rewardTotalEmissioned,\r\n        lastUpdateTime: latestUpdateTime,\r\n      });\r\n    }\r\n    return nRewardInfo;\r\n  }\r\n\r\n  public static isOverflowDefaultTickarrayBitmap(tickSpacing: number, tickarrayStartIndexs: number[]): boolean {\r\n    const { maxTickBoundary, minTickBoundary } = this.tickRange(tickSpacing);\r\n\r\n    for (const tickIndex of tickarrayStartIndexs) {\r\n      const tickarrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n\r\n      if (tickarrayStartIndex >= maxTickBoundary || tickarrayStartIndex < minTickBoundary) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public static tickRange(tickSpacing: number): {\r\n    maxTickBoundary: number;\r\n    minTickBoundary: number;\r\n  } {\r\n    let maxTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let minTickBoundary = -maxTickBoundary;\r\n\r\n    if (maxTickBoundary > MAX_TICK) {\r\n      maxTickBoundary = TickQuery.getArrayStartIndex(MAX_TICK, tickSpacing) + TickQuery.tickCount(tickSpacing);\r\n    }\r\n    if (minTickBoundary < MIN_TICK) {\r\n      minTickBoundary = TickQuery.getArrayStartIndex(MIN_TICK, tickSpacing);\r\n    }\r\n    return { maxTickBoundary, minTickBoundary };\r\n  }\r\n\r\n  public static get_tick_array_offset(tickarrayStartIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickarrayStartIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n\r\n    return (tickarrayStartIndex / TickQuery.tickCount(tickSpacing)) * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  static async fetchExBitmaps({\r\n    connection,\r\n    exBitmapAddress,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    exBitmapAddress: PublicKey[];\r\n    batchRequest: boolean;\r\n  }): Promise<ReturnTypeFetchExBitmaps> {\r\n    const fetchedBitmapAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n      connection,\r\n      exBitmapAddress.map((i) => ({ pubkey: i })),\r\n      { batchRequest },\r\n    );\r\n\r\n    const returnTypeFetchExBitmaps: ReturnTypeFetchExBitmaps = {};\r\n    for (const item of fetchedBitmapAccount) {\r\n      if (item.accountInfo === null) continue;\r\n\r\n      returnTypeFetchExBitmaps[item.pubkey.toString()] = TickArrayBitmapExtensionLayout.decode(item.accountInfo.data);\r\n    }\r\n    return returnTypeFetchExBitmaps;\r\n  }\r\n\r\n  static async fetchMultiplePoolTickArrays({\r\n    connection,\r\n    poolKeys,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    poolKeys: Omit<ComputeClmmPoolInfo, \"ammConfig\">[];\r\n    batchRequest?: boolean;\r\n  }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\r\n    const tickArraysToPoolId: { [key: string]: PublicKey } = {};\r\n    const tickArrays: { pubkey: PublicKey }[] = [];\r\n    for (const itemPoolInfo of poolKeys) {\r\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n        itemPoolInfo.tickCurrent,\r\n        itemPoolInfo.tickSpacing,\r\n      );\r\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n        itemPoolInfo.tickArrayBitmap,\r\n        itemPoolInfo.exBitmapInfo,\r\n        itemPoolInfo.tickSpacing,\r\n        currentTickArrayStartIndex,\r\n        7,\r\n      );\r\n      for (const itemIndex of startIndexArray) {\r\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\r\n          itemPoolInfo.programId,\r\n          itemPoolInfo.id,\r\n          itemIndex,\r\n        );\r\n        tickArrays.push({ pubkey: tickArrayAddress });\r\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id;\r\n      }\r\n    }\r\n\r\n    const fetchedTickArrays = await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest });\r\n\r\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {};\r\n\r\n    for (const itemAccountInfo of fetchedTickArrays) {\r\n      if (!itemAccountInfo.accountInfo) continue;\r\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()];\r\n      if (!poolId) continue;\r\n      if (tickArrayCache[poolId.toString()] === undefined) tickArrayCache[poolId.toString()] = {};\r\n\r\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data);\r\n\r\n      tickArrayCache[poolId.toString()][accountLayoutData.startTickIndex] = {\r\n        ...accountLayoutData,\r\n        address: itemAccountInfo.pubkey,\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  // deprecated, new api doesn't need\r\n  static async fetchPoolsAccountPosition({\r\n    pools,\r\n    connection,\r\n    ownerInfo,\r\n    batchRequest = false,\r\n    updateOwnerRewardAndFee = true,\r\n  }: {\r\n    pools: SDKParsedConcentratedInfo[];\r\n    connection: Connection;\r\n    ownerInfo: { wallet: PublicKey; tokenAccounts: TokenAccountRaw[] };\r\n    batchRequest?: boolean;\r\n    updateOwnerRewardAndFee?: boolean;\r\n  }): Promise<SDKParsedConcentratedInfo[]> {\r\n    const programIds: PublicKey[] = [];\r\n\r\n    for (let index = 0; index < pools.length; index++) {\r\n      const accountInfo = pools[index];\r\n\r\n      if (accountInfo === null) continue;\r\n\r\n      if (!programIds.find((i) => i.equals(accountInfo.state.programId))) programIds.push(accountInfo.state.programId);\r\n    }\r\n\r\n    if (ownerInfo) {\r\n      const allMint = ownerInfo.tokenAccounts.map((i) => i.accountInfo.mint);\r\n      const allPositionKey: PublicKey[] = [];\r\n      for (const itemMint of allMint) {\r\n        for (const itemProgramId of programIds) {\r\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey);\r\n        }\r\n      }\r\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest });\r\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {};\r\n      for (const itemAccountInfo of positionAccountInfos) {\r\n        if (itemAccountInfo === null) continue;\r\n        // TODO: add check\r\n\r\n        const position = PositionInfoLayout.decode(itemAccountInfo.data);\r\n        const itemPoolId = position.poolId.toString();\r\n        const poolInfoA = pools.find((pool) => pool.state.id.toBase58() === itemPoolId);\r\n        if (poolInfoA === undefined) continue;\r\n\r\n        const poolInfo = poolInfoA.state;\r\n\r\n        const priceLower = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickLower,\r\n          baseIn: true,\r\n        });\r\n        const priceUpper = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickUpper,\r\n          baseIn: true,\r\n        });\r\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n          poolInfo.sqrtPriceX64,\r\n          priceLower.tickSqrtPriceX64,\r\n          priceUpper.tickSqrtPriceX64,\r\n          position.liquidity,\r\n          false,\r\n        );\r\n\r\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())));\r\n\r\n        poolInfoA.positionAccount = [\r\n          ...(poolInfoA.positionAccount ?? []),\r\n          {\r\n            poolId: position.poolId,\r\n            nftMint: position.nftMint,\r\n\r\n            priceLower: priceLower.price,\r\n            priceUpper: priceUpper.price,\r\n            amountA,\r\n            amountB,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper,\r\n            liquidity: position.liquidity,\r\n            feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\r\n            feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\r\n            tokenFeesOwedA: position.tokenFeesOwedA,\r\n            tokenFeesOwedB: position.tokenFeesOwedB,\r\n            rewardInfos: position.rewardInfos.map((i) => ({\r\n              ...i,\r\n              pendingReward: new BN(0),\r\n            })),\r\n\r\n            leverage,\r\n            tokenFeeAmountA: new BN(0),\r\n            tokenFeeAmountB: new BN(0),\r\n          },\r\n        ];\r\n\r\n        const tickArrayLowerAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickLower,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        const tickArrayUpperAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickUpper,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`\r\n        ] = tickArrayLowerAddress;\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`\r\n        ] = tickArrayUpperAddress;\r\n      }\r\n\r\n      if (updateOwnerRewardAndFee) {\r\n        const tickArrayKeys = Object.values(keyToTickArrayAddress);\r\n        const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest });\r\n        const tickArrayLayout = {};\r\n        for (let index = 0; index < tickArrayKeys.length; index++) {\r\n          const tickArrayData = tickArrayDatas[index];\r\n          if (tickArrayData === null) continue;\r\n          const key = tickArrayKeys[index].toString();\r\n          tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data);\r\n        }\r\n\r\n        for (const { state, positionAccount } of pools) {\r\n          if (!positionAccount) continue;\r\n          for (const itemPA of positionAccount) {\r\n            const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`;\r\n            const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`;\r\n            const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()];\r\n            const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()];\r\n            const tickLowerState: Tick =\r\n              tickArrayLower.ticks[TickUtils.getTickOffsetInArray(itemPA.tickLower, state.tickSpacing)];\r\n            const tickUpperState: Tick =\r\n              tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(itemPA.tickUpper, state.tickSpacing)];\r\n            const { tokenFeeAmountA, tokenFeeAmountB } = await PositionUtils.GetPositionFees(\r\n              state,\r\n              itemPA,\r\n              tickLowerState,\r\n              tickUpperState,\r\n            );\r\n            const rewardInfos = await PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState);\r\n            itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(new BN(0)) ? tokenFeeAmountA : new BN(0);\r\n            itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(new BN(0)) ? tokenFeeAmountB : new BN(0);\r\n            for (let i = 0; i < rewardInfos.length; i++) {\r\n              itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(new BN(0)) ? rewardInfos[i] : new BN(0);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return pools;\r\n  }\r\n\r\n  static computeAmountOut({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountIn,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountIn: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n    catchLiquidityInsufficient: boolean;\r\n  }): ReturnTypeComputeAmountOut {\r\n    let sqrtPriceLimitX64: BN;\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const [baseFeeConfig, outFeeConfig] = isBaseIn\r\n      ? [poolInfo.mintA.extensions.feeConfig, poolInfo.mintB.extensions.feeConfig]\r\n      : [poolInfo.mintB.extensions.feeConfig, poolInfo.mintA.extensions.feeConfig];\r\n\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountIn = getTransferAmountFeeV2(amountIn, baseFeeConfig, epochInfo, false);\r\n\r\n    const {\r\n      allTrade,\r\n      expectedAmountOut: _expectedAmountOut,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getOutputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountIn.amount.sub(realAmountIn.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n\r\n    const amountOut = getTransferAmountFeeV2(_expectedAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _minAmountOut = _expectedAmountOut\r\n      .mul(new BN(Math.floor((1 - slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    const minAmountOut = getTransferAmountFeeV2(_minAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime: minExpirationTime(realAmountIn.expirationTime, amountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n      remainingAccounts,\r\n      executionPriceX64: _executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountOutFormat({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    amountIn,\r\n    tokenOut: _tokenOut,\r\n    slippage,\r\n    epochInfo,\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    amountIn: BN;\r\n    tokenOut: ApiV3Token;\r\n    slippage: number;\r\n    epochInfo: EpochInfo;\r\n    catchLiquidityInsufficient?: boolean;\r\n  }): ReturnTypeComputeAmountOutFormat {\r\n    const baseIn = _tokenOut.address === poolInfo.mintB.address;\r\n    const [inputMint, outMint] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n    const [baseToken, outToken] = [\r\n      new Token({\r\n        ...inputMint,\r\n        mint: inputMint.address,\r\n        isToken2022: inputMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n      new Token({\r\n        ...outMint,\r\n        mint: outMint.address,\r\n        isToken2022: outMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n    ];\r\n\r\n    const {\r\n      allTrade,\r\n      realAmountIn: _realAmountIn,\r\n      amountOut: _amountOut,\r\n      minAmountOut: _minAmountOut,\r\n      expirationTime,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    } = PoolUtils.computeAmountOut({\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint: new PublicKey(inputMint.address),\r\n      amountIn,\r\n      slippage,\r\n      epochInfo,\r\n      catchLiquidityInsufficient,\r\n    });\r\n\r\n    const realAmountIn = {\r\n      ..._realAmountIn,\r\n      amount: new TokenAmount(baseToken, _realAmountIn.amount),\r\n      fee: _realAmountIn.fee === undefined ? undefined : new TokenAmount(baseToken, _realAmountIn.fee),\r\n    };\r\n\r\n    const amountOut = {\r\n      ..._amountOut,\r\n      amount: new TokenAmount(outToken, _amountOut.amount),\r\n      fee: _amountOut.fee === undefined ? undefined : new TokenAmount(outToken, _amountOut.fee),\r\n    };\r\n    const minAmountOut = {\r\n      ..._minAmountOut,\r\n      amount: new TokenAmount(outToken, _minAmountOut.amount),\r\n      fee: _minAmountOut.fee === undefined ? undefined : new TokenAmount(outToken, _minAmountOut.fee),\r\n    };\r\n\r\n    const _currentPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: currentPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _executionPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: executionPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _fee = new TokenAmount(baseToken, fee);\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime,\r\n      currentPrice: _currentPrice,\r\n      executionPrice: _executionPrice,\r\n      priceImpact,\r\n      fee: _fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountIn({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountOut,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountOut: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n  }): ReturnTypeComputeAmountOutBaseOut {\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const feeConfigs = {\r\n      [poolInfo.mintA.address]: poolInfo.mintA.extensions.feeConfig,\r\n      [poolInfo.mintB.address]: poolInfo.mintB.extensions.feeConfig,\r\n    };\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = !isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountOut = getTransferAmountFeeV2(amountOut, feeConfigs[baseMint.toString()], epochInfo, true);\r\n\r\n    const {\r\n      expectedAmountIn: _expectedAmountIn,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getInputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountOut.amount.sub(realAmountOut.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n    );\r\n\r\n    const inMint = isBaseIn ? poolInfo.mintB.address : poolInfo.mintA.address;\r\n\r\n    const amountIn = getTransferAmountFeeV2(_expectedAmountIn, feeConfigs[inMint], epochInfo, false);\r\n    // const amountIn = getTransferAmountFee(\r\n    //   _expectedAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _maxAmountIn = _expectedAmountIn\r\n      .mul(new BN(Math.floor((1 + slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    // const maxAmountIn = getTransferAmountFee(\r\n    //   _maxAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n    const maxAmountIn = getTransferAmountFeeV2(_maxAmountIn, feeConfigs[inMint], epochInfo, true);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      amountIn,\r\n      maxAmountIn,\r\n      realAmountOut,\r\n      expirationTime: minExpirationTime(amountIn.expirationTime, realAmountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n\r\n      remainingAccounts,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeMultiplier({\r\n    poolInfo,\r\n    aprType,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprInfo = poolInfo[aprType];\r\n\r\n    const priceLower = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickLowerIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n    const priceUpper = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickUpperIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n\r\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin);\r\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax);\r\n\r\n    const sub = _maxPrice - _minPrice;\r\n\r\n    const userRange = priceUpper - priceLower;\r\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin;\r\n\r\n    let p: number;\r\n\r\n    if (sub <= 0) p = 0;\r\n    else if (userRange === sub) p = tradeRange / sub;\r\n    else if (tradeRange === sub) p = sub / userRange;\r\n    else p = (sub / tradeRange) * (sub / userRange);\r\n\r\n    return {\r\n      feeApr: aprInfo.feeApr * p,\r\n      rewardsApr: [(aprInfo.rewardApr[0] ?? 0) * p, (aprInfo.rewardApr[1] ?? 0) * p, (aprInfo.rewardApr[2] ?? 0) * p],\r\n      apr: aprInfo.apr * p,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeDelta({\r\n    poolInfo,\r\n    poolLiquidity,\r\n    aprType,\r\n    mintPrice,\r\n    liquidity,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n    chainTime,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolLiquidity: BN;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    mintPrice: { [mint: string]: { value: number } };\r\n\r\n    liquidity: BN;\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n\r\n    chainTime: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprTypeDay = aprType === \"day\" ? 1 : aprType === \"week\" ? 7 : aprType === \"month\" ? 30 : 0;\r\n    const aprInfo = poolInfo[aprType];\r\n    const mintPriceA = mintPrice[solToWSol(poolInfo.mintA.address).toString()];\r\n    const mintPriceB = mintPrice[solToWSol(poolInfo.mintB.address).toString()];\r\n    const mintDecimalsA = poolInfo.mintA.decimals;\r\n    const mintDecimalsB = poolInfo.mintB.decimals;\r\n\r\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 };\r\n\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex);\r\n\r\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        poolLiquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const poolTvl = new Decimal(poolLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n    const userTvl = new Decimal(userLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n\r\n    const p = new Decimal(1).div(poolTvl.add(userTvl));\r\n\r\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\r\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\r\n\r\n    const SECONDS_PER_YEAR = 3600 * 24 * 365;\r\n\r\n    const rewardsApr = poolInfo.rewardDefaultInfos.map((i) => {\r\n      const iDecimal = i.mint.decimals;\r\n      const iPrice = mintPrice[i.mint.address];\r\n\r\n      if (\r\n        chainTime < ((i as any).startTime ?? 0) ||\r\n        chainTime > ((i as any).endTime ?? 0) ||\r\n        !i.perSecond ||\r\n        !iPrice ||\r\n        iDecimal === undefined\r\n      )\r\n        return 0;\r\n\r\n      return new Decimal(iPrice.value)\r\n        .mul(new Decimal(i.perSecond).mul(SECONDS_PER_YEAR))\r\n        .div(new Decimal(10).pow(iDecimal))\r\n        .mul(p)\r\n        .mul(100)\r\n        .toNumber();\r\n    });\r\n\r\n    return {\r\n      feeApr,\r\n      rewardsApr,\r\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0),\r\n    };\r\n  }\r\n\r\n  static async getLiquidityAmountOutFromAmountIn({\r\n    poolInfo,\r\n    inputA,\r\n    tickLower,\r\n    tickUpper,\r\n    amount,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountHasFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    inputA: boolean;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n    epochInfo: EpochInfo;\r\n    amountHasFee: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    // const coefficient = add ? 1 - slippage : 1 + slippage;\r\n    const addFeeAmount = getTransferAmountFeeV2(\r\n      amount,\r\n      poolInfo[inputA ? \"mintA\" : \"mintB\"].extensions?.feeConfig,\r\n      epochInfo,\r\n      !amountHasFee,\r\n    );\r\n    const _amount = new BN(\r\n      new Decimal(addFeeAmount.amount.sub(addFeeAmount.fee ?? ZERO).toString()).toFixed(0) // .mul(coefficient).toFixed(0),\r\n    );\r\n\r\n    let liquidity: BN;\r\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\r\n      liquidity = inputA\r\n        ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add)\r\n        : new BN(0);\r\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\r\n      liquidity = inputA ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = inputA\r\n        ? new BN(0)\r\n        : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\r\n    }\r\n\r\n    const amountFromLiquidity = await PoolUtils.getAmountsFromLiquidity({\r\n      epochInfo,\r\n      poolInfo,\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      slippage,\r\n      add,\r\n    });\r\n    return {\r\n      liquidity,\r\n      amountA: inputA ? addFeeAmount : amountFromLiquidity.amountA,\r\n      amountB: inputA ? amountFromLiquidity.amountB : addFeeAmount,\r\n      amountSlippageA: inputA ? addFeeAmount : amountFromLiquidity.amountSlippageA,\r\n      amountSlippageB: inputA ? amountFromLiquidity.amountSlippageB : addFeeAmount,\r\n      expirationTime: amountFromLiquidity.expirationTime,\r\n    }\r\n  }\r\n\r\n  static async getAmountsFromLiquidity({\r\n    epochInfo,\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n  }: {\r\n    epochInfo: EpochInfo;\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(\r\n      SqrtPriceMath.priceToSqrtPriceX64(new Decimal(poolInfo.price), poolInfo.mintA.decimals, poolInfo.mintB.decimals),\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      add,\r\n    );\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        amounts.amountA.muln(coefficientRe),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        amounts.amountB.muln(coefficientRe),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n\r\n  static async fetchComputeMultipleClmmInfo({\r\n    connection,\r\n    poolList,\r\n    rpcDataMap = {},\r\n  }: {\r\n    rpcDataMap?: Record<string, ReturnType<typeof PoolInfoLayout.decode>>;\r\n    connection: Connection;\r\n    poolList: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">[];\r\n  }): Promise<Record<string, ComputeClmmPoolInfo>> {\r\n    const fetchRpcList = poolList.filter((p) => !rpcDataMap[p.id]).map((p) => new PublicKey(p.id));\r\n    const rpcRes = await getMultipleAccountsInfo(connection, fetchRpcList);\r\n    rpcRes.forEach((r, idx) => {\r\n      if (!r) return;\r\n      rpcDataMap[fetchRpcList[idx].toBase58()] = PoolInfoLayout.decode(r.data);\r\n    });\r\n\r\n    const pdaList = poolList.map(\r\n      (poolInfo) => getPdaExBitmapAccount(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n    );\r\n\r\n    const exBitData = await PoolUtils.fetchExBitmaps({\r\n      connection,\r\n      exBitmapAddress: pdaList,\r\n      batchRequest: false,\r\n    });\r\n\r\n    return poolList.reduce(\r\n      (acc, cur) => ({\r\n        ...acc,\r\n        [cur.id]: {\r\n          ...rpcDataMap[cur.id],\r\n          id: new PublicKey(cur.id),\r\n          version: 6,\r\n          programId: new PublicKey(cur.programId),\r\n          mintA: cur.mintA,\r\n          mintB: cur.mintB,\r\n          ammConfig: {\r\n            ...cur.config,\r\n            id: new PublicKey(cur.config.id),\r\n            fundOwner: \"\",\r\n          },\r\n          currentPrice: new Decimal(cur.price),\r\n          exBitmapAccount: getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey,\r\n          exBitmapInfo:\r\n            exBitData[getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey.toBase58()],\r\n          startTime: rpcDataMap[cur.id].startTime.toNumber(),\r\n          rewardInfos: rpcDataMap[cur.id].rewardInfos,\r\n        },\r\n      }),\r\n      {} as Record<string, ComputeClmmPoolInfo>,\r\n    );\r\n  }\r\n\r\n  static async fetchComputeClmmInfo({\r\n    connection,\r\n    poolInfo,\r\n    rpcData,\r\n  }: {\r\n    connection: Connection;\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">;\r\n    rpcData?: ReturnType<typeof PoolInfoLayout.decode>;\r\n  }): Promise<ComputeClmmPoolInfo> {\r\n    return (\r\n      await this.fetchComputeMultipleClmmInfo({\r\n        connection,\r\n        rpcDataMap: rpcData ? { [poolInfo.id]: rpcData } : undefined,\r\n        poolList: [poolInfo],\r\n      })\r\n    )[poolInfo.id];\r\n  }\r\n}\r\n\r\nexport function getLiquidityFromAmounts({\r\n  poolInfo,\r\n  tickLower,\r\n  tickUpper,\r\n  amountA,\r\n  amountB,\r\n  slippage,\r\n  add,\r\n  epochInfo,\r\n  amountHasFee,\r\n}: {\r\n  poolInfo: ApiV3PoolInfoConcentratedItem;\r\n  tickLower: number;\r\n  tickUpper: number;\r\n  amountA: BN;\r\n  amountB: BN;\r\n  slippage: number;\r\n  add: boolean;\r\n  epochInfo: EpochInfo;\r\n  amountHasFee: boolean;\r\n}): ReturnTypeGetLiquidityAmountOut {\r\n  const [_tickLower, _tickUpper, _amountA, _amountB] =\r\n    tickLower < tickUpper ? [tickLower, tickUpper, amountA, amountB] : [tickUpper, tickLower, amountB, amountA];\r\n  const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n    new Decimal(poolInfo.price),\r\n    poolInfo.mintA.decimals,\r\n    poolInfo.mintB.decimals,\r\n  );\r\n  const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(_tickLower);\r\n  const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(_tickUpper);\r\n\r\n  const [amountFeeA, amountFeeB] = [\r\n    getTransferAmountFeeV2(_amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n    getTransferAmountFeeV2(_amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n  ];\r\n\r\n  const liquidity = LiquidityMath.getLiquidityFromTokenAmounts(\r\n    sqrtPriceX64,\r\n    sqrtPriceX64A,\r\n    sqrtPriceX64B,\r\n    amountFeeA.amount.sub(amountFeeA.fee ?? ZERO),\r\n    amountFeeB.amount.sub(amountFeeB.fee ?? ZERO),\r\n  );\r\n\r\n  return LiquidityMath.getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee: !amountHasFee,\r\n  });\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport function clmmComputeInfoToApiInfo(pool: ComputeClmmPoolInfo): ApiV3PoolInfoConcentratedItem {\r\n  return {\r\n    ...pool,\r\n    type: \"Concentrated\",\r\n    programId: pool.programId.toString(),\r\n    id: pool.id.toString(),\r\n    rewardDefaultInfos: [],\r\n    rewardDefaultPoolInfos: \"Clmm\",\r\n    price: pool.currentPrice.toNumber(),\r\n    mintAmountA: 0,\r\n    mintAmountB: 0,\r\n    feeRate: pool.ammConfig.tradeFeeRate,\r\n    openTime: pool.startTime.toString(),\r\n    tvl: 0,\r\n\r\n    day: mockRewardData,\r\n    week: mockRewardData,\r\n    month: mockRewardData,\r\n    pooltype: [],\r\n\r\n    farmUpcomingCount: 0,\r\n    farmOngoingCount: 0,\r\n    farmFinishedCount: 0,\r\n    burnPercent: 0,\r\n    config: {\r\n      ...pool.ammConfig,\r\n      id: pool.ammConfig.id.toString(),\r\n      defaultRange: 0,\r\n      defaultRangePoint: [],\r\n    },\r\n  };\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common\";\r\nimport { ClmmPositionLayout } from \"../layout\";\r\nimport { ClmmPoolInfo, ClmmPoolPersonalPosition, ClmmPoolRewardInfo, GetAmountParams, ReturnTypeGetLiquidityAmountOut } from \"../type\";\r\nimport { Q64 } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath } from \"./math\";\r\nimport { Tick } from \"./tick\";\r\n\r\nexport class PositionUtils {\r\n  static getfeeGrowthInside(\r\n    poolState: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { feeGrowthInsideX64A: BN; feeGrowthInsideBX64: BN } {\r\n    let feeGrowthBelowX64A = new BN(0);\r\n    let feeGrowthBelowX64B = new BN(0);\r\n    if (poolState.tickCurrent >= tickLowerState.tick) {\r\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\r\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(tickLowerState.feeGrowthOutsideX64A);\r\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(tickLowerState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    let feeGrowthAboveX64A = new BN(0);\r\n    let feeGrowthAboveX64B = new BN(0);\r\n    if (poolState.tickCurrent < tickUpperState.tick) {\r\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\r\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(tickUpperState.feeGrowthOutsideX64A);\r\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(tickUpperState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\r\n      feeGrowthAboveX64A,\r\n    );\r\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\r\n      feeGrowthAboveX64B,\r\n    );\r\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\r\n  }\r\n\r\n  static GetPositionFees(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionFeesV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionRewardsV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64B\"> & {\r\n      rewardInfos: { rewardGrowthGlobalX64: BN }[];\r\n    },\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInsideV2(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static GetPositionRewards(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInside(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static getRewardGrowthInside(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: ClmmPoolRewardInfo[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getRewardGrowthInsideV2(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: Pick<ClmmPoolRewardInfo, \"rewardGrowthGlobalX64\">[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getAmountsFromLiquidity({\r\n    poolInfo,\r\n    ownerPosition,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n  }: GetAmountParams): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { TickArrayBitmapExtensionType } from \"../type\";\r\n\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, TICK_ARRAY_SIZE, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { isZero, leadingZeros, leastSignificantBit, mostSignificantBit, trailingZeros } from \"./util\";\r\n\r\nexport const EXTENSION_TICKARRAY_BITMAP_SIZE = 14;\r\n\r\nexport class TickArrayBitmap {\r\n  public static maxTickInTickarrayBitmap(tickSpacing: number): number {\r\n    return tickSpacing * TICK_ARRAY_SIZE * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  public static getBitmapTickBoundary(\r\n    tickarrayStartIndex: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    minValue: number;\r\n    maxValue: number;\r\n  } {\r\n    const ticksInOneBitmap = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    let m = Math.floor(Math.abs(tickarrayStartIndex) / ticksInOneBitmap);\r\n    if (tickarrayStartIndex < 0 && Math.abs(tickarrayStartIndex) % ticksInOneBitmap != 0) m += 1;\r\n\r\n    const minValue = ticksInOneBitmap * m;\r\n\r\n    return tickarrayStartIndex < 0\r\n      ? { minValue: -minValue, maxValue: -minValue + ticksInOneBitmap }\r\n      : { minValue, maxValue: minValue + ticksInOneBitmap };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    bitMap: BN,\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): { isInit: boolean; tickIndex: number } {\r\n    if (!TickQuery.checkIsValidStartIndex(lastTickArrayStartIndex, tickSpacing))\r\n      throw Error(\"nextInitializedTickArrayStartIndex check error\");\r\n\r\n    const tickBoundary = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - TickQuery.tickCount(tickSpacing)\r\n      : lastTickArrayStartIndex + TickQuery.tickCount(tickSpacing);\r\n\r\n    if (nextTickArrayStartIndex < -tickBoundary || nextTickArrayStartIndex >= tickBoundary) {\r\n      return { isInit: false, tickIndex: lastTickArrayStartIndex };\r\n    }\r\n\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    let compressed = nextTickArrayStartIndex / multiplier + 512;\r\n\r\n    if (nextTickArrayStartIndex < 0 && nextTickArrayStartIndex % multiplier != 0) {\r\n      compressed--;\r\n    }\r\n\r\n    const bitPos = Math.abs(compressed);\r\n\r\n    if (zeroForOne) {\r\n      const offsetBitMap = bitMap.shln(1024 - bitPos - 1);\r\n      const nextBit = mostSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos - nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: -tickBoundary };\r\n      }\r\n    } else {\r\n      const offsetBitMap = bitMap.shrn(bitPos);\r\n      const nextBit = leastSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos + nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: tickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class TickArrayBitmapExtensionUtils {\r\n  public static getBitmapOffset(tickIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n    this.checkExtensionBoundary(tickIndex, tickSpacing);\r\n\r\n    const ticksInOneBitmap = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let offset = Math.floor(Math.abs(tickIndex) / ticksInOneBitmap) - 1;\r\n\r\n    if (tickIndex < 0 && Math.abs(tickIndex) % ticksInOneBitmap === 0) offset--;\r\n    return offset;\r\n  }\r\n\r\n  public static getBitmap(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): { offset: number; tickarrayBitmap: BN[] } {\r\n    const offset = this.getBitmapOffset(tickIndex, tickSpacing);\r\n    if (tickIndex < 0) {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.negativeTickArrayBitmap[offset] };\r\n    } else {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.positiveTickArrayBitmap[offset] };\r\n    }\r\n  }\r\n\r\n  public static checkExtensionBoundary(tickIndex: number, tickSpacing: number) {\r\n    const { positiveTickBoundary, negativeTickBoundary } = this.extensionTickBoundary(tickSpacing);\r\n\r\n    if (tickIndex >= negativeTickBoundary && tickIndex < positiveTickBoundary) {\r\n      throw Error(\"checkExtensionBoundary -> InvalidTickArrayBoundary\");\r\n    }\r\n  }\r\n\r\n  public static extensionTickBoundary(tickSpacing: number): {\r\n    positiveTickBoundary: number;\r\n    negativeTickBoundary: number;\r\n  } {\r\n    const positiveTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n\r\n    const negativeTickBoundary = -positiveTickBoundary;\r\n\r\n    if (MAX_TICK <= positiveTickBoundary)\r\n      throw Error(`extensionTickBoundary check error: ${MAX_TICK}, ${positiveTickBoundary}`);\r\n    if (negativeTickBoundary <= MIN_TICK)\r\n      throw Error(`extensionTickBoundary check error: ${negativeTickBoundary}, ${MIN_TICK}`);\r\n\r\n    return { positiveTickBoundary, negativeTickBoundary };\r\n  }\r\n\r\n  public static checkTickArrayIsInit(\r\n    tickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): { isInitialized: boolean; startIndex: number } {\r\n    const { tickarrayBitmap } = this.getBitmap(tickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(tickArrayStartIndex, tickSpacing);\r\n\r\n    return {\r\n      isInitialized: TickUtils.mergeTickArrayBitmap(tickarrayBitmap).testn(tickArrayOffsetInBitmap),\r\n      startIndex: tickArrayStartIndex,\r\n    };\r\n  }\r\n\r\n  public static nextInitializedTickArrayFromOneBitmap(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const multiplier = TickQuery.tickCount(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - multiplier\r\n      : lastTickArrayStartIndex + multiplier;\r\n    const { tickarrayBitmap } = this.getBitmap(nextTickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    return this.nextInitializedTickArrayInBitmap(tickarrayBitmap, nextTickArrayStartIndex, tickSpacing, zeroForOne);\r\n  }\r\n\r\n  public static nextInitializedTickArrayInBitmap(\r\n    tickarrayBitmap: BN[],\r\n    nextTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const { minValue: bitmapMinTickBoundary, maxValue: bitmapMaxTickBoundary } = TickArrayBitmap.getBitmapTickBoundary(\r\n      nextTickArrayStartIndex,\r\n      tickSpacing,\r\n    );\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(nextTickArrayStartIndex, tickSpacing);\r\n    if (zeroForOne) {\r\n      // tick from upper to lower\r\n      // find from highter bits to lower bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shln(\r\n        TICK_ARRAY_BITMAP_SIZE - 1 - tickArrayOffsetInBitmap,\r\n      );\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : leadingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex - nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMinTickBoundary };\r\n      }\r\n    } else {\r\n      // tick from lower to upper\r\n      // find from lower bits to highter bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shrn(tickArrayOffsetInBitmap);\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : trailingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex + nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMaxTickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n\r\n  public static tickArrayOffsetInBitmap(tickArrayStartIndex: number, tickSpacing: number): number {\r\n    const m = Math.abs(tickArrayStartIndex) % TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let tickArrayOffsetInBitmap = Math.floor(m / TickQuery.tickCount(tickSpacing));\r\n    if (tickArrayStartIndex < 0 && m != 0) {\r\n      tickArrayOffsetInBitmap = TICK_ARRAY_BITMAP_SIZE - tickArrayOffsetInBitmap;\r\n    }\r\n    return tickArrayOffsetInBitmap;\r\n  }\r\n}\r\n","import { blob, bool, i128, i64, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\r\nimport { EXTENSION_TICKARRAY_BITMAP_SIZE } from \"./utils/tickarrayBitmap\";\r\n\r\nexport const ClmmConfigLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  u16(\"index\"),\r\n  publicKey(\"\"),\r\n  u32(\"protocolFeeRate\"),\r\n  u32(\"tradeFeeRate\"),\r\n  u16(\"tickSpacing\"),\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const ObservationLayout = struct([u32(\"blockTimestamp\"), i64(\"tickCumulative\"), seq(u64(), 4)]);\r\nexport const ObservationInfoLayout = struct([\r\n  blob(8),\r\n  bool(\"initialized\"),\r\n  u64(\"recentEpoch\"),\r\n  u16(\"observationIndex\"),\r\n  publicKey(\"poolId\"),\r\n  seq(ObservationLayout, 100, \"observations\"),\r\n  seq(u64(), 4),\r\n]);\r\n\r\nexport const RewardInfo = struct([\r\n  u8(\"rewardState\"),\r\n  u64(\"openTime\"),\r\n  u64(\"endTime\"),\r\n  u64(\"lastUpdateTime\"),\r\n  u128(\"emissionsPerSecondX64\"),\r\n  u64(\"rewardTotalEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  publicKey(\"tokenMint\"),\r\n  publicKey(\"tokenVault\"),\r\n  publicKey(\"creator\"),\r\n  u128(\"rewardGrowthGlobalX64\"),\r\n]);\r\nexport const PoolInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"ammConfig\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n  publicKey(\"observationId\"),\r\n  u8(\"mintDecimalsA\"),\r\n  u8(\"mintDecimalsB\"),\r\n  u16(\"tickSpacing\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"sqrtPriceX64\"),\r\n  s32(\"tickCurrent\"),\r\n  u32(),\r\n  u128(\"feeGrowthGlobalX64A\"),\r\n  u128(\"feeGrowthGlobalX64B\"),\r\n  u64(\"protocolFeesTokenA\"),\r\n  u64(\"protocolFeesTokenB\"),\r\n\r\n  u128(\"swapInAmountTokenA\"),\r\n  u128(\"swapOutAmountTokenB\"),\r\n  u128(\"swapInAmountTokenB\"),\r\n  u128(\"swapOutAmountTokenA\"),\r\n\r\n  u8(\"status\"),\r\n\r\n  seq(u8(), 7, \"\"),\r\n\r\n  seq(RewardInfo, 3, \"rewardInfos\"),\r\n  seq(u64(), 16, \"tickArrayBitmap\"),\r\n\r\n  u64(\"totalFeesTokenA\"),\r\n  u64(\"totalFeesClaimedTokenA\"),\r\n  u64(\"totalFeesTokenB\"),\r\n  u64(\"totalFeesClaimedTokenB\"),\r\n\r\n  u64(\"fundFeesTokenA\"),\r\n  u64(\"fundFeesTokenB\"),\r\n\r\n  u64(\"startTime\"),\r\n\r\n  seq(u64(), 15 * 4 - 3, \"padding\"),\r\n]);\r\n\r\nexport const PositionRewardInfoLayout = struct([u128(\"growthInsideLastX64\"), u64(\"rewardAmountOwed\")]);\r\nexport const PositionInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"nftMint\"),\r\n  publicKey(\"poolId\"),\r\n\r\n  s32(\"tickLower\"),\r\n  s32(\"tickUpper\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n\r\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport type ClmmPositionLayout = ReturnType<typeof PositionInfoLayout.decode>;\r\n\r\nexport const ProtocolPositionLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"poolId\"),\r\n  s32(\"tickLowerIndex\"),\r\n  s32(\"tickUpperIndex\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n  seq(u128(), 3, \"rewardGrowthInside\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const TickLayout = struct([\r\n  s32(\"tick\"),\r\n  i128(\"liquidityNet\"),\r\n  u128(\"liquidityGross\"),\r\n  u128(\"feeGrowthOutsideX64A\"),\r\n  u128(\"feeGrowthOutsideX64B\"),\r\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\r\n\r\n  seq(u32(), 13, \"\"),\r\n]);\r\n\r\nexport const TickArrayLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  s32(\"startTickIndex\"),\r\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\r\n  u8(\"initializedTickCount\"),\r\n\r\n  seq(u8(), 115, \"\"),\r\n]);\r\n\r\nexport const OperationLayout = struct([blob(329), seq(publicKey(), 100, \"whitelistMints\")]);\r\n\r\nexport const TickArrayBitmapExtensionLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"positiveTickArrayBitmap\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"negativeTickArrayBitmap\"),\r\n]);\r\n\r\nexport const LockPositionLayout = struct([\r\n  u64(),\r\n  u8(\"bump\"),\r\n  publicKey(\"owner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  seq(u64(), 8),\r\n]);\r\n\r\nexport const LockClPositionLayoutV2 = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"lockOwner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  publicKey(\"lockNftMint\"),\r\n  u64(\"recentEpoch\"),\r\n  seq(u64(), 8),\r\n]);\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { findProgramAddress, ProgramAddress } from \"@/common\";\r\nimport { u16ToBytes } from \"../clmm\";\r\n\r\nexport const LAUNCHPAD_AUTH_SEED = Buffer.from(\"vault_auth_seed\", \"utf8\");\r\nexport const LAUNCHPAD_CONFIG_SEED = Buffer.from(\"global_config\", \"utf8\");\r\nexport const LAUNCHPAD_POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nexport const LAUNCHPAD_POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nexport const LAUNCHPAD_POOL_VESTING_SEED = Buffer.from(\"pool_vesting\", \"utf8\");\r\nexport const LAUNCHPAD_POOL_PLATFORM_SEED = Buffer.from(\"platform_config\", \"utf8\");\r\n\r\nexport function getPdaLaunchpadAuth(programId: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_AUTH_SEED], programId);\r\n}\r\n\r\nexport function getPdaLaunchpadConfigId(\r\n  programId: PublicKey,\r\n  mintB: PublicKey,\r\n  curveType: number,\r\n  index: number,\r\n): ProgramAddress {\r\n  return findProgramAddress(\r\n    [LAUNCHPAD_CONFIG_SEED, mintB.toBuffer(), u8ToBytes(curveType), u16ToBytes(index)],\r\n    programId,\r\n  );\r\n}\r\n\r\nexport function getPdaLaunchpadPoolId(programId: PublicKey, mintA: PublicKey, mintB: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_POOL_SEED, mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLaunchpadVaultId(programId: PublicKey, poolId: PublicKey, mint: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_POOL_VAULT_SEED, poolId.toBuffer(), mint.toBuffer()], programId);\r\n}\r\n\r\nexport function u8ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(1);\r\n  const view = new DataView(arr);\r\n  view.setUint8(0, num);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function getPdaCpiEvent(programId: PublicKey): ProgramAddress {\r\n  return findProgramAddress([Buffer.from(\"__event_authority\", \"utf8\")], programId);\r\n}\r\n\r\nexport function getPdaPlatformId(programId: PublicKey, platformAdminWallet: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_POOL_PLATFORM_SEED, platformAdminWallet.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaVestId(programId: PublicKey, poolId: PublicKey, owner: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_POOL_VESTING_SEED, poolId.toBuffer(), owner.toBuffer()], programId);\r\n}\r\n"],"mappings":"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","names":[]}