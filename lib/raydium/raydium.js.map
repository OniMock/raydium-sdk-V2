{"version":3,"sources":["../../src/raydium/raydium.ts","../../src/api/api.ts","../../src/common/accountInfo.ts","../../src/common/logger.ts","../../src/common/bignumber.ts","../../node_modules/decimal.js/decimal.mjs","../../src/module/amount.ts","../../src/module/formatter.ts","../../src/module/fraction.ts","../../src/common/constant.ts","../../src/raydium/token/constant.ts","../../src/module/token.ts","../../src/common/pubKey.ts","../../src/module/currency.ts","../../src/module/percent.ts","../../src/module/price.ts","../../src/common/utility.ts","../../src/common/lodash.ts","../../src/common/owner.ts","../../src/common/pda.ts","../../src/common/txTool/txUtils.ts","../../src/common/txTool/txType.ts","../../src/common/programId.ts","../../src/common/transfer.ts","../../src/common/txTool/lookupTable.ts","../../src/common/txTool/txTool.ts","../../src/common/fee.ts","../../src/api/url.ts","../../src/api/utils.ts","../../src/common/error.ts","../../src/raydium/account/account.ts","../../src/raydium/moduleBase.ts","../../src/raydium/account/instruction.ts","../../src/raydium/account/util.ts","../../node_modules/@noble/hashes/src/_assert.ts","../../node_modules/@noble/hashes/src/utils.ts","../../node_modules/@noble/hashes/src/_md.ts","../../node_modules/@noble/hashes/src/sha256.ts","../../src/marshmallow/index.ts","../../src/marshmallow/buffer-layout.ts","../../src/raydium/account/layout.ts","../../src/raydium/farm/farm.ts","../../src/raydium/farm/config.ts","../../src/raydium/farm/layout.ts","../../src/raydium/farm/instruction.ts","../../src/raydium/farm/util.ts","../../src/raydium/liquidity/liquidity.ts","../../src/raydium/clmm/instrument.ts","../../src/raydium/clmm/utils/tick.ts","../../src/raydium/clmm/utils/constants.ts","../../src/raydium/clmm/utils/math.ts","../../src/raydium/clmm/utils/util.ts","../../src/raydium/clmm/utils/pda.ts","../../src/raydium/clmm/utils/pool.ts","../../src/raydium/clmm/utils/position.ts","../../src/raydium/clmm/utils/tickQuery.ts","../../src/raydium/clmm/utils/tickarrayBitmap.ts","../../src/raydium/clmm/layout.ts","../../src/raydium/token/layout.ts","../../src/raydium/token/utils.ts","../../src/raydium/liquidity/constant.ts","../../src/raydium/liquidity/instruction.ts","../../src/raydium/liquidity/layout.ts","../../src/raydium/liquidity/stable.ts","../../src/raydium/liquidity/utils.ts","../../src/raydium/liquidity/serum.ts","../../src/raydium/marketV2/createMarket.ts","../../src/raydium/marketV2/instrument.ts","../../src/raydium/marketV2/layout.ts","../../src/raydium/clmm/clmm.ts","../../src/raydium/cpmm/cpmm.ts","../../src/raydium/cpmm/curve/calculator.ts","../../src/raydium/cpmm/curve/constantProduct.ts","../../src/raydium/cpmm/curve/fee.ts","../../src/raydium/cpmm/instruction.ts","../../src/raydium/cpmm/pda.ts","../../src/raydium/cpmm/layout.ts","../../src/raydium/tradeV2/trade.ts","../../src/raydium/serum/id.ts","../../src/raydium/serum/layout.ts","../../src/raydium/serum/serum.ts","../../src/raydium/tradeV2/instrument.ts","../../src/raydium/utils1216/utils1216.ts","../../src/raydium/ido/ido.ts","../../src/raydium/ido/instruction.ts","../../src/raydium/ido/layout.ts","../../src/raydium/launchpad/pda.ts","../../src/raydium/launchpad/instrument.ts","../../src/raydium/launchpad/launchpad.ts","../../src/raydium/launchpad/layout.ts","../../src/raydium/launchpad/curve/curve.ts","../../src/raydium/launchpad/curve/constantProductCurve.ts","../../src/raydium/launchpad/curve/curveBase.ts","../../src/raydium/launchpad/curve/fixedPriceCurve.ts","../../src/raydium/launchpad/curve/linearPriceCurve.ts","../../src/raydium/launchpad/curve/func.ts","../../src/raydium/token/token.ts"],"sourceRoot":"../src","sourcesContent":["import { Connection, Keypair, PublicKey, EpochInfo, Commitment } from \"@solana/web3.js\";\r\nimport { merge } from \"lodash\";\r\n\r\nimport { Api, API_URL_CONFIG, ApiV3TokenRes, ApiV3Token, JupTokenType, AvailabilityCheckAPI3 } from \"../api\";\r\nimport { EMPTY_CONNECTION, EMPTY_OWNER } from \"../common/error\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\nimport { Owner } from \"../common/owner\";\r\nimport { Cluster } from \"../solana\";\r\n\r\nimport Account, { TokenAccountDataProp } from \"./account/account\";\r\nimport Farm from \"./farm/farm\";\r\nimport Liquidity from \"./liquidity/liquidity\";\r\nimport { Clmm } from \"./clmm\";\r\nimport Cpmm from \"./cpmm/cpmm\";\r\nimport TradeV2 from \"./tradeV2/trade\";\r\nimport Utils1216 from \"./utils1216\";\r\nimport MarketV2 from \"./marketV2\";\r\nimport Ido from \"./ido\";\r\nimport Launchpad from \"./launchpad/launchpad\";\r\n\r\nimport TokenModule from \"./token/token\";\r\nimport { SignAllTransactions } from \"./type\";\r\n\r\nexport interface RaydiumLoadParams extends TokenAccountDataProp, Omit<RaydiumApiBatchRequestParams, \"api\"> {\r\n  /* ================= solana ================= */\r\n  // solana web3 connection\r\n  connection: Connection;\r\n  // solana cluster/network/env\r\n  cluster?: Cluster;\r\n  // user public key\r\n  owner?: PublicKey | Keypair;\r\n  /* ================= api ================= */\r\n  // api request interval in ms, -1 means never request again, 0 means always use fresh data, default is 5 mins (5 * 60 * 1000)\r\n  apiRequestInterval?: number;\r\n  // api request timeout in ms, default is 10 secs (10 * 1000)\r\n  apiRequestTimeout?: number;\r\n  apiCacheTime?: number;\r\n  signAllTransactions?: SignAllTransactions;\r\n  urlConfigs?: API_URL_CONFIG;\r\n  logRequests?: boolean;\r\n  logCount?: number;\r\n  jupTokenType?: JupTokenType;\r\n  disableFeatureCheck?: boolean;\r\n  disableLoadToken?: boolean;\r\n  blockhashCommitment?: Commitment;\r\n  loopMultiTxStatus?: boolean;\r\n}\r\n\r\nexport interface RaydiumApiBatchRequestParams {\r\n  api: Api;\r\n  defaultChainTimeOffset?: number;\r\n  defaultChainTime?: number;\r\n}\r\n\r\nexport type RaydiumConstructorParams = Required<RaydiumLoadParams> & RaydiumApiBatchRequestParams;\r\n\r\ninterface DataBase<T> {\r\n  fetched: number;\r\n  data: T;\r\n  extInfo?: Record<string, any>;\r\n}\r\ninterface ApiData {\r\n  tokens?: DataBase<ApiV3Token[]>;\r\n\r\n  // v3 data\r\n  tokenList?: DataBase<ApiV3TokenRes>;\r\n  jupTokenList?: DataBase<ApiV3Token[]>;\r\n}\r\n\r\nexport class Raydium {\r\n  public cluster: Cluster;\r\n  public farm: Farm;\r\n  public account: Account;\r\n  public liquidity: Liquidity;\r\n  public clmm: Clmm;\r\n  public cpmm: Cpmm;\r\n  public tradeV2: TradeV2;\r\n  public utils1216: Utils1216;\r\n  public marketV2: MarketV2;\r\n  public ido: Ido;\r\n  public token: TokenModule;\r\n  public launchpad: Launchpad;\r\n  public rawBalances: Map<string, string> = new Map();\r\n  public apiData: ApiData;\r\n  public availability: Partial<AvailabilityCheckAPI3>;\r\n  public blockhashCommitment: Commitment;\r\n  public loopMultiTxStatus?: boolean;\r\n\r\n  private _connection: Connection;\r\n  private _owner: Owner | undefined;\r\n  public api: Api;\r\n  private _apiCacheTime: number;\r\n  private _signAllTransactions?: SignAllTransactions;\r\n  private logger: Logger;\r\n  private _chainTime?: {\r\n    fetched: number;\r\n    value: {\r\n      chainTime: number;\r\n      offset: number;\r\n    };\r\n  };\r\n  private _epochInfo?: {\r\n    fetched: number;\r\n    value: EpochInfo;\r\n  };\r\n\r\n  constructor(config: RaydiumConstructorParams) {\r\n    const {\r\n      connection,\r\n      cluster,\r\n      owner,\r\n      api,\r\n      defaultChainTime,\r\n      defaultChainTimeOffset,\r\n      apiCacheTime,\r\n      blockhashCommitment = \"confirmed\",\r\n      loopMultiTxStatus,\r\n    } = config;\r\n\r\n    this._connection = connection;\r\n    this.cluster = cluster || \"mainnet\";\r\n    this._owner = owner ? new Owner(owner) : undefined;\r\n    this._signAllTransactions = config.signAllTransactions;\r\n    this.blockhashCommitment = blockhashCommitment;\r\n    this.loopMultiTxStatus = loopMultiTxStatus;\r\n\r\n    this.api = api;\r\n    this._apiCacheTime = apiCacheTime || 5 * 60 * 1000;\r\n    this.logger = createLogger(\"Raydium\");\r\n    this.farm = new Farm({ scope: this, moduleName: \"Raydium_Farm\" });\r\n    this.account = new Account({\r\n      scope: this,\r\n      moduleName: \"Raydium_Account\",\r\n      tokenAccounts: config.tokenAccounts,\r\n      tokenAccountRawInfos: config.tokenAccountRawInfos,\r\n    });\r\n    this.liquidity = new Liquidity({ scope: this, moduleName: \"Raydium_LiquidityV2\" });\r\n    this.token = new TokenModule({ scope: this, moduleName: \"Raydium_tokenV2\" });\r\n    this.tradeV2 = new TradeV2({ scope: this, moduleName: \"Raydium_tradeV2\" });\r\n    this.clmm = new Clmm({ scope: this, moduleName: \"Raydium_clmm\" });\r\n    this.cpmm = new Cpmm({ scope: this, moduleName: \"Raydium_cpmm\" });\r\n    this.utils1216 = new Utils1216({ scope: this, moduleName: \"Raydium_utils1216\" });\r\n    this.marketV2 = new MarketV2({ scope: this, moduleName: \"Raydium_marketV2\" });\r\n    this.ido = new Ido({ scope: this, moduleName: \"Raydium_ido\" });\r\n    this.launchpad = new Launchpad({ scope: this, moduleName: \"Raydium_lauchpad\" });\r\n\r\n    this.availability = {};\r\n    const now = new Date().getTime();\r\n    this.apiData = {};\r\n\r\n    if (defaultChainTimeOffset)\r\n      this._chainTime = {\r\n        fetched: now,\r\n        value: {\r\n          chainTime: defaultChainTime || Date.now() - defaultChainTimeOffset,\r\n          offset: defaultChainTimeOffset,\r\n        },\r\n      };\r\n  }\r\n\r\n  static async load(config: RaydiumLoadParams): Promise<Raydium> {\r\n    const custom: Required<RaydiumLoadParams> = merge(\r\n      // default\r\n      {\r\n        cluster: \"mainnet\",\r\n        owner: null,\r\n        apiRequestInterval: 5 * 60 * 1000,\r\n        apiRequestTimeout: 10 * 1000,\r\n      },\r\n      config,\r\n    );\r\n    const { cluster, apiRequestTimeout, logCount, logRequests, urlConfigs } = custom;\r\n\r\n    const api = new Api({ cluster, timeout: apiRequestTimeout, urlConfigs, logCount, logRequests });\r\n    const raydium = new Raydium({\r\n      ...custom,\r\n      api,\r\n    });\r\n\r\n    await raydium.fetchAvailabilityStatus(config.disableFeatureCheck ?? true);\r\n    if (!config.disableLoadToken)\r\n      await raydium.token.load({\r\n        type: config.jupTokenType,\r\n      });\r\n\r\n    return raydium;\r\n  }\r\n\r\n  get owner(): Owner | undefined {\r\n    return this._owner;\r\n  }\r\n  get ownerPubKey(): PublicKey {\r\n    if (!this._owner) throw new Error(EMPTY_OWNER);\r\n    return this._owner.publicKey;\r\n  }\r\n  public setOwner(owner?: PublicKey | Keypair): Raydium {\r\n    this._owner = owner ? new Owner(owner) : undefined;\r\n    this.account.resetTokenAccounts();\r\n    return this;\r\n  }\r\n  get connection(): Connection {\r\n    if (!this._connection) throw new Error(EMPTY_CONNECTION);\r\n    return this._connection;\r\n  }\r\n  public setConnection(connection: Connection): Raydium {\r\n    this._connection = connection;\r\n    return this;\r\n  }\r\n  get signAllTransactions(): SignAllTransactions | undefined {\r\n    return this._signAllTransactions;\r\n  }\r\n  public setSignAllTransactions(signAllTransactions?: SignAllTransactions): Raydium {\r\n    this._signAllTransactions = signAllTransactions;\r\n    return this;\r\n  }\r\n\r\n  public checkOwner(): void {\r\n    if (!this.owner) {\r\n      console.error(EMPTY_OWNER);\r\n      throw new Error(EMPTY_OWNER);\r\n    }\r\n  }\r\n\r\n  private isCacheInvalidate(time: number): boolean {\r\n    return new Date().getTime() - time > this._apiCacheTime;\r\n  }\r\n\r\n  public async fetchChainTime(): Promise<void> {\r\n    try {\r\n      const data = await this.api.getChainTimeOffset();\r\n      this._chainTime = {\r\n        fetched: Date.now(),\r\n        value: {\r\n          chainTime: Date.now() + data.offset * 1000,\r\n          offset: data.offset * 1000,\r\n        },\r\n      };\r\n    } catch {\r\n      this._chainTime = undefined;\r\n    }\r\n  }\r\n\r\n  public async fetchV3TokenList(forceUpdate?: boolean): Promise<ApiV3TokenRes> {\r\n    if (this.apiData.tokenList && !this.isCacheInvalidate(this.apiData.tokenList.fetched) && !forceUpdate)\r\n      return this.apiData.tokenList.data;\r\n    try {\r\n      const raydiumList = await this.api.getTokenList();\r\n      const dataObject = {\r\n        fetched: Date.now(),\r\n        data: raydiumList,\r\n      };\r\n      this.apiData.tokenList = dataObject;\r\n\r\n      return dataObject.data;\r\n    } catch (e) {\r\n      console.error(e);\r\n      return {\r\n        mintList: [],\r\n        blacklist: [],\r\n        whiteList: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  public async fetchJupTokenList(forceUpdate?: boolean): Promise<ApiV3Token[]> {\r\n    const prevFetched = this.apiData.jupTokenList;\r\n    if (prevFetched && !this.isCacheInvalidate(prevFetched.fetched) && !forceUpdate) return prevFetched.data;\r\n    try {\r\n      const jupList = await this.api.getJupTokenList();\r\n\r\n      this.apiData.jupTokenList = {\r\n        fetched: Date.now(),\r\n        data: jupList.map((t) => ({\r\n          ...t,\r\n          mintAuthority: t.mint_authority || undefined,\r\n          freezeAuthority: t.freeze_authority || undefined,\r\n        })),\r\n      };\r\n\r\n      return this.apiData.jupTokenList.data;\r\n    } catch (e) {\r\n      console.error(e);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  get chainTimeData(): { offset: number; chainTime: number } | undefined {\r\n    return this._chainTime?.value;\r\n  }\r\n\r\n  public async chainTimeOffset(): Promise<number> {\r\n    if (this._chainTime && Date.now() - this._chainTime.fetched <= 1000 * 60 * 5) return this._chainTime.value.offset;\r\n    await this.fetchChainTime();\r\n    return this._chainTime?.value.offset || 0;\r\n  }\r\n\r\n  public async currentBlockChainTime(): Promise<number> {\r\n    if (this._chainTime && Date.now() - this._chainTime.fetched <= 1000 * 60 * 5)\r\n      return this._chainTime.value.chainTime;\r\n    await this.fetchChainTime();\r\n    return this._chainTime?.value.chainTime || Date.now();\r\n  }\r\n\r\n  public async fetchEpochInfo(): Promise<EpochInfo> {\r\n    if (this._epochInfo && Date.now() - this._epochInfo.fetched <= 1000 * 30) return this._epochInfo.value;\r\n    this._epochInfo = {\r\n      fetched: Date.now(),\r\n      value: await this.connection.getEpochInfo(),\r\n    };\r\n    return this._epochInfo.value;\r\n  }\r\n\r\n  public async fetchAvailabilityStatus(skipCheck?: boolean): Promise<Partial<AvailabilityCheckAPI3>> {\r\n    if (skipCheck) return {};\r\n    try {\r\n      const data = await this.api.fetchAvailabilityStatus();\r\n      const isAllDisabled = data.all === false;\r\n      this.availability = {\r\n        all: data.all,\r\n        swap: isAllDisabled ? false : data.swap,\r\n        createConcentratedPosition: isAllDisabled ? false : data.createConcentratedPosition,\r\n        addConcentratedPosition: isAllDisabled ? false : data.addConcentratedPosition,\r\n        addStandardPosition: isAllDisabled ? false : data.addStandardPosition,\r\n        removeConcentratedPosition: isAllDisabled ? false : data.removeConcentratedPosition,\r\n        removeStandardPosition: isAllDisabled ? false : data.removeStandardPosition,\r\n        addFarm: isAllDisabled ? false : data.addFarm,\r\n        removeFarm: isAllDisabled ? false : data.removeFarm,\r\n      };\r\n      return data;\r\n    } catch {\r\n      return {};\r\n    }\r\n  }\r\n}\r\n","import axios, { AxiosInstance } from \"axios\";\r\n\r\nimport { createLogger, sleep } from \"../common\";\r\nimport { Cluster } from \"../solana\";\r\n\r\nimport {\r\n  ApiClmmConfigInfo,\r\n  ApiCpmmConfigInfo,\r\n  ApiV3Token,\r\n  FetchPoolParams,\r\n  PoolsApiReturn,\r\n  ApiV3PoolInfoItem,\r\n  PoolKeys,\r\n  FormatFarmInfoOut,\r\n  FormatFarmKeyOut,\r\n  AvailabilityCheckAPI3,\r\n  PoolFetchType,\r\n  ExtensionsItem,\r\n  JupToken,\r\n} from \"./type\";\r\nimport { API_URLS, API_URL_CONFIG } from \"./url\";\r\nimport { updateReqHistory } from \"./utils\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { solToWSol } from \"../common\";\r\nimport { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst logger = createLogger(\"Raydium_Api\");\r\nconst poolKeysCache: Map<string, PoolKeys> = new Map();\r\n\r\nexport async function endlessRetry<T>(name: string, call: () => Promise<T>, interval = 1000): Promise<T> {\r\n  let result: T | undefined;\r\n\r\n  while (result == undefined) {\r\n    try {\r\n      logger.debug(`Request ${name} through endlessRetry`);\r\n      result = await call();\r\n    } catch (err) {\r\n      logger.error(`Request ${name} failed, retry after ${interval} ms`, err);\r\n      await sleep(interval);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport interface ApiProps {\r\n  cluster: Cluster;\r\n  timeout: number;\r\n  logRequests?: boolean;\r\n  logCount?: number;\r\n  urlConfigs?: API_URL_CONFIG;\r\n}\r\n\r\nexport class Api {\r\n  public cluster: Cluster;\r\n\r\n  public api: AxiosInstance;\r\n  public logCount: number;\r\n\r\n  public urlConfigs: API_URL_CONFIG;\r\n\r\n  constructor({ cluster, timeout, logRequests, logCount, urlConfigs }: ApiProps) {\r\n    this.cluster = cluster;\r\n    this.urlConfigs = urlConfigs || {};\r\n    this.logCount = logCount || 1000;\r\n\r\n    this.api = axios.create({ baseURL: this.urlConfigs.BASE_HOST || API_URLS.BASE_HOST, timeout });\r\n\r\n    this.api.interceptors.request.use(\r\n      (config) => {\r\n        // before request\r\n        const { method, baseURL, url } = config;\r\n\r\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}`);\r\n\r\n        return config;\r\n      },\r\n      (error) => {\r\n        // request error\r\n        logger.error(`Request failed`);\r\n\r\n        return Promise.reject(error);\r\n      },\r\n    );\r\n    this.api.interceptors.response.use(\r\n      (response) => {\r\n        // 2xx\r\n        const { config, data, status } = response;\r\n        const { method, baseURL, url } = config;\r\n\r\n        if (logRequests) {\r\n          updateReqHistory({\r\n            status,\r\n            url: `${baseURL}${url}`,\r\n            params: config.params,\r\n            data,\r\n            logCount: this.logCount,\r\n          });\r\n        }\r\n\r\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}  ${status}`);\r\n\r\n        return data;\r\n      },\r\n      (error) => {\r\n        // https://axios-http.com/docs/handling_errors\r\n        // not 2xx\r\n        const { config, response = {} } = error;\r\n        const { status } = response;\r\n        const { method, baseURL, url } = config;\r\n\r\n        if (logRequests) {\r\n          updateReqHistory({\r\n            status,\r\n            url: `${baseURL}${url}`,\r\n            params: config.params,\r\n            data: error.message,\r\n            logCount: this.logCount,\r\n          });\r\n        }\r\n\r\n        logger.error(`${method.toUpperCase()} ${baseURL}${url} ${status || error.message}`);\r\n\r\n        return Promise.reject(error);\r\n      },\r\n    );\r\n  }\r\n\r\n  async getClmmConfigs(): Promise<ApiClmmConfigInfo[]> {\r\n    const res = await this.api.get(this.urlConfigs.CLMM_CONFIG || API_URLS.CLMM_CONFIG);\r\n    return res.data;\r\n  }\r\n\r\n  async getCpmmConfigs(): Promise<ApiCpmmConfigInfo[]> {\r\n    const res = await this.api.get(this.urlConfigs.CPMM_CONFIG || API_URLS.CPMM_CONFIG);\r\n    return res.data;\r\n  }\r\n\r\n  async getClmmPoolLines(poolId: string): Promise<{ price: string; liquidity: string }[]> {\r\n    const res = await this.api.get(\r\n      `${this.urlConfigs.POOL_LIQUIDITY_LINE || API_URLS.POOL_LIQUIDITY_LINE}?pool_id=${poolId}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async getBlockSlotCountForSecond(endpointUrl?: string): Promise<number> {\r\n    if (!endpointUrl) return 2;\r\n    const res: {\r\n      id: string;\r\n      jsonrpc: string;\r\n      result: { numSlots: number; numTransactions: number; samplePeriodSecs: number; slot: number }[];\r\n    } = await axios.post(endpointUrl, {\r\n      id: \"getRecentPerformanceSamples\",\r\n      jsonrpc: \"2.0\",\r\n      method: \"getRecentPerformanceSamples\",\r\n      params: [4],\r\n    });\r\n    const slotList = res.result.map((data) => data.numSlots);\r\n    return slotList.reduce((a, b) => a + b, 0) / slotList.length / 60;\r\n  }\r\n\r\n  async getChainTimeOffset(): Promise<{ offset: number }> {\r\n    const res = await this.api.get(this.urlConfigs.CHAIN_TIME || API_URLS.CHAIN_TIME);\r\n    return res.data;\r\n  }\r\n\r\n  async getRpcs(): Promise<{\r\n    rpcs: { batch: boolean; name: string; url: string; weight: number }[];\r\n    strategy: string;\r\n  }> {\r\n    return this.api.get(this.urlConfigs.RPCS || API_URLS.RPCS);\r\n  }\r\n\r\n  async getTokenList(): Promise<{ mintList: ApiV3Token[]; blacklist: string[]; whiteList: string[] }> {\r\n    const res = await this.api.get(this.urlConfigs.TOKEN_LIST || API_URLS.TOKEN_LIST);\r\n    return res.data;\r\n  }\r\n\r\n  async getJupTokenList(): Promise<\r\n    (ApiV3Token & {\r\n      freeze_authority: string | null;\r\n      mint_authority: string | null;\r\n      permanent_delegate: string | null;\r\n      minted_at: string;\r\n    })[]\r\n  > {\r\n    const r: JupToken[] = await this.api.get(\"\", {\r\n      baseURL: this.urlConfigs.JUP_TOKEN_LIST || API_URLS.JUP_TOKEN_LIST,\r\n    });\r\n    return r.map((t) => ({\r\n      ...t,\r\n      chainId: 101,\r\n      programId: t.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58(),\r\n    }));\r\n  }\r\n\r\n  async getTokenInfo(mint: (string | PublicKey)[]): Promise<ApiV3Token[]> {\r\n    const res = await this.api.get(\r\n      (this.urlConfigs.MINT_INFO_ID || API_URLS.MINT_INFO_ID) + `?mints=${mint.map((m) => m.toString()).join(\",\")}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async getPoolList(props: FetchPoolParams = {}): Promise<PoolsApiReturn> {\r\n    const { type = \"all\", sort = \"liquidity\", order = \"desc\", page = 0, pageSize = 100 } = props;\r\n    const res = await this.api.get<PoolsApiReturn>(\r\n      (this.urlConfigs.POOL_LIST || API_URLS.POOL_LIST) +\r\n        `?poolType=${type}&poolSortField=${sort}&sortType=${order}&page=${page}&pageSize=${pageSize}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async fetchPoolById(props: { ids: string }): Promise<ApiV3PoolInfoItem[]> {\r\n    const { ids } = props;\r\n    const res = await this.api.get((this.urlConfigs.POOL_SEARCH_BY_ID || API_URLS.POOL_SEARCH_BY_ID) + `?ids=${ids}`);\r\n    return res.data;\r\n  }\r\n\r\n  async fetchPoolKeysById(props: { idList: string[] }): Promise<PoolKeys[]> {\r\n    const { idList } = props;\r\n\r\n    const cacheList: PoolKeys[] = [];\r\n\r\n    const readyList = idList.filter((poolId) => {\r\n      if (poolKeysCache.has(poolId)) {\r\n        cacheList.push(poolKeysCache.get(poolId)!);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    let data: PoolKeys[] = [];\r\n    if (readyList.length) {\r\n      const res = await this.api.get<PoolKeys[]>(\r\n        (this.urlConfigs.POOL_KEY_BY_ID || API_URLS.POOL_KEY_BY_ID) + `?ids=${readyList.join(\",\")}`,\r\n      );\r\n      data = res.data.filter(Boolean);\r\n      data.forEach((poolKey) => {\r\n        poolKeysCache.set(poolKey.id, poolKey);\r\n      });\r\n    }\r\n\r\n    return cacheList.concat(data);\r\n  }\r\n\r\n  async fetchPoolByMints(\r\n    props: {\r\n      mint1: string | PublicKey;\r\n      mint2?: string | PublicKey;\r\n    } & Omit<FetchPoolParams, \"pageSize\">,\r\n  ): Promise<PoolsApiReturn> {\r\n    const {\r\n      mint1: propMint1,\r\n      mint2: propMint2,\r\n      type = PoolFetchType.All,\r\n      sort = \"default\",\r\n      order = \"desc\",\r\n      page = 1,\r\n    } = props;\r\n\r\n    const [mint1, mint2] = [\r\n      propMint1 ? solToWSol(propMint1).toBase58() : propMint1,\r\n      propMint2 && propMint2 !== \"undefined\" ? solToWSol(propMint2).toBase58() : \"\",\r\n    ];\r\n    const [baseMint, quoteMint] = mint2 && mint1 > mint2 ? [mint2, mint1] : [mint1, mint2];\r\n\r\n    const res = await this.api.get(\r\n      (this.urlConfigs.POOL_SEARCH_MINT || API_URLS.POOL_SEARCH_MINT) +\r\n        `?mint1=${baseMint}&mint2=${quoteMint}&poolType=${type}&poolSortField=${sort}&sortType=${order}&pageSize=100&page=${page}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async fetchFarmInfoById(props: { ids: string }): Promise<FormatFarmInfoOut[]> {\r\n    const { ids } = props;\r\n\r\n    const res = await this.api.get<FormatFarmInfoOut[]>(\r\n      (this.urlConfigs.FARM_INFO || API_URLS.FARM_INFO) + `?ids=${ids}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async fetchFarmKeysById(props: { ids: string }): Promise<FormatFarmKeyOut[]> {\r\n    const { ids } = props;\r\n\r\n    const res = await this.api.get<FormatFarmKeyOut[]>(\r\n      (this.urlConfigs.FARM_KEYS || API_URLS.FARM_KEYS) + `?ids=${ids}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async fetchAvailabilityStatus(): Promise<AvailabilityCheckAPI3> {\r\n    const res = await this.api.get<AvailabilityCheckAPI3>(\r\n      this.urlConfigs.CHECK_AVAILABILITY || API_URLS.CHECK_AVAILABILITY,\r\n    );\r\n    return res.data;\r\n  }\r\n}\r\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\r\nimport { WSOLMint, chunkArray, solToWSol } from \"./\";\r\nimport { createLogger } from \"./logger\";\r\nimport { MINT_SIZE, TOKEN_PROGRAM_ID, getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\r\n\r\ninterface MultipleAccountsJsonRpcResponse {\r\n  jsonrpc: string;\r\n  id: string;\r\n  error?: {\r\n    code: number;\r\n    message: string;\r\n  };\r\n  result: {\r\n    context: { slot: number };\r\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\r\n  };\r\n}\r\n\r\nexport interface GetMultipleAccountsInfoConfig {\r\n  batchRequest?: boolean;\r\n  commitment?: Commitment;\r\n  chunkCount?: number;\r\n}\r\n\r\nconst logger = createLogger(\"Raydium_accountInfo_util\");\r\n\r\nexport async function getMultipleAccountsInfo(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<(AccountInfo<Buffer> | null)[]> {\r\n  const {\r\n    batchRequest,\r\n    commitment = \"confirmed\",\r\n    chunkCount = 100,\r\n  } = {\r\n    batchRequest: false,\r\n    ...config,\r\n  };\r\n\r\n  const chunkedKeys = chunkArray(publicKeys, chunkCount);\r\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\r\n\r\n  if (batchRequest) {\r\n    const batch = chunkedKeys.map((keys) => {\r\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\r\n      return {\r\n        methodName: \"getMultipleAccounts\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const _batch = chunkArray(batch, 10);\r\n\r\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\r\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\r\n    ).flat();\r\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\r\n      if (unsafeRes.error)\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\r\n\r\n      return unsafeRes.result.value.map((accountInfo) => {\r\n        if (accountInfo) {\r\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\r\n\r\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\r\n\r\n          return {\r\n            data: Buffer.from(data[0], \"base64\"),\r\n            executable,\r\n            lamports,\r\n            owner: new PublicKey(owner),\r\n            rentEpoch,\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n    });\r\n  } else {\r\n    try {\r\n      results = (await Promise.all(\r\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\r\n      )) as (AccountInfo<Buffer> | null)[][];\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return results.flat();\r\n}\r\n\r\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\r\n  connection: Connection,\r\n  publicKeysWithCustomFlag: T[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\r\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\r\n    connection,\r\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\r\n    config,\r\n  );\r\n\r\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\r\n}\r\n\r\nexport enum AccountType {\r\n  Uninitialized,\r\n  Mint,\r\n  Account,\r\n}\r\nexport const ACCOUNT_TYPE_SIZE = 1;\r\n\r\nexport async function fetchMultipleMintInfos({\r\n  connection,\r\n  mints,\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  mints: PublicKey[];\r\n  config?: { batchRequest?: boolean };\r\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\r\n  if (mints.length === 0) return {};\r\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\r\n    connection,\r\n    mints.map((i) => ({ pubkey: solToWSol(i) })),\r\n    config,\r\n  );\r\n\r\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\r\n  for (const i of mintInfos) {\r\n    if (!i.accountInfo || i.accountInfo.data.length < MINT_SIZE) {\r\n      console.log(\"invalid mint account\", i.pubkey.toBase58());\r\n      continue;\r\n    }\r\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\r\n    mintK[i.pubkey.toString()] = {\r\n      ...t,\r\n      programId: i.accountInfo?.owner || TOKEN_PROGRAM_ID,\r\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\r\n    };\r\n  }\r\n  mintK[PublicKey.default.toBase58()] = mintK[WSOLMint.toBase58()];\r\n\r\n  return mintK;\r\n}\r\n","import { get, set } from \"lodash\";\r\n\r\nexport type ModuleName = \"Common.Api\";\r\n\r\nexport enum LogLevel {\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug,\r\n}\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n  private name: string;\r\n  constructor(params: { name: string; logLevel?: LogLevel }) {\r\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\r\n    this.name = params.name;\r\n  }\r\n\r\n  set level(logLevel: LogLevel) {\r\n    this.logLevel = logLevel;\r\n  }\r\n  get time(): string {\r\n    return Date.now().toString();\r\n  }\r\n  get moduleName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private isLogLevel(level: LogLevel): boolean {\r\n    return level <= this.logLevel;\r\n  }\r\n\r\n  public error(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Error)) return this;\r\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public logWithError(...props): Logger {\r\n    // this.error(...props)\r\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\r\n    throw new Error(msg);\r\n  }\r\n\r\n  public warning(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\r\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public info(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Info)) return this;\r\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public debug(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\r\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\r\n    return this;\r\n  }\r\n}\r\n\r\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\r\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\r\n\r\nexport function createLogger(moduleName: string): Logger {\r\n  let logger = get(moduleLoggers, moduleName);\r\n  if (!logger) {\r\n    // default level is error\r\n    const logLevel = get(moduleLevels, moduleName);\r\n\r\n    logger = new Logger({ name: moduleName, logLevel });\r\n    set(moduleLoggers, moduleName, logger);\r\n  }\r\n\r\n  return logger;\r\n}\r\n\r\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\r\n  set(moduleLevels, moduleName, level);\r\n\r\n  const logger = get(moduleLoggers, moduleName);\r\n  if (logger) logger.level = level;\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { CurrencyAmount, TokenAmount } from \"../module/amount\";\r\nimport { Currency } from \"../module/currency\";\r\nimport { Fraction } from \"../module/fraction\";\r\nimport { Percent } from \"../module/percent\";\r\nimport { Price } from \"../module/price\";\r\nimport { Token } from \"../module/token\";\r\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\nimport { parseBigNumberish } from \"./constant\";\r\nimport { mul } from \"./fractionUtil\";\r\nimport { notInnerObject } from \"./utility\";\r\n\r\nexport const BN_ZERO = new BN(0);\r\nexport const BN_ONE = new BN(1);\r\nexport const BN_TWO = new BN(2);\r\nexport const BN_THREE = new BN(3);\r\nexport const BN_FIVE = new BN(5);\r\nexport const BN_TEN = new BN(10);\r\nexport const BN_100 = new BN(100);\r\nexport const BN_1000 = new BN(1000);\r\nexport const BN_10000 = new BN(10000);\r\nexport type BigNumberish = BN | string | number | bigint;\r\nexport type Numberish = number | string | bigint | Fraction | BN;\r\n\r\nexport function tenExponential(shift: BigNumberish): BN {\r\n  return BN_TEN.pow(parseBigNumberish(shift));\r\n}\r\n\r\n/**\r\n *\r\n * @example\r\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\r\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\r\n */\r\nexport function parseNumberInfo(n: Numberish | undefined): {\r\n  denominator: string;\r\n  numerator: string;\r\n  sign?: string;\r\n  int?: string;\r\n  dec?: string;\r\n} {\r\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\r\n  if (n instanceof BN) {\r\n    return { numerator: n.toString(), denominator: \"1\" };\r\n  }\r\n\r\n  if (n instanceof Fraction) {\r\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\r\n  }\r\n\r\n  const s = String(n);\r\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  const denominator = \"1\" + \"0\".repeat(dec.length);\r\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\r\n  return { denominator, numerator, sign, int, dec };\r\n}\r\n\r\n// round up\r\nexport function divCeil(a: BN, b: BN): BN {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const dm = a.divmod(b);\r\n\r\n  // Fast case - exact division\r\n  if (dm.mod.isZero()) return dm.div;\r\n\r\n  // Round up\r\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\r\n}\r\n\r\nexport function shakeFractionDecimal(n: Fraction): string {\r\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  return `${sign}${int}`;\r\n}\r\n\r\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\r\n  if (n instanceof BN) return n;\r\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\r\n}\r\n\r\nexport function toFraction(value: Numberish): Fraction {\r\n  //  to complete math format(may have decimal), not int\r\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\r\n\r\n  if (value instanceof Price) return value.adjusted;\r\n\r\n  // to complete math format(may have decimal), not BN\r\n  if (value instanceof TokenAmount)\r\n    try {\r\n      return toFraction(value.toExact());\r\n    } catch {\r\n      return new Fraction(BN_ZERO);\r\n    }\r\n\r\n  // do not ideal with other fraction value\r\n  if (value instanceof Fraction) return value;\r\n\r\n  // wrap to Fraction\r\n  const n = String(value);\r\n  const details = parseNumberInfo(n);\r\n  return new Fraction(details.numerator, details.denominator);\r\n}\r\n\r\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\r\n}\r\n\r\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\r\n}\r\n\r\n/**\r\n * @example\r\n * toPercent(3.14) // => Percent { 314.00% }\r\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\r\n */\r\nexport function toPercent(\r\n  n: Numberish,\r\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\r\n): Percent {\r\n  const { numerator, denominator } = parseNumberInfo(n);\r\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\r\n}\r\n\r\nexport function toTokenPrice(params: {\r\n  token: TokenJson | Token | SplToken;\r\n  numberPrice: Numberish;\r\n  decimalDone?: boolean;\r\n}): Price {\r\n  const { token, numberPrice, decimalDone } = params;\r\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\r\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\r\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\r\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\r\n\r\n  return new Price({\r\n    baseToken: usdCurrency,\r\n    denominator: parsedDenominator.toString(),\r\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\r\n    numerator: parsedNumerator.toString(),\r\n  });\r\n}\r\n\r\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\r\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\r\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\r\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\r\n}\r\n\r\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\r\n  if (!price || !amount) return toUsdCurrency(0);\r\n  return toUsdCurrency(mul(amount, price)!);\r\n}\r\n\r\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\r\n  if (n == null) return undefined;\r\n  const { numerator, denominator } = parseNumberInfo(n.toString());\r\n  return new Fraction(numerator, denominator);\r\n}\r\n\r\nexport function isDecimal(val: unknown): boolean {\r\n  return val instanceof Decimal;\r\n}\r\n\r\nexport function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\r\n  // @ts-expect-error no need type for inner code\r\n  return isDecimal(info)\r\n    ? decimalToFraction(info as any)\r\n    : Array.isArray(info)\r\n    ? info.map((k) => recursivelyDecimalToFraction(k))\r\n    : notInnerObject(info)\r\n    ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\r\n    : info;\r\n}\r\n","/*\r\n *  decimal.js v10.3.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { BigNumberish, BN_TEN } from \"../common/bignumber\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common\";\r\nimport { Currency } from \"./currency\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_amount\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nexport function splitNumber(num: string, decimals: number): [string, string] {\r\n  let integral = \"0\";\r\n  let fractional = \"0\";\r\n\r\n  if (num.includes(\".\")) {\r\n    const splited = num.split(\".\");\r\n    if (splited.length === 2) {\r\n      [integral, fractional] = splited;\r\n      fractional = fractional.padEnd(decimals, \"0\");\r\n    } else {\r\n      logger.logWithError(`invalid number string, num: ${num}`);\r\n    }\r\n  } else {\r\n    integral = num;\r\n  }\r\n\r\n  // fix decimals is 0\r\n  return [integral, fractional.slice(0, decimals) || fractional];\r\n}\r\n\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token;\r\n  protected logger: Logger;\r\n\r\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.token = token;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n  public gt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\r\n    return new TokenAmount(this.token, this.raw.add(other.raw));\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\r\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.token.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n  protected logger: Logger;\r\n\r\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.currency = currency;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n\r\n  /**\r\n   * a greater than b\r\n   */\r\n  public gt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\r\n  }\r\n\r\n  public sub(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\r\n\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\r\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\r\nimport _toFarmat from \"toformat\";\r\n\r\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\r\ninterface FormatOptions {\r\n  decimalSeparator?: string;\r\n  groupSeparator?: string;\r\n  groupSize?: number;\r\n  fractionGroupSeparator?: string;\r\n  fractionGroupSize?: number;\r\n}\r\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\r\n  new (value: BigSource): WrappedBig;\r\n  (value: BigSource): WrappedBig;\r\n  (): WrappedBigConstructor;\r\n\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedBig extends Big {\r\n  add(n: BigSource): WrappedBig;\r\n  abs(): WrappedBig;\r\n  div(n: BigSource): WrappedBig;\r\n  minus(n: BigSource): WrappedBig;\r\n  mod(n: BigSource): WrappedBig;\r\n  mul(n: BigSource): WrappedBig;\r\n  plus(n: BigSource): WrappedBig;\r\n  pow(exp: number): WrappedBig;\r\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\r\n  sqrt(): WrappedBig;\r\n  sub(n: BigSource): WrappedBig;\r\n  times(n: BigSource): WrappedBig;\r\n  toFormat(): string;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\ntype DecimalConstructor = typeof Decimal;\r\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\r\n  new (value: Numeric): WrappedDecimal;\r\n  clone(config?: Config): WrappedDecimalConstructor;\r\n  config(config: Config): WrappedDecimal;\r\n  set(config: Config): WrappedDecimal;\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedDecimal extends Decimal {\r\n  absoluteValue(): WrappedDecimal;\r\n  abs(): WrappedDecimal;\r\n  dividedBy(y: Numeric): WrappedDecimal;\r\n  div(y: Numeric): WrappedDecimal;\r\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\r\n  idiv(y: Numeric): WrappedDecimal;\r\n  logarithm(base?: Numeric): WrappedDecimal;\r\n  log(base?: Numeric): WrappedDecimal;\r\n  minus(y: Numeric): WrappedDecimal;\r\n  sub(y: Numeric): WrappedDecimal;\r\n  modulo(y: Numeric): WrappedDecimal;\r\n  mod(y: Numeric): WrappedDecimal;\r\n  naturalExponetial(): WrappedDecimal;\r\n  exp(): WrappedDecimal;\r\n  naturalLogarithm(): WrappedDecimal;\r\n  ln(): WrappedDecimal;\r\n  negated(): WrappedDecimal;\r\n  neg(): WrappedDecimal;\r\n  plus(y: Numeric): WrappedDecimal;\r\n  add(y: Numeric): WrappedDecimal;\r\n  squareRoot(): WrappedDecimal;\r\n  sqrt(): WrappedDecimal;\r\n  times(y: Numeric): WrappedDecimal;\r\n  mul(y: Numeric): WrappedDecimal;\r\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\r\n  todp(dp?: number, rm?: number): WrappedDecimal;\r\n  toInteger(): WrappedDecimal;\r\n  toint(): WrappedDecimal;\r\n  toPower(y: Numeric): WrappedDecimal;\r\n  pow(y: Numeric): WrappedDecimal;\r\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\r\n  tosd(sd?: number, rm?: number): WrappedDecimal;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\nconst toFormat: {\r\n  (fn: BigConstructor): WrappedBigConstructor;\r\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\r\n} = _toFarmat;\r\nexport default toFormat;\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\nimport _Decimal from \"decimal.js-light\";\r\n\r\nimport { BigNumberish } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common/constant\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\n\r\nconst logger = createLogger(\"module/fraction\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nconst Decimal = toFormat(_Decimal);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\r\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\r\n  [Rounding.ROUND_UP]: _Big.roundUp,\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: BN;\r\n  public readonly denominator: BN;\r\n\r\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\r\n    this.numerator = parseBigNumberish(numerator);\r\n    this.denominator = parseBigNumberish(denominator);\r\n  }\r\n\r\n  public get quotient(): BN {\r\n    return this.numerator.div(this.denominator);\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  }\r\n\r\n  public add(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public sub(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public mul(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\r\n  }\r\n\r\n  public div(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\r\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\r\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding] || 1;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.numerator.isZero();\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { BigNumberish } from \"./bignumber\";\r\nimport { createLogger } from \"./logger\";\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nconst MAX_SAFE = 0x1fffffffffffff;\r\n\r\nexport function parseBigNumberish(value: BigNumberish): BN {\r\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\r\n  // BN\r\n  if (value instanceof BN) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === \"string\") {\r\n    if (value.match(/^-?[0-9]+$/)) {\r\n      return new BN(value);\r\n    }\r\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\r\n  }\r\n\r\n  if (typeof value === \"number\") {\r\n    if (value % 1) {\r\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\r\n    }\r\n\r\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\r\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\r\n    }\r\n\r\n    return new BN(String(value));\r\n  }\r\n\r\n  if (typeof value === \"bigint\") {\r\n    return new BN(value.toString());\r\n  }\r\n  logger.error(`invalid BigNumberish value: ${value}`);\r\n  return new BN(0); // never reach, because logWithError will throw error\r\n}","import { PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nexport const SOL_INFO: TokenInfo = {\r\n  chainId: 101,\r\n  address: PublicKey.default.toBase58(),\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"SOL\",\r\n  name: \"solana\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n\r\nexport const TOKEN_WSOL: TokenInfo = {\r\n  chainId: 101,\r\n  address: \"So11111111111111111111111111111111111111112\",\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"WSOL\",\r\n  name: \"Wrapped SOL\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\r\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\r\n\r\n/**\r\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n */\r\nexport interface TokenProps {\r\n  mint: PublicKeyish;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n  skipMint?: boolean;\r\n  isToken2022?: boolean;\r\n}\r\n\r\nexport class Token {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n  public readonly isToken2022: boolean;\r\n\r\n  public readonly mint: PublicKey;\r\n  public static readonly WSOL: Token = new Token({\r\n    ...TOKEN_WSOL,\r\n    mint: TOKEN_WSOL.address,\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\r\n   */\r\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\r\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\r\n      this.decimals = TOKEN_WSOL.decimals;\r\n      this.symbol = TOKEN_WSOL.symbol;\r\n      this.name = TOKEN_WSOL.name;\r\n      this.mint = new PublicKey(TOKEN_WSOL.address);\r\n      this.isToken2022 = false;\r\n      return;\r\n    }\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol || mint.toString().substring(0, 6);\r\n    this.name = name || mint.toString().substring(0, 6);\r\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\r\n    this.isToken2022 = isToken2022;\r\n  }\r\n\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.mint.equals(other.mint);\r\n  }\r\n}\r\n","import { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\ninterface AccountMetaProps {\r\n  pubkey: PublicKey;\r\n  isSigner?: boolean;\r\n  isWritable?: boolean;\r\n}\r\n\r\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\r\n  return {\r\n    pubkey,\r\n    isWritable,\r\n    isSigner,\r\n  };\r\n}\r\n\r\nexport const commonSystemAccountMeta = [\r\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n];\r\n\r\nexport type PublicKeyish = PublicKey | string;\r\n\r\nexport function validateAndParsePublicKey({\r\n  publicKey: orgPubKey,\r\n  transformSol,\r\n}: {\r\n  publicKey: PublicKeyish;\r\n  transformSol?: boolean;\r\n}): PublicKey {\r\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\r\n\r\n  if (publicKey instanceof PublicKey) {\r\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\r\n    return publicKey;\r\n  }\r\n\r\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\r\n\r\n  if (typeof publicKey === \"string\") {\r\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\r\n    try {\r\n      const key = new PublicKey(publicKey);\r\n      return key;\r\n    } catch {\r\n      throw new Error(\"invalid public key\");\r\n    }\r\n  }\r\n\r\n  throw new Error(\"invalid public key\");\r\n}\r\n\r\nexport function tryParsePublicKey(v: string): PublicKey | string {\r\n  try {\r\n    return new PublicKey(v);\r\n  } catch (e) {\r\n    return v;\r\n  }\r\n}\r\n\r\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\r\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\r\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\r\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\r\n\r\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\r\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\r\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\r\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\r\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\r\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\r\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\r\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\r\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\r\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\r\nexport const SOLMint = PublicKey.default;\r\n\r\nexport function solToWSol(mint: PublicKeyish): PublicKey {\r\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\r\n}\r\n","import { SOL_INFO } from \"../raydium/token/constant\";\r\n\r\nimport { Token } from \"./token\";\r\n\r\ninterface CurrencyProps {\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n/**\r\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n * The only instance of the base class `Currency` is SOL.\r\n */\r\nexport class Currency {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\r\n   * @param decimals - decimals of the currency\r\n   * @param symbol - symbol of the currency\r\n   * @param name - name of the currency\r\n   */\r\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { Rounding } from \"../common\";\r\nimport { Fraction } from \"./fraction\";\r\n\r\nexport const _100_PERCENT = new Fraction(new BN(100));\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { Rounding } from \"../common\";\r\nimport { BigNumberish, tenExponential } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_price\");\r\n\r\ninterface PriceProps {\r\n  baseToken: Token;\r\n  denominator: BigNumberish;\r\n  quoteToken: Token;\r\n  numerator: BigNumberish;\r\n}\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseToken: Token; // input i.e. denominator\r\n  public readonly quoteToken: Token; // output i.e. numerator\r\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n  public readonly scalar: Fraction;\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(params: PriceProps) {\r\n    const { baseToken, quoteToken, numerator, denominator } = params;\r\n    super(numerator, denominator);\r\n\r\n    this.baseToken = baseToken;\r\n    this.quoteToken = quoteToken;\r\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.mul(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price({\r\n      baseToken: this.quoteToken,\r\n      quoteToken: this.baseToken,\r\n      denominator: this.numerator,\r\n      numerator: this.denominator,\r\n    });\r\n  }\r\n\r\n  public mul(other: Price): Price {\r\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\r\n\r\n    const fraction = super.mul(other);\r\n    return new Price({\r\n      baseToken: this.baseToken,\r\n      quoteToken: other.quoteToken,\r\n      denominator: fraction.denominator,\r\n      numerator: fraction.numerator,\r\n    });\r\n  }\r\n\r\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\n\r\nimport { tryParsePublicKey } from \"./pubKey\";\r\n\r\nexport async function sleep(ms: number): Promise<void> {\r\n  new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function getTimestamp(): number {\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function notInnerObject(v: unknown): v is Record<string, any> {\r\n  return (\r\n    typeof v === \"object\" &&\r\n    v !== null &&\r\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\r\n  );\r\n}\r\n\r\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\r\n  // @ts-expect-error no need type for inner code\r\n  return typeof jsonInfo === \"string\"\r\n    ? tryParsePublicKey(jsonInfo)\r\n    : Array.isArray(jsonInfo)\r\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\r\n    : notInnerObject(jsonInfo)\r\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\r\n    : jsonInfo;\r\n}\r\n","/**\r\n * https://youmightnotneed.com/lodash/\r\n */\r\n\r\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\r\n  const tmp = [...arr];\r\n  if (chunkSize <= 0) return cache;\r\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\r\n  return cache;\r\n}\r\n\r\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\r\n}\r\n\r\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\r\n}\r\n\r\nexport function uniq<T>(arr: T[]): T[] {\r\n  return [...new Set(arr)];\r\n}\r\n","import { Keypair, PublicKey, Signer } from \"@solana/web3.js\";\r\n\r\ntype _Owner = Keypair | PublicKey;\r\n\r\nexport class Owner {\r\n  private readonly _owner: _Owner;\r\n\r\n  constructor(owner: _Owner) {\r\n    this._owner = owner;\r\n  }\r\n\r\n  get publicKey(): PublicKey {\r\n    if (Owner.isKeyPair(this._owner)) {\r\n      return this._owner.publicKey;\r\n    }\r\n\r\n    return this._owner;\r\n  }\r\n\r\n  get signer(): Signer | undefined {\r\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\r\n  }\r\n\r\n  get isKeyPair(): boolean {\r\n    return Owner.isKeyPair(this._owner);\r\n  }\r\n\r\n  get isPublicKey(): boolean {\r\n    return Owner.isPublicKey(this._owner);\r\n  }\r\n\r\n  static isKeyPair(owner: _Owner): owner is Keypair {\r\n    return (owner as Keypair).secretKey !== undefined;\r\n  }\r\n\r\n  static isPublicKey(owner: _Owner): owner is PublicKey {\r\n    return !Owner.isKeyPair(owner);\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { findProgramAddress } from \"./txTool/txUtils\";\r\n\r\nexport function getATAAddress(\r\n  owner: PublicKey,\r\n  mint: PublicKey,\r\n  programId?: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\r\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\r\n  );\r\n}\r\n","import {\r\n  Commitment,\r\n  ComputeBudgetProgram,\r\n  Connection,\r\n  EpochInfo,\r\n  Keypair,\r\n  PublicKey,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"../logger\";\r\nimport { CacheLTA } from \"./lookupTable\";\r\nimport { InstructionType } from \"./txType\";\r\n\r\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst logger = createLogger(\"Raydium_txUtil\");\r\n\r\nexport const MAX_BASE64_SIZE = 1644;\r\n\r\nexport function addComputeBudget(config: ComputeBudgetConfig): {\r\n  instructions: TransactionInstruction[];\r\n  instructionTypes: string[];\r\n} {\r\n  const ins: TransactionInstruction[] = [];\r\n  const insTypes: string[] = [];\r\n  if (config.microLamports) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\r\n    insTypes.push(InstructionType.SetComputeUnitPrice);\r\n  }\r\n  if (config.units) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\r\n    insTypes.push(InstructionType.SetComputeUnitLimit);\r\n  }\r\n\r\n  return {\r\n    instructions: ins,\r\n    instructionTypes: insTypes,\r\n  };\r\n}\r\n\r\nexport async function getRecentBlockHash(connection: Connection, propsCommitment?: Commitment): Promise<string> {\r\n  const commitment = propsCommitment ?? \"confirmed\";\r\n  return (await connection.getLatestBlockhash?.({ commitment }))?.blockhash;\r\n}\r\n\r\nexport async function confirmTransaction(connection: Connection, txId: string): Promise<string> {\r\n  connection.getSignatureStatuses([txId]);\r\n  return new Promise((resolve, reject) => {\r\n    const id = setTimeout(reject, 60 * 1000);\r\n    connection.onSignature(\r\n      txId,\r\n      (signatureResult) => {\r\n        clearTimeout(id);\r\n        if (!signatureResult.err) {\r\n          resolve(\"\");\r\n          return;\r\n        }\r\n        reject(Object.assign(signatureResult.err, { txId }));\r\n      },\r\n      \"confirmed\",\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Forecast transaction size\r\n */\r\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\r\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\r\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\r\n\r\n  const transaction = new Transaction();\r\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\r\n  transaction.feePayer = signers[0];\r\n  transaction.add(...instructions);\r\n\r\n  try {\r\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Simulates multiple instruction\r\n */\r\n/**\r\n * Simulates multiple instruction\r\n */\r\nexport async function simulateMultipleInstruction(\r\n  connection: Connection,\r\n  instructions: TransactionInstruction[],\r\n  keyword: string,\r\n  batchRequest = true,\r\n): Promise<string[]> {\r\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\r\n\r\n  const transactions: Transaction[] = [];\r\n\r\n  let transaction = new Transaction();\r\n  transaction.feePayer = feePayer;\r\n\r\n  for (const instruction of instructions) {\r\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\r\n      transactions.push(transaction);\r\n      transaction = new Transaction();\r\n      transaction.feePayer = feePayer;\r\n    }\r\n    transaction.add(instruction);\r\n  }\r\n  if (transaction.instructions.length > 0) {\r\n    transactions.push(transaction);\r\n  }\r\n\r\n  let results: SimulatedTransactionResponse[] = [];\r\n\r\n  try {\r\n    results = await simulateTransaction(connection, transactions, batchRequest);\r\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  const logs: string[] = [];\r\n  for (const result of results) {\r\n    logger.debug(\"simulate result:\", result);\r\n\r\n    if (result.logs) {\r\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\r\n      logger.debug(\"filteredLog:\", logs);\r\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\r\n      logs.push(...filteredLog);\r\n    }\r\n  }\r\n\r\n  return logs;\r\n}\r\n\r\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\r\n  const results = log.match(/{[\"\\w:,]+}/g);\r\n  if (!results || results.length !== 1) {\r\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\r\n  }\r\n\r\n  return results[0];\r\n}\r\n\r\nexport function parseSimulateValue(log: string, key: string): any {\r\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\r\n\r\n  const results = reg.exec(log);\r\n  if (!results || results.length !== 2) {\r\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\r\n  }\r\n\r\n  return results[1];\r\n}\r\n\r\nexport interface ProgramAddress {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n}\r\nexport function findProgramAddress(\r\n  seeds: Array<Buffer | Uint8Array>,\r\n  programId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\r\n  return { publicKey, nonce };\r\n}\r\n\r\nexport async function simulateTransaction(\r\n  connection: Connection,\r\n  transactions: Transaction[],\r\n  batchRequest?: boolean,\r\n): Promise<any[]> {\r\n  let results: any[] = [];\r\n  if (batchRequest) {\r\n    const getLatestBlockhash = await connection.getLatestBlockhash();\r\n\r\n    const encodedTransactions: string[] = [];\r\n    for (const transaction of transactions) {\r\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\r\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const message = transaction._compile();\r\n      const signData = message.serialize();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const wireTransaction = transaction._serialize(signData);\r\n      const encodedTransaction = wireTransaction.toString(\"base64\");\r\n\r\n      encodedTransactions.push(encodedTransaction);\r\n    }\r\n\r\n    const batch = encodedTransactions.map((keys) => {\r\n      const args = connection._buildArgs([keys], undefined, \"base64\");\r\n      return {\r\n        methodName: \"simulateTransaction\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const reqData: { methodName: string; args: any[] }[][] = [];\r\n    const itemReqIndex = 20;\r\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\r\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    results = await (\r\n      await Promise.all(\r\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\r\n      )\r\n    ).flat();\r\n  } else {\r\n    try {\r\n      results = await Promise.all(\r\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function checkLegacyTxSize({\r\n  instructions,\r\n  payer,\r\n  signers,\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  signers: PublicKey[];\r\n}): boolean {\r\n  return forecastTransactionSize(instructions, [payer, ...signers]);\r\n}\r\n\r\nexport function checkV0TxSize({\r\n  instructions,\r\n  payer,\r\n  lookupTableAddressAccount,\r\n  recentBlockhash = Keypair.generate().publicKey.toString(),\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  lookupTableAddressAccount?: CacheLTA;\r\n  recentBlockhash?: string;\r\n}): boolean {\r\n  const transactionMessage = new TransactionMessage({\r\n    payerKey: payer,\r\n    recentBlockhash,\r\n    instructions,\r\n  });\r\n\r\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\r\n  try {\r\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\r\n    return buildLength < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\r\n  time: 0,\r\n  data: undefined,\r\n};\r\n\r\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\r\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\r\n    const data = await connection.getEpochInfo();\r\n    epochInfoCache = {\r\n      time: Date.now(),\r\n      data,\r\n    };\r\n    return data;\r\n  } else {\r\n    return epochInfoCache.data;\r\n  }\r\n}\r\n\r\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\r\n  if (Buffer.isBuffer(arr)) {\r\n    return arr;\r\n  } else if (arr instanceof Uint8Array) {\r\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\r\n  } else {\r\n    return Buffer.from(arr);\r\n  }\r\n};\r\n\r\nexport const txToBase64 = (transaction: Transaction | VersionedTransaction): string => {\r\n  let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  try {\r\n    return serialized instanceof Buffer ? serialized.toString(\"base64\") : Buffer.from(serialized).toString(\"base64\");\r\n  } catch {\r\n    return serialized.toString(\"base64\");\r\n  }\r\n};\r\n\r\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\r\n  const allBase64: string[] = [];\r\n  transactions.forEach((transaction) => {\r\n    if (transaction instanceof Transaction) {\r\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\r\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\r\n    }\r\n    allBase64.push(txToBase64(transaction));\r\n  });\r\n  console.log(\"simulate tx string:\", allBase64);\r\n\r\n  return allBase64;\r\n}\r\n\r\nexport function transformTxToBase64(tx: Transaction | VersionedTransaction): string {\r\n  let serialized = tx.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (tx instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  return serialized.toString(\"base64\");\r\n}\r\n","export enum TxVersion {\r\n  \"V0\",\r\n  \"LEGACY\",\r\n}\r\n\r\nexport const InstructionType = {\r\n  CreateAccount: \"CreateAccount\",\r\n  InitAccount: \"InitAccount\",\r\n  CreateATA: \"CreateATA\",\r\n  CloseAccount: \"CloseAccount\",\r\n  TransferAmount: \"TransferAmount\",\r\n  InitMint: \"InitMint\",\r\n  MintTo: \"MintTo\",\r\n\r\n  InitMarket: \"InitMarket\", // create market main ins\r\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\r\n\r\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\r\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\r\n\r\n  // CLMM\r\n  ClmmCreatePool: \"ClmmCreatePool\",\r\n  ClmmOpenPosition: \"ClmmOpenPosition\",\r\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\r\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\r\n  ClmmClosePosition: \"ClmmClosePosition\",\r\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\r\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\r\n  ClmmInitReward: \"ClmmInitReward\",\r\n  ClmmSetReward: \"ClmmSetReward\",\r\n  ClmmCollectReward: \"ClmmCollectReward\",\r\n  ClmmLockPosition: \"ClmmLockPosition\",\r\n  ClmmHarvestLockPosition: \"ClmmHarvestLockPosition\",\r\n\r\n  AmmV4Swap: \"AmmV4Swap\",\r\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\r\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\r\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\r\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\r\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\r\n  AmmV4CreatePool: \"AmmV4CreatePool\",\r\n  AmmV4InitPool: \"AmmV4InitPool\",\r\n\r\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\r\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\r\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\r\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\r\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\r\n\r\n  RouteSwap: \"RouteSwap\",\r\n  RouteSwap1: \"RouteSwap1\",\r\n  RouteSwap2: \"RouteSwap2\",\r\n\r\n  FarmV3Deposit: \"FarmV3Deposit\",\r\n  FarmV3Withdraw: \"FarmV3Withdraw\",\r\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\r\n\r\n  FarmV4Withdraw: \"FarmV4Withdraw\",\r\n\r\n  FarmV5Deposit: \"FarmV5Deposit\",\r\n  FarmV5Withdraw: \"FarmV5Withdraw\",\r\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\r\n\r\n  FarmV6Deposit: \"FarmV6Deposit\",\r\n  FarmV6Withdraw: \"FarmV6Withdraw\",\r\n  FarmV6Create: \"FarmV6Create\",\r\n  FarmV6Restart: \"FarmV6Restart\",\r\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\r\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\r\n\r\n  CpmmCreatePool: \"CpmmCreatePool\",\r\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\r\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\r\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\r\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\r\n\r\n  CpmmLockLp: \"CpmmLockLp\",\r\n  CpmmCollectLockFee: \"CpmmCollectLockFee\",\r\n  TransferTip: \"TransferTip\",\r\n\r\n  NonceAccount: \"NonceAccount\",\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\n// raydium\r\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\r\n// temp fusion\r\nexport const FARM_PROGRAM_ID_V4 = new PublicKey(\"CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T\");\r\n// \"fusion\"\r\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\r\n// echosystem\r\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\r\n\r\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\r\n\r\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\r\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\r\n\r\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\r\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\r\nexport const LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\r\nexport const CLMM_LOCK_PROGRAM_ID = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const CLMM_LOCK_AUTH_ID = new PublicKey(\"kN1kEznaF5Xbd8LYuqtEFcxzWSBk5Fv6ygX6SqEGJVy\");\r\n\r\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\r\nexport const FEE_DESTINATION_ID = new PublicKey(\"7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5\");\r\n\r\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\r\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\r\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\r\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\r\n\r\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C\");\r\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL\");\r\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8\");\r\n\r\nexport const DEV_CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMDWBwJDtYax9qW7AyRuVC19Cc4L4Vcy4n2BHAbHkCW\");\r\nexport const DEV_CREATE_CPMM_POOL_AUTH = new PublicKey(\"7rQ1QFNosMkUCuh7Z7fPbTHvh73b68sQYdirycEzJVuw\");\r\nexport const DEV_CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"G11FKBRaAkHAKuLCgLM6K6NUc9rTjPAznRCjZifrTQe2\");\r\n\r\nexport const LOCK_CPMM_PROGRAM = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const DEV_LOCK_CPMM_PROGRAM = new PublicKey(\"DLockwT7X7sxtLmGH9g5kmfcjaBtncdbUmi738m5bvQC\");\r\n\r\nexport const LOCK_CPMM_AUTH = new PublicKey(\"3f7GcQFG397GAaEnv51zR6tsTVihYRydnydDD1cXekxH\");\r\nexport const DEV_LOCK_CPMM_AUTH = new PublicKey(\"7AFUeLVRjBfzqK3tTGw8hN48KLQWSk6DTE8xprWdPqix\");\r\n\r\nexport const LAUNCHPAD_PROGRAM = new PublicKey(\"LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj\");\r\nexport const LAUNCHPAD_AUTH = new PublicKey(\"WLHv2UAZm6z4KyaaELi5pjdbJh6RESMva1Rnn8pJVVh\");\r\n\r\nexport const DEV_LAUNCHPAD_PROGRAM = new PublicKey(\"LanD8FpTBBvzZFXjTxsAoipkFsxPUCDB4qAqKxYDiNP\");\r\nexport const DEV_LAUNCHPAD_AUTH = new PublicKey(\"HYNHiyKJ3gGVFvyxJAurK7qr7P2o5J9THmvCGMdULtpW\");\r\n\r\nexport const IDO_ALL_PROGRAM = {\r\n  IDO_PROGRAM_ID_V1,\r\n  IDO_PROGRAM_ID_V2,\r\n  IDO_PROGRAM_ID_V3,\r\n  IDO_PROGRAM_ID_V4,\r\n};\r\n\r\nexport const ALL_PROGRAM_ID = {\r\n  AMM_V4,\r\n  AMM_STABLE,\r\n  CLMM_PROGRAM_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_LOCK_AUTH_ID,\r\n\r\n  FARM_PROGRAM_ID_V3,\r\n  FARM_PROGRAM_ID_V5,\r\n  FARM_PROGRAM_ID_V6,\r\n\r\n  OPEN_BOOK_PROGRAM,\r\n  SERUM_PROGRAM_ID_V3,\r\n\r\n  UTIL1216,\r\n\r\n  Router,\r\n\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  LOCK_CPMM_PROGRAM,\r\n  LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH,\r\n};\r\n\r\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\r\n\r\nexport const DEVNET_PROGRAM_ID = {\r\n  SERUM_MARKET: PublicKey.default,\r\n  OPENBOOK_MARKET: new PublicKey(\"EoTcMgcDRTJVZDMZWBoU6rhYHZfkNTVEAfz3uUJRcYGj\"),\r\n\r\n  UTIL1216: PublicKey.default,\r\n\r\n  FarmV3: new PublicKey(\"85BFyr98MbCUU9MVTEgzx1nbhWACbJqLzho6zd6DZcWL\"),\r\n  FarmV5: new PublicKey(\"EcLzTrNg9V7qhcdyXDe2qjtPkiGzDM2UbdRaeaadU5r2\"),\r\n  FarmV6: new PublicKey(\"Farm2hJLcqPtPg8M4rR6DMrsRNc5TPm5Cs4bVQrMe2T7\"),\r\n\r\n  AmmV4: new PublicKey(\"HWy1jotHpo6UqeQxx49dpYYdQB8wj9Qk9MdxwjLvDHB8\"),\r\n  AmmStable: new PublicKey(\"DDg4VmQaJV9ogWce7LpcjBA9bv22wRp5uaTPa5pGjijF\"),\r\n\r\n  CLMM: new PublicKey(\"devi51mZmdwUJGU9hjN27vEz64Gps7uUefqxg27EAtH\"),\r\n  CLMM_LOCK_PROGRAM_ID: new PublicKey(\"DLockwT7X7sxtLmGH9g5kmfcjaBtncdbUmi738m5bvQC\"),\r\n  CLMM_LOCK_AUTH_ID: new PublicKey(\"8qmHNvu2Kr2C7U8mJL4Vz1vTDxMhVuXKREwU7TNoaVEo\"),\r\n\r\n  Router: new PublicKey(\"BVChZ3XFEwTMUk1o9i3HAf91H6mFxSwa5X2wFAWhYPhU\"),\r\n\r\n  CREATE_CPMM_POOL_PROGRAM: DEV_CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH: DEV_CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC: DEV_CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  FEE_DESTINATION_ID: new PublicKey(\"3XMrhbv989VxAMi3DErLV9eJht1pHppW5LbKxe9fkEFR\"),\r\n\r\n  LOCK_CPMM_PROGRAM: DEV_LOCK_CPMM_PROGRAM,\r\n  LCOK_CPMM_AUTH: DEV_LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM: DEV_LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH: DEV_LAUNCHPAD_AUTH,\r\n};\r\n","import { EpochInfo } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { TransferFee, TransferFeeConfig } from \"@solana/spl-token\";\r\n\r\nimport { TransferFeeDataBaseType } from \"../api/type\";\r\nimport { GetTransferAmountFee } from \"../raydium/type\";\r\n\r\nconst POINT = 10_000;\r\nexport function getTransferAmountFee(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function getTransferAmountFeeV2(\r\n  amount: BN,\r\n  _feeConfig: TransferFeeDataBaseType | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (_feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const feeConfig = {\r\n    ..._feeConfig,\r\n    olderTransferFee: {\r\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\r\n    },\r\n    newerTransferFee: {\r\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\r\n    },\r\n  };\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function minExpirationTime(\r\n  expirationTime1: number | undefined,\r\n  expirationTime2: number | undefined,\r\n): number | undefined {\r\n  if (expirationTime1 === undefined) return expirationTime2;\r\n  if (expirationTime2 === undefined) return expirationTime1;\r\n\r\n  return Math.min(expirationTime1, expirationTime2);\r\n}\r\n\r\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\r\n  const { div, mod } = bn1.divmod(bn2);\r\n\r\n  if (mod.gt(new BN(0))) {\r\n    return div.add(new BN(1));\r\n  } else {\r\n    return div;\r\n  }\r\n}\r\n\r\nexport function ceilDivBN(amountA: BN, amountB: BN): BN {\r\n  if (amountA.isZero()) return new BN(0);\r\n\r\n  const quotient = amountA.div(amountB);\r\n\r\n  if (quotient.isZero()) return new BN(1);\r\n\r\n  const remainder = amountA.mod(amountB);\r\n  if (remainder.gt(new BN(0))) {\r\n    return quotient.add(new BN(1));\r\n  }\r\n  return quotient;\r\n}\r\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\r\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\r\n\r\nexport interface CacheLTA {\r\n  [key: string]: AddressLookupTableAccount;\r\n}\r\n\r\nexport async function getMultipleLookupTableInfo({\r\n  connection,\r\n  address,\r\n}: {\r\n  connection: Connection;\r\n  address: PublicKey[];\r\n}): Promise<CacheLTA> {\r\n  const dataInfos = await getMultipleAccountsInfo(\r\n    connection,\r\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\r\n  );\r\n\r\n  const outDict: CacheLTA = {};\r\n  for (let i = 0; i < address.length; i++) {\r\n    const info = dataInfos[i];\r\n    const key = address[i];\r\n    if (!info) continue;\r\n    const lookupAccount = new AddressLookupTableAccount({\r\n      key,\r\n      state: AddressLookupTableAccount.deserialize(info.data),\r\n    });\r\n    outDict[key.toString()] = lookupAccount;\r\n    LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n  }\r\n\r\n  return outDict;\r\n}\r\n\r\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\r\n  \"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\": new AddressLookupTableAccount({\r\n    key: new PublicKey(\"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\"),\r\n    state: AddressLookupTableAccount.deserialize(\r\n      Buffer.from(\r\n        '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',\r\n        \"base64\",\r\n      ),\r\n    ),\r\n  }),\r\n};\r\n","import {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  sendAndConfirmTransaction,\r\n  SignatureResult,\r\n  Signer,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\nimport axios from \"axios\";\r\n\r\nimport { Api } from \"../../api\";\r\nimport { ComputeBudgetConfig, SignAllTransactions, TxTipConfig } from \"../../raydium/type\";\r\nimport { Cluster } from \"../../solana\";\r\nimport { Owner } from \"../owner\";\r\nimport { CacheLTA, getMultipleLookupTableInfo, LOOKUP_TABLE_CACHE } from \"./lookupTable\";\r\nimport { InstructionType, TxVersion } from \"./txType\";\r\nimport {\r\n  addComputeBudget,\r\n  checkLegacyTxSize,\r\n  checkV0TxSize,\r\n  confirmTransaction,\r\n  getRecentBlockHash,\r\n  printSimulate,\r\n} from \"./txUtils\";\r\n\r\ninterface SolanaFeeInfo {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  priorityTx: number;\r\n  nonVotes: number;\r\n  priorityRatio: number;\r\n  avgCuPerBlock: number;\r\n  blockspaceUsageRatio: number;\r\n}\r\ntype SolanaFeeInfoJson = {\r\n  \"1\": SolanaFeeInfo;\r\n  \"5\": SolanaFeeInfo;\r\n  \"15\": SolanaFeeInfo;\r\n};\r\n\r\ninterface ExecuteParams {\r\n  skipPreflight?: boolean;\r\n  recentBlockHash?: string;\r\n  sendAndConfirm?: boolean;\r\n  notSendToRpc?: boolean;\r\n}\r\n\r\ninterface TxBuilderInit {\r\n  connection: Connection;\r\n  feePayer: PublicKey;\r\n  cluster: Cluster;\r\n  owner?: Owner;\r\n  blockhashCommitment?: Commitment;\r\n  loopMultiTxStatus?: boolean;\r\n  api?: Api;\r\n  signAllTransactions?: SignAllTransactions;\r\n}\r\n\r\nexport interface AddInstructionParam {\r\n  addresses?: Record<string, PublicKey>;\r\n  instructions?: TransactionInstruction[];\r\n  endInstructions?: TransactionInstruction[];\r\n  lookupTableAddress?: string[];\r\n  signers?: Signer[];\r\n  instructionTypes?: string[];\r\n  endInstructionTypes?: string[];\r\n}\r\n\r\nexport interface TxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transaction: Transaction;\r\n  instructionTypes: string[];\r\n  signers: Signer[];\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transaction: VersionedTransaction;\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\r\n}\r\n\r\ntype TxUpdateParams = {\r\n  txId: string;\r\n  status: \"success\" | \"error\" | \"sent\";\r\n  signedTx: Transaction | VersionedTransaction;\r\n};\r\nexport interface MultiTxExecuteParam extends ExecuteParams {\r\n  sequentially: boolean;\r\n  skipTxCount?: number;\r\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\r\n}\r\nexport interface MultiTxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transactions: Transaction[];\r\n  instructionTypes: string[];\r\n  signers: Signer[][];\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface MultiTxV0BuildData<T = Record<string, any>>\r\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transactions: VersionedTransaction[];\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\r\n}\r\n\r\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? MultiTxBuildData<O>\r\n  : MultiTxV0BuildData<O>;\r\n\r\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? TxBuildData<O>\r\n  : TxV0BuildData<O>;\r\n\r\nconst LOOP_INTERVAL = 2000;\r\n\r\nexport class TxBuilder {\r\n  private connection: Connection;\r\n  private owner?: Owner;\r\n  private instructions: TransactionInstruction[] = [];\r\n  private endInstructions: TransactionInstruction[] = [];\r\n  private lookupTableAddress: string[] = [];\r\n  private signers: Signer[] = [];\r\n  private instructionTypes: string[] = [];\r\n  private endInstructionTypes: string[] = [];\r\n  private feePayer: PublicKey;\r\n  private cluster: Cluster;\r\n  private signAllTransactions?: SignAllTransactions;\r\n  private blockhashCommitment?: Commitment;\r\n  private loopMultiTxStatus: boolean;\r\n\r\n  constructor(params: TxBuilderInit) {\r\n    this.connection = params.connection;\r\n    this.feePayer = params.feePayer;\r\n    this.signAllTransactions = params.signAllTransactions;\r\n    this.owner = params.owner;\r\n    this.cluster = params.cluster;\r\n    this.blockhashCommitment = params.blockhashCommitment;\r\n    this.loopMultiTxStatus = !!params.loopMultiTxStatus;\r\n  }\r\n\r\n  get AllTxData(): {\r\n    instructions: TransactionInstruction[];\r\n    endInstructions: TransactionInstruction[];\r\n    signers: Signer[];\r\n    instructionTypes: string[];\r\n    endInstructionTypes: string[];\r\n    lookupTableAddress: string[];\r\n  } {\r\n    return {\r\n      instructions: this.instructions,\r\n      endInstructions: this.endInstructions,\r\n      signers: this.signers,\r\n      instructionTypes: this.instructionTypes,\r\n      endInstructionTypes: this.endInstructionTypes,\r\n      lookupTableAddress: this.lookupTableAddress,\r\n    };\r\n  }\r\n\r\n  get allInstructions(): TransactionInstruction[] {\r\n    return [...this.instructions, ...this.endInstructions];\r\n  }\r\n\r\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\r\n    const json = (\r\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\r\n    ).data;\r\n    const { avg } = json?.[15] ?? {};\r\n    if (!avg) return undefined;\r\n    return {\r\n      units: 600000,\r\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\r\n    };\r\n  }\r\n\r\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\r\n    if (config) {\r\n      const { instructions, instructionTypes } = addComputeBudget(config);\r\n      this.instructions.unshift(...instructions);\r\n      this.instructionTypes.unshift(...instructionTypes);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public addTipInstruction(tipConfig?: TxTipConfig): boolean {\r\n    if (tipConfig) {\r\n      this.endInstructions.push(\r\n        SystemProgram.transfer({\r\n          fromPubkey: tipConfig.feePayer ?? this.feePayer,\r\n          toPubkey: new PublicKey(tipConfig.address),\r\n          lamports: BigInt(tipConfig.amount.toString()),\r\n        }),\r\n      );\r\n      this.endInstructionTypes.push(InstructionType.TransferTip);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async calComputeBudget({\r\n    config: propConfig,\r\n    defaultIns,\r\n  }: {\r\n    config?: ComputeBudgetConfig;\r\n    defaultIns?: TransactionInstruction[];\r\n  }): Promise<void> {\r\n    try {\r\n      const config = propConfig || (await this.getComputeBudgetConfig());\r\n      if (this.addCustomComputeBudget(config)) return;\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    } catch {\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    }\r\n  }\r\n\r\n  public addInstruction({\r\n    instructions = [],\r\n    endInstructions = [],\r\n    signers = [],\r\n    instructionTypes = [],\r\n    endInstructionTypes = [],\r\n    lookupTableAddress = [],\r\n  }: AddInstructionParam): TxBuilder {\r\n    this.instructions.push(...instructions);\r\n    this.endInstructions.push(...endInstructions);\r\n    this.signers.push(...signers);\r\n    this.instructionTypes.push(...instructionTypes);\r\n    this.endInstructionTypes.push(...endInstructionTypes);\r\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\r\n    return this;\r\n  }\r\n\r\n  public async versionBuild<O = Record<string, any>>(\r\n    {\r\n      txVersion,\r\n      extInfo,\r\n    }: {\r\n      txVersion?: TxVersion;\r\n      extInfo?: O;\r\n    },\r\n    nonce?: string,\r\n  ): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0({ ...(extInfo || {}) }, nonce)) as MakeTxData<TxVersion.V0, O>;\r\n    return this.build<O>(extInfo, nonce) as MakeTxData<TxVersion.LEGACY, O>;\r\n  }\r\n\r\n  public build<O = Record<string, any>>(extInfo?: O, nonce?: string): MakeTxData<TxVersion.LEGACY, O> {\r\n    const transaction = new Transaction();\r\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\r\n    transaction.feePayer = this.feePayer;\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        const recentBlockHash =\r\n          propBlockHash ?? nonce ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        transaction.recentBlockhash = recentBlockHash;\r\n        if (this.signers.length) transaction.sign(...this.signers);\r\n\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = sendAndConfirm\r\n            ? await sendAndConfirmTransaction(\r\n                this.connection,\r\n                transaction,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              )\r\n            : await this.connection.sendRawTransaction(transaction.serialize(), { skipPreflight });\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(...this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || ({} as O),\r\n    };\r\n  }\r\n\r\n  public buildMultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\r\n    extInfo?: T;\r\n  }): MultiTxBuildData {\r\n    const { extraPreBuildData = [], extInfo } = params;\r\n    const { transaction } = this.build(extInfo);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\r\n\r\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            let i = 0;\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) continue;\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                tx.recentBlockhash = recentBlockHash;\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\r\n            tx.recentBlockhash = recentBlockHash;\r\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n            return tx;\r\n          });\r\n          printSimulate(partialSignedTxs);\r\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return {\r\n              txIds,\r\n              signedTxs,\r\n            };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\r\n    extraPreBuildData,\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\r\n    txVersion?: T;\r\n    extInfo?: O;\r\n  }): Promise<MakeMultiTxData<T, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0MultiTx({\r\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\r\n        buildProps: extInfo || {},\r\n      })) as MakeMultiTxData<T, O>;\r\n    return this.buildMultiTx<O>({\r\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\r\n      extInfo,\r\n    }) as MakeMultiTxData<T, O>;\r\n  }\r\n\r\n  public async buildV0<O = Record<string, any>>(\r\n    props?: O & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    },\r\n    nonce?: string,\r\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\r\n    const {\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      forerunCreate,\r\n      recentBlockhash: propRecentBlockhash,\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    if (needCacheLTA.length > 0) {\r\n      const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n      for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n    }\r\n\r\n    const recentBlockhash =\r\n      nonce ??\r\n      (forerunCreate\r\n        ? PublicKey.default.toBase58()\r\n        : propRecentBlockhash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment)));\r\n    const messageV0 = new TransactionMessage({\r\n      payerKey: this.feePayer,\r\n      recentBlockhash,\r\n      instructions: [...this.allInstructions],\r\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n    const transaction = new VersionedTransaction(messageV0);\r\n\r\n    transaction.sign(this.signers);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\r\n          if (sendAndConfirm) {\r\n            await confirmTransaction(this.connection, txId);\r\n          }\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendTransaction(txs[0], { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: (extInfo || {}) as O,\r\n    };\r\n  }\r\n\r\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\r\n    buildProps?: T & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    };\r\n  }): Promise<MultiTxV0BuildData> {\r\n    const { extraPreBuildData = [], buildProps } = params;\r\n    const { transaction } = await this.buildV0(buildProps);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\r\n\r\n    const allTransactions: VersionedTransaction[] = [\r\n      transaction,\r\n      ...filterExtraBuildData.map((data) => data.transaction),\r\n    ];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach(async (tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      buildProps,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: buildProps || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuild(\r\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig; splitIns?: TransactionInstruction[] },\r\n  ): Promise<MultiTxBuildData> {\r\n    const { splitIns = [], computeBudgetConfig, ...extInfo } = props || {};\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n\r\n    const allTransactions: Transaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      const _signerStrs = new Set<string>(\r\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\r\n\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer }) ||\r\n          checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          checkLegacyTxSize({\r\n            instructions: computeBudgetConfig\r\n              ? [...computeBudgetData.instructions, ...instructionQueue]\r\n              : [...instructionQueue],\r\n            payer: this.feePayer,\r\n            signers: _signer,\r\n          })\r\n        ) {\r\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n        } else {\r\n          allTransactions.push(new Transaction().add(...instructionQueue));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        checkLegacyTxSize({\r\n          instructions: computeBudgetConfig\r\n            ? [...computeBudgetData.instructions, ...instructionQueue]\r\n            : [...instructionQueue],\r\n          payer: this.feePayer,\r\n          signers: _signers.map((s) => s.publicKey),\r\n        })\r\n      ) {\r\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n      } else {\r\n        allTransactions.push(new Transaction().add(...instructionQueue));\r\n      }\r\n      allSigners.push(_signers);\r\n    }\r\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        allTransactions.forEach(async (tx, idx) => {\r\n          tx.recentBlockhash = recentBlockHash;\r\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n              }\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuildV0(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                console.log(\"skip tx: \", i);\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\r\n","export const API_URLS = {\r\n  BASE_HOST: \"https://api-v3.raydium.io\",\r\n  OWNER_BASE_HOST: \"https://owner-v1.raydium.io\",\r\n  SERVICE_BASE_HOST: \"https://service.raydium.io\",\r\n  MONITOR_BASE_HOST: \"https://monitor.raydium.io\",\r\n  SERVICE_1_BASE_HOST: \"https://service-v1.raydium.io\",\r\n\r\n  SEND_TRANSACTION: \"/send-transaction\",\r\n  FARM_ARP: \"/main/farm/info\",\r\n  FARM_ARP_LINE: \"/main/farm-apr-tv\",\r\n\r\n  CLMM_CONFIG: \"/main/clmm-config\",\r\n  CPMM_CONFIG: \"/main/cpmm-config\",\r\n\r\n  VERSION: \"/main/version\",\r\n\r\n  // api v3\r\n  CHECK_AVAILABILITY: \"/v3/main/AvailabilityCheckAPI\",\r\n  RPCS: \"/main/rpcs\",\r\n  INFO: \"/main/info\",\r\n  STAKE_POOLS: \"/main/stake-pools\",\r\n  CHAIN_TIME: \"/main/chain-time\",\r\n\r\n  TOKEN_LIST: \"/mint/list\",\r\n  MINT_INFO_ID: \"/mint/ids\",\r\n\r\n  JUP_TOKEN_LIST: \"https://lite-api.jup.ag/tokens/v1/tagged/verified\",\r\n  /**\r\n   * poolType: {all, concentrated, standard, allFarm, concentratedFarm, standardFarm}\r\n   * poolSortField: {liquidity | volume_24h / 7d / 30d | fee_24h / 7d / 30d | apr_24h / 7d / 30d}\r\n   * sortType: {desc/asc}\r\n   * page: number\r\n   * pageSize: number\r\n   */\r\n  POOL_LIST: \"/pools/info/list\",\r\n  /**\r\n   * ?ids=idList.join(',')\r\n   */\r\n  POOL_SEARCH_BY_ID: \"/pools/info/ids\",\r\n  /**\r\n   * mint1/mint2: search pool by mint\r\n   * poolSortField: {liquidity | volume_24h / 7d / 30d | fee_24h / 7d / 30d | apr_24h / 7d / 30d}\r\n   * poolType: {all, concentrated, standard, allFarm, concentratedFarm, standardFarm}\r\n   * sortType: {desc/asc}\r\n   * page: number\r\n   * pageSize: number\r\n   */\r\n  POOL_SEARCH_MINT: \"/pools/info/mint\",\r\n  /** ?lps=lpList.join(',') */\r\n  POOL_SEARCH_LP: \"/pools/info/lps\",\r\n  /** ?ids=idList.join(',') */\r\n  POOL_KEY_BY_ID: \"/pools/key/ids\",\r\n  /** ?id=string */\r\n  POOL_LIQUIDITY_LINE: \"/pools/line/liquidity\",\r\n  POOL_POSITION_LINE: \"/pools/line/position\",\r\n\r\n  FARM_INFO: \"/farms/info/ids\",\r\n  /** ?lp=string&pageSize=100&page=number */\r\n  FARM_LP_INFO: \"/farms/info/lp\",\r\n  FARM_KEYS: \"/farms/key/ids\",\r\n\r\n  OWNER_CREATED_FARM: \"/create-pool/{owner}\",\r\n  OWNER_IDO: \"/main/ido/{owner}\",\r\n  OWNER_STAKE_FARMS: \"/position/stake/{owner}\",\r\n  OWNER_LOCK_POSITION: \"/position/clmm-lock/{owner}\",\r\n  IDO_KEYS: \"/ido/key/ids\",\r\n  SWAP_HOST: \"https://transaction-v1.raydium.io\",\r\n  SWAP_COMPUTE: \"/compute/\",\r\n  SWAP_TX: \"/transaction/\",\r\n  MINT_PRICE: \"/mint/price\",\r\n  MIGRATE_CONFIG: \"/main/migrate-lp\",\r\n  PRIORITY_FEE: \"/main/auto-fee\",\r\n\r\n  CPMM_LOCK: \"https://dynamic-ipfs.raydium.io/lock/cpmm/position\",\r\n};\r\n\r\nexport const DEV_API_URLS = {\r\n  ...API_URLS,\r\n};\r\n\r\nexport type API_URL_CONFIG = Partial<typeof API_URLS>;\r\n","export const SESSION_KEY = \"ray_tab_hash\";\r\nexport const STORAGE_KEY = \"ray_req_hash\";\r\n\r\nexport const getSessionKey = (): string => {\r\n  if (typeof window === undefined) return \"\";\r\n  let key = sessionStorage.getItem(SESSION_KEY);\r\n\r\n  // new a session key\r\n  if (!key) {\r\n    key = `ray-${Date.now()}`;\r\n    sessionStorage.setItem(SESSION_KEY, key);\r\n  }\r\n  return key;\r\n};\r\n\r\nexport interface ResHistory {\r\n  status: number;\r\n  url: string;\r\n  params?: any;\r\n  data: any;\r\n  logCount?: number;\r\n  time: number;\r\n  session: string;\r\n  removeLastLog?: boolean;\r\n}\r\n\r\nexport const updateReqHistory = async ({\r\n  logCount = 1000,\r\n  removeLastLog,\r\n  ...resData\r\n}: Omit<ResHistory, \"time\" | \"session\">): Promise<void> => {\r\n  if (typeof window === undefined) return new Promise((resolve) => resolve());\r\n  const data: ResHistory[] = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\").slice(0, logCount - 1);\r\n\r\n  // means retry last save error\r\n  if (removeLastLog) data.pop();\r\n\r\n  // if data > 1kb\r\n  if (new Blob([JSON.stringify(resData.data)]).size > 1024)\r\n    resData.data = JSON.stringify(resData.data).substring(0, 200) + \"...\";\r\n  data.unshift({ ...resData, time: Date.now(), session: getSessionKey() });\r\n\r\n  try {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n  } catch {\r\n    // if retry failed, empty request data\r\n    if (removeLastLog) {\r\n      let success = false;\r\n      const resStr = JSON.stringify(resData.data).substring(0, 100);\r\n      data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\r\n      while (!success) {\r\n        data.pop();\r\n        const resStr = JSON.stringify(resData.data).substring(0, 100);\r\n        data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\r\n        try {\r\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n          success = true;\r\n        } catch {\r\n          success = false;\r\n        }\r\n      }\r\n      return new Promise((resolve) => resolve());\r\n    }\r\n    return updateReqHistory({\r\n      ...resData,\r\n      logCount,\r\n      removeLastLog: true,\r\n    });\r\n  }\r\n};\r\n","export const EMPTY_OWNER =\r\n  \"please provide owner in load() initialization or you can set by calling raydium.setOwner(owner)\";\r\n\r\nexport const EMPTY_CONNECTION =\r\n  \"please provide connection in load() initialization or set it by raydium.setConnection(connection)\";\r\n","import { Commitment, PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { BigNumberish, getATAAddress, InstructionType, WSOLMint } from \"@/common\";\r\nimport {\r\n  AccountLayout,\r\n  createAssociatedTokenAccountInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n  TOKEN_2022_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\r\n\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport {\r\n  closeAccountInstruction,\r\n  createWSolAccountInstructions,\r\n  initTokenAccountInstruction,\r\n  makeTransferInstruction,\r\n} from \"./instruction\";\r\nimport { GetOrCreateTokenAccountParams, HandleTokenAccountParams, TokenAccount, TokenAccountRaw } from \"./types\";\r\nimport { generatePubKey, parseTokenAccountResp } from \"./util\";\r\n\r\nexport interface TokenAccountDataProp {\r\n  tokenAccounts?: TokenAccount[];\r\n  tokenAccountRawInfos?: TokenAccountRaw[];\r\n  notSubscribeAccountChange?: boolean;\r\n}\r\nexport default class Account extends ModuleBase {\r\n  private _tokenAccounts: TokenAccount[] = [];\r\n  private _tokenAccountRawInfos: TokenAccountRaw[] = [];\r\n  private _accountChangeListenerId?: number;\r\n  private _accountListener: ((data: TokenAccountDataProp) => void)[] = [];\r\n  private _clientOwnedToken = false;\r\n  private _notSubscribeAccountChange = false;\r\n  private _accountFetchTime = 0;\r\n\r\n  constructor(params: TokenAccountDataProp & ModuleBaseProps) {\r\n    super(params);\r\n    const { tokenAccounts, tokenAccountRawInfos, notSubscribeAccountChange } = params;\r\n    this._tokenAccounts = tokenAccounts || [];\r\n    this._tokenAccountRawInfos = tokenAccountRawInfos || [];\r\n    this._notSubscribeAccountChange = notSubscribeAccountChange ?? true;\r\n    this._clientOwnedToken = !!(tokenAccounts || tokenAccountRawInfos);\r\n  }\r\n\r\n  get tokenAccounts(): TokenAccount[] {\r\n    return this._tokenAccounts;\r\n  }\r\n  get tokenAccountRawInfos(): TokenAccountRaw[] {\r\n    return this._tokenAccountRawInfos;\r\n  }\r\n\r\n  set notSubscribeAccountChange(subscribe: boolean) {\r\n    this._notSubscribeAccountChange = subscribe;\r\n  }\r\n\r\n  public updateTokenAccount({ tokenAccounts, tokenAccountRawInfos }: TokenAccountDataProp): Account {\r\n    if (tokenAccounts) this._tokenAccounts = tokenAccounts;\r\n    if (tokenAccountRawInfos) this._tokenAccountRawInfos = tokenAccountRawInfos;\r\n    this._accountChangeListenerId && this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\r\n    this._accountChangeListenerId = undefined;\r\n    this._clientOwnedToken = true;\r\n    return this;\r\n  }\r\n\r\n  public addAccountChangeListener(cbk: (data: TokenAccountDataProp) => void): Account {\r\n    this._accountListener.push(cbk);\r\n    return this;\r\n  }\r\n\r\n  public removeAccountChangeListener(cbk: (data: TokenAccountDataProp) => void): Account {\r\n    this._accountListener = this._accountListener.filter((listener) => listener !== cbk);\r\n    return this;\r\n  }\r\n\r\n  public getAssociatedTokenAccount(mint: PublicKey, programId?: PublicKey): PublicKey {\r\n    return getATAAddress(this.scope.ownerPubKey, mint, programId).publicKey;\r\n  }\r\n\r\n  public resetTokenAccounts(): void {\r\n    if (this._clientOwnedToken) return;\r\n    this._tokenAccounts = [];\r\n    this._tokenAccountRawInfos = [];\r\n  }\r\n\r\n  public async fetchWalletTokenAccounts(config?: { forceUpdate?: boolean; commitment?: Commitment }): Promise<{\r\n    tokenAccounts: TokenAccount[];\r\n    tokenAccountRawInfos: TokenAccountRaw[];\r\n  }> {\r\n    if (\r\n      this._clientOwnedToken ||\r\n      (!config?.forceUpdate &&\r\n        this._tokenAccounts.length &&\r\n        Date.now() - this._accountFetchTime < (this._notSubscribeAccountChange ? 1000 * 5 : 1000 * 60 * 3))\r\n    ) {\r\n      return {\r\n        tokenAccounts: this._tokenAccounts,\r\n        tokenAccountRawInfos: this._tokenAccountRawInfos,\r\n      };\r\n    }\r\n    this.scope.checkOwner();\r\n\r\n    const defaultConfig = {};\r\n    const customConfig = { ...defaultConfig, ...config };\r\n\r\n    const [solAccountResp, ownerTokenAccountResp, ownerToken2022AccountResp] = await Promise.all([\r\n      this.scope.connection.getAccountInfo(this.scope.ownerPubKey, customConfig.commitment),\r\n      this.scope.connection.getTokenAccountsByOwner(\r\n        this.scope.ownerPubKey,\r\n        { programId: TOKEN_PROGRAM_ID },\r\n        customConfig.commitment,\r\n      ),\r\n      this.scope.connection.getTokenAccountsByOwner(\r\n        this.scope.ownerPubKey,\r\n        { programId: TOKEN_2022_PROGRAM_ID },\r\n        customConfig.commitment,\r\n      ),\r\n    ]);\r\n\r\n    const { tokenAccounts, tokenAccountRawInfos } = parseTokenAccountResp({\r\n      owner: this.scope.ownerPubKey,\r\n      solAccountResp,\r\n      tokenAccountResp: {\r\n        context: ownerTokenAccountResp.context,\r\n        value: [...ownerTokenAccountResp.value, ...ownerToken2022AccountResp.value],\r\n      },\r\n    });\r\n\r\n    this._tokenAccounts = tokenAccounts;\r\n    this._tokenAccountRawInfos = tokenAccountRawInfos;\r\n\r\n    this._accountFetchTime = Date.now();\r\n\r\n    if (!this._notSubscribeAccountChange) {\r\n      this._accountChangeListenerId && this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\r\n      this._accountChangeListenerId = this.scope.connection.onAccountChange(\r\n        this.scope.ownerPubKey,\r\n        () => {\r\n          this.fetchWalletTokenAccounts({ forceUpdate: true });\r\n          this._accountListener.forEach((cb) =>\r\n            cb({ tokenAccounts: this._tokenAccounts, tokenAccountRawInfos: this._tokenAccountRawInfos }),\r\n          );\r\n        },\r\n        { commitment: config?.commitment },\r\n      );\r\n    }\r\n\r\n    return { tokenAccounts, tokenAccountRawInfos };\r\n  }\r\n\r\n  public clearAccountChangeCkb(): void {\r\n    if (this._accountChangeListenerId !== undefined)\r\n      this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\r\n  }\r\n\r\n  // user token account needed, old _selectTokenAccount\r\n  public async getCreatedTokenAccount({\r\n    mint,\r\n    programId = TOKEN_PROGRAM_ID,\r\n    associatedOnly = true,\r\n  }: {\r\n    mint: PublicKey;\r\n    programId?: PublicKey;\r\n    associatedOnly?: boolean;\r\n  }): Promise<PublicKey | undefined> {\r\n    await this.fetchWalletTokenAccounts();\r\n    const tokenAccounts = this._tokenAccounts\r\n      .filter(({ mint: accountMint }) => accountMint?.equals(mint))\r\n      // sort by balance\r\n      .sort((a, b) => (a.amount.lt(b.amount) ? 1 : -1));\r\n\r\n    const ata = this.getAssociatedTokenAccount(mint, programId);\r\n    for (const tokenAccount of tokenAccounts) {\r\n      const { publicKey } = tokenAccount;\r\n      if (publicKey) {\r\n        if (!associatedOnly || (associatedOnly && ata.equals(publicKey))) return publicKey;\r\n      }\r\n    }\r\n  }\r\n\r\n  // old _selectOrCreateTokenAccount\r\n  public async getOrCreateTokenAccount(params: GetOrCreateTokenAccountParams): Promise<{\r\n    account?: PublicKey;\r\n    instructionParams?: AddInstructionParam;\r\n  }> {\r\n    await this.fetchWalletTokenAccounts();\r\n    const {\r\n      mint,\r\n      createInfo,\r\n      associatedOnly,\r\n      owner,\r\n      notUseTokenAccount = false,\r\n      skipCloseAccount = false,\r\n      checkCreateATAOwner = false,\r\n      assignSeed,\r\n    } = params;\r\n    const tokenProgram = new PublicKey(params.tokenProgram || TOKEN_PROGRAM_ID);\r\n    const ata = this.getAssociatedTokenAccount(mint, new PublicKey(tokenProgram));\r\n    const accounts = (notUseTokenAccount ? [] : this.tokenAccountRawInfos)\r\n      .filter((i) => i.accountInfo.mint.equals(mint) && (!associatedOnly || i.pubkey.equals(ata)))\r\n      .sort((a, b) => (a.accountInfo.amount.lt(b.accountInfo.amount) ? 1 : -1));\r\n    // find token or don't need create\r\n    if (createInfo === undefined || accounts.length > 0) {\r\n      //return accounts.length > 0 ? { account: accounts[0].pubkey } : {};\r\n    }\r\n\r\n    const newTxInstructions: AddInstructionParam = {\r\n      instructions: [],\r\n      endInstructions: [],\r\n      signers: [],\r\n      instructionTypes: [],\r\n      endInstructionTypes: [],\r\n    };\r\n\r\n    if (associatedOnly) {\r\n      const _createATAIns = createAssociatedTokenAccountInstruction(owner, ata, owner, mint, tokenProgram);\r\n      const _ataInTokenAcc = this.tokenAccountRawInfos.find((i) => i.pubkey.equals(ata));\r\n      if (checkCreateATAOwner) {\r\n        const ataInfo = await this.scope.connection.getAccountInfo(ata);\r\n        if (ataInfo === null) {\r\n          newTxInstructions.instructions?.push(_createATAIns);\r\n          newTxInstructions.instructionTypes!.push(InstructionType.CreateATA);\r\n        } else if (\r\n          ataInfo.owner.equals(tokenProgram) &&\r\n          AccountLayout.decode(ataInfo.data).mint.equals(mint) &&\r\n          AccountLayout.decode(ataInfo.data).owner.equals(owner)\r\n        ) {\r\n          /* empty */\r\n        } else {\r\n          throw Error(`create ata check error -> mint: ${mint.toString()}, ata: ${ata.toString()}`);\r\n        }\r\n      } else if (_ataInTokenAcc === undefined) {\r\n        newTxInstructions.instructions!.push(_createATAIns);\r\n        newTxInstructions.instructionTypes!.push(InstructionType.CreateATA);\r\n      }\r\n      if (mint.equals(WSOLMint) && createInfo?.amount) {\r\n        const txInstruction = await createWSolAccountInstructions({\r\n          connection: this.scope.connection,\r\n          owner: this.scope.ownerPubKey,\r\n          payer: createInfo.payer || this.scope.ownerPubKey,\r\n          amount: createInfo.amount ?? 0,\r\n          skipCloseAccount,\r\n        });\r\n        newTxInstructions.instructions!.push(...(txInstruction.instructions || []));\r\n        newTxInstructions.endInstructions!.push(...(txInstruction.endInstructions || []));\r\n        newTxInstructions.instructionTypes!.push(...(txInstruction.instructionTypes || []));\r\n        newTxInstructions.endInstructionTypes!.push(...(txInstruction.endInstructionTypes || []));\r\n\r\n        if (createInfo.amount) {\r\n          newTxInstructions.instructions!.push(\r\n            makeTransferInstruction({\r\n              source: txInstruction.addresses.newAccount,\r\n              destination: ata,\r\n              owner: this.scope.ownerPubKey,\r\n              amount: createInfo.amount,\r\n              tokenProgram: TOKEN_PROGRAM_ID,\r\n            }),\r\n          );\r\n          newTxInstructions.instructionTypes!.push(InstructionType.TransferAmount);\r\n        }\r\n      }\r\n\r\n      if (!skipCloseAccount && _ataInTokenAcc === undefined) {\r\n        newTxInstructions.endInstructions!.push(\r\n          closeAccountInstruction({\r\n            owner,\r\n            payer: createInfo?.payer || owner,\r\n            tokenAccount: ata,\r\n            programId: tokenProgram,\r\n          }),\r\n        );\r\n        newTxInstructions.endInstructionTypes!.push(InstructionType.CloseAccount);\r\n      }\r\n\r\n      return { account: ata, instructionParams: newTxInstructions };\r\n    } else {\r\n      const newTokenAccount = generatePubKey({ fromPublicKey: owner, programId: tokenProgram, assignSeed });\r\n      const balanceNeeded = await this.scope.connection.getMinimumBalanceForRentExemption(AccountLayout.span);\r\n\r\n      const createAccountIns = SystemProgram.createAccountWithSeed({\r\n        fromPubkey: owner,\r\n        basePubkey: owner,\r\n        seed: newTokenAccount.seed,\r\n        newAccountPubkey: newTokenAccount.publicKey,\r\n        lamports: balanceNeeded + Number(createInfo?.amount?.toString() ?? 0),\r\n        space: AccountLayout.span,\r\n        programId: tokenProgram,\r\n      });\r\n\r\n      newTxInstructions.instructions!.push(\r\n        createAccountIns,\r\n        initTokenAccountInstruction({\r\n          mint,\r\n          tokenAccount: newTokenAccount.publicKey,\r\n          owner: this.scope.ownerPubKey,\r\n          programId: tokenProgram,\r\n        }),\r\n      );\r\n      newTxInstructions.instructionTypes!.push(InstructionType.CreateAccount);\r\n      newTxInstructions.instructionTypes!.push(InstructionType.InitAccount);\r\n      if (!skipCloseAccount) {\r\n        newTxInstructions.endInstructions!.push(\r\n          closeAccountInstruction({\r\n            owner,\r\n            payer: createInfo?.payer || owner,\r\n            tokenAccount: newTokenAccount.publicKey,\r\n            programId: tokenProgram,\r\n          }),\r\n        );\r\n        newTxInstructions.endInstructionTypes!.push(InstructionType.CloseAccount);\r\n      }\r\n      return { account: newTokenAccount.publicKey, instructionParams: newTxInstructions };\r\n    }\r\n    // }\r\n  }\r\n\r\n  public async checkOrCreateAta({\r\n    mint,\r\n    programId = TOKEN_PROGRAM_ID,\r\n    autoUnwrapWSOLToSOL,\r\n  }: {\r\n    mint: PublicKey;\r\n    programId?: PublicKey;\r\n    autoUnwrapWSOLToSOL?: boolean;\r\n  }): Promise<{ pubKey: PublicKey; newInstructions: AddInstructionParam }> {\r\n    await this.fetchWalletTokenAccounts();\r\n    let tokenAccountAddress = this.scope.account.tokenAccounts.find(\r\n      ({ mint: accountTokenMint }) => accountTokenMint?.toBase58() === mint.toBase58(),\r\n    )?.publicKey;\r\n\r\n    const owner = this.scope.ownerPubKey;\r\n    const newTxInstructions: AddInstructionParam = {};\r\n\r\n    if (!tokenAccountAddress) {\r\n      const ataAddress = this.getAssociatedTokenAccount(mint, programId);\r\n      const instruction = await createAssociatedTokenAccountInstruction(owner, ataAddress, owner, mint, programId);\r\n      newTxInstructions.instructions = [instruction];\r\n      newTxInstructions.instructionTypes = [InstructionType.CreateATA];\r\n      tokenAccountAddress = ataAddress;\r\n    }\r\n    if (autoUnwrapWSOLToSOL && WSOLMint.toBase58() === mint.toBase58()) {\r\n      newTxInstructions.endInstructions = [\r\n        closeAccountInstruction({ owner, payer: owner, tokenAccount: tokenAccountAddress, programId }),\r\n      ];\r\n      newTxInstructions.endInstructionTypes = [InstructionType.CloseAccount];\r\n    }\r\n\r\n    return {\r\n      pubKey: tokenAccountAddress,\r\n      newInstructions: newTxInstructions,\r\n    };\r\n  }\r\n\r\n  // old _handleTokenAccount\r\n  public async handleTokenAccount(\r\n    params: HandleTokenAccountParams,\r\n  ): Promise<AddInstructionParam & { tokenAccount: PublicKey }> {\r\n    const {\r\n      side,\r\n      amount,\r\n      mint,\r\n      programId = TOKEN_PROGRAM_ID,\r\n      tokenAccount,\r\n      payer = this.scope.ownerPubKey,\r\n      bypassAssociatedCheck,\r\n      skipCloseAccount,\r\n      checkCreateATAOwner,\r\n    } = params;\r\n\r\n    const ata = this.getAssociatedTokenAccount(mint, programId);\r\n\r\n    if (new PublicKey(WSOLMint).equals(mint)) {\r\n      const txInstruction = await createWSolAccountInstructions({\r\n        connection: this.scope.connection,\r\n        owner: this.scope.ownerPubKey,\r\n        payer,\r\n        amount,\r\n        skipCloseAccount,\r\n      });\r\n      return { tokenAccount: txInstruction.addresses.newAccount, ...txInstruction };\r\n    } else if (!tokenAccount || (side === \"out\" && !ata.equals(tokenAccount) && !bypassAssociatedCheck)) {\r\n      const instructions: TransactionInstruction[] = [];\r\n      const _createATAIns = createAssociatedTokenAccountInstruction(\r\n        this.scope.ownerPubKey,\r\n        ata,\r\n        this.scope.ownerPubKey,\r\n        mint,\r\n        programId,\r\n      );\r\n\r\n      if (checkCreateATAOwner) {\r\n        const ataInfo = await this.scope.connection.getAccountInfo(ata);\r\n        if (ataInfo === null) {\r\n          instructions.push(_createATAIns);\r\n        } else if (\r\n          ataInfo.owner.equals(TOKEN_PROGRAM_ID) &&\r\n          AccountLayout.decode(ataInfo.data).mint.equals(mint) &&\r\n          AccountLayout.decode(ataInfo.data).owner.equals(this.scope.ownerPubKey)\r\n        ) {\r\n          /* empty */\r\n        } else {\r\n          throw Error(`create ata check error -> mint: ${mint.toString()}, ata: ${ata.toString()}`);\r\n        }\r\n      } else {\r\n        instructions.push(_createATAIns);\r\n      }\r\n\r\n      return {\r\n        tokenAccount: ata,\r\n        instructions,\r\n        instructionTypes: [InstructionType.CreateATA],\r\n      };\r\n    }\r\n\r\n    return { tokenAccount };\r\n  }\r\n\r\n  public async processTokenAccount(props: {\r\n    mint: PublicKey;\r\n    programId?: PublicKey;\r\n    amount?: BigNumberish;\r\n    useSOLBalance?: boolean;\r\n    handleTokenAccount?: boolean;\r\n    feePayer?: PublicKey;\r\n  }): Promise<Promise<AddInstructionParam & { tokenAccount?: PublicKey }>> {\r\n    const { mint, programId = TOKEN_PROGRAM_ID, amount, useSOLBalance, handleTokenAccount, feePayer } = props;\r\n    let tokenAccount: PublicKey | undefined;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    if (mint.equals(new PublicKey(WSOLMint)) && useSOLBalance) {\r\n      // mintA\r\n      const { tokenAccount: _tokenAccount, ...instructions } = await this.handleTokenAccount({\r\n        side: \"in\",\r\n        amount: amount || 0,\r\n        mint,\r\n        bypassAssociatedCheck: true,\r\n        programId,\r\n      });\r\n      tokenAccount = _tokenAccount;\r\n      txBuilder.addInstruction(instructions);\r\n    } else {\r\n      tokenAccount = await this.getCreatedTokenAccount({\r\n        mint,\r\n        associatedOnly: false,\r\n        programId,\r\n      });\r\n      if (!tokenAccount && handleTokenAccount) {\r\n        const { tokenAccount: _tokenAccount, ...instructions } = await this.scope.account.handleTokenAccount({\r\n          side: \"in\",\r\n          amount: 0,\r\n          mint,\r\n          bypassAssociatedCheck: true,\r\n          programId,\r\n        });\r\n        tokenAccount = _tokenAccount;\r\n        txBuilder.addInstruction(instructions);\r\n      }\r\n    }\r\n\r\n    return { tokenAccount, ...txBuilder.AllTxData };\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger, Logger } from \"../common/logger\";\r\nimport { TxBuilder } from \"../common/txTool/txTool\";\r\n\r\nimport { Raydium } from \"./\";\r\n\r\nexport interface ModuleBaseProps {\r\n  scope: Raydium;\r\n  moduleName: string;\r\n}\r\n\r\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\r\n  args\r\n    .map((arg) => {\r\n      try {\r\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\r\n      } catch {\r\n        return arg;\r\n      }\r\n    })\r\n    .join(\", \");\r\nexport default class ModuleBase {\r\n  public scope: Raydium;\r\n  private disabled = false;\r\n  protected logger: Logger;\r\n\r\n  constructor({ scope, moduleName }: ModuleBaseProps) {\r\n    this.scope = scope;\r\n    this.logger = createLogger(moduleName);\r\n  }\r\n\r\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\r\n    this.scope.checkOwner();\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer || this.scope.ownerPubKey,\r\n      cluster: this.scope.cluster,\r\n      owner: this.scope.owner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      loopMultiTxStatus: this.scope.loopMultiTxStatus,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.debug(joinMsg(args));\r\n  }\r\n\r\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.info(joinMsg(args));\r\n  }\r\n\r\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\r\n    const message = joinMsg(args);\r\n    throw new Error(message);\r\n  }\r\n\r\n  public checkDisabled(): void {\r\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\r\n  }\r\n}\r\n","import { Commitment, Connection, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { BigNumberish, parseBigNumberish } from \"@/common\";\r\nimport {\r\n  createCloseAccountInstruction,\r\n  createInitializeAccountInstruction,\r\n  createTransferInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { TOKEN_WSOL } from \"../token/constant\";\r\nimport { generatePubKey } from \"./util\";\r\n\r\nimport { splAccountLayout } from \"./layout\";\r\n\r\nexport function initTokenAccountInstruction(params: {\r\n  mint: PublicKey;\r\n  tokenAccount: PublicKey;\r\n  owner: PublicKey;\r\n  programId?: PublicKey;\r\n}): TransactionInstruction {\r\n  const { mint, tokenAccount, owner, programId = TOKEN_PROGRAM_ID } = params;\r\n  return createInitializeAccountInstruction(tokenAccount, mint, owner, programId);\r\n}\r\n\r\nexport function closeAccountInstruction(params: {\r\n  tokenAccount: PublicKey;\r\n  payer: PublicKey;\r\n  multiSigners?: Signer[];\r\n  owner: PublicKey;\r\n  programId?: PublicKey;\r\n}): TransactionInstruction {\r\n  const { tokenAccount, payer, multiSigners = [], owner, programId = TOKEN_PROGRAM_ID } = params;\r\n  return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners, programId);\r\n}\r\n\r\ninterface CreateWSolTokenAccount {\r\n  connection: Connection;\r\n  payer: PublicKey;\r\n  owner: PublicKey;\r\n  amount: BigNumberish;\r\n  commitment?: Commitment;\r\n  skipCloseAccount?: boolean;\r\n}\r\n/**\r\n * WrappedNative account = wsol account\r\n */\r\nexport async function createWSolAccountInstructions(params: CreateWSolTokenAccount): Promise<\r\n  AddInstructionParam & {\r\n    addresses: { newAccount: PublicKey };\r\n  }\r\n> {\r\n  const { connection, amount, commitment, payer, owner, skipCloseAccount } = params;\r\n\r\n  const balanceNeeded = await connection.getMinimumBalanceForRentExemption(splAccountLayout.span, commitment);\r\n  const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\r\n  const newAccount = generatePubKey({ fromPublicKey: payer, programId: TOKEN_PROGRAM_ID });\r\n\r\n  return {\r\n    addresses: { newAccount: newAccount.publicKey },\r\n    signers: [],\r\n    instructions: [\r\n      SystemProgram.createAccountWithSeed({\r\n        fromPubkey: payer,\r\n        basePubkey: payer,\r\n        seed: newAccount.seed,\r\n        newAccountPubkey: newAccount.publicKey,\r\n        lamports: lamports.toNumber(),\r\n        space: splAccountLayout.span,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      initTokenAccountInstruction({\r\n        mint: new PublicKey(TOKEN_WSOL.address),\r\n        tokenAccount: newAccount.publicKey,\r\n        owner,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n    ],\r\n    instructionTypes: [InstructionType.CreateAccount, InstructionType.InitAccount],\r\n    endInstructionTypes: skipCloseAccount ? [] : [InstructionType.CloseAccount],\r\n    endInstructions: skipCloseAccount\r\n      ? []\r\n      : [\r\n          closeAccountInstruction({\r\n            tokenAccount: newAccount.publicKey,\r\n            payer,\r\n            owner,\r\n          }),\r\n        ],\r\n  };\r\n}\r\n\r\nexport function makeTransferInstruction({\r\n  source,\r\n  destination,\r\n  owner,\r\n  amount,\r\n  multiSigners = [],\r\n  tokenProgram = TOKEN_PROGRAM_ID,\r\n}: {\r\n  source: PublicKey;\r\n  destination: PublicKey;\r\n  owner: PublicKey;\r\n  amount: BigNumberish;\r\n  multiSigners?: Signer[];\r\n  tokenProgram?: PublicKey;\r\n}): TransactionInstruction {\r\n  return createTransferInstruction(source, destination, owner, BigInt(String(amount)), multiSigners, tokenProgram);\r\n}\r\n","import { AccountInfo, GetProgramAccountsResponse, Keypair, PublicKey, RpcResponseAndContext } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { createLogger, getATAAddress } from \"../../common\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { sha256 } from \"@noble/hashes/sha256\";\r\nimport { splAccountLayout } from \"./layout\";\r\nimport { TokenAccount, TokenAccountRaw } from \"./types\";\r\n\r\nconst logger = createLogger(\"Raydium_Util\");\r\n\r\nexport interface ParseTokenAccount {\r\n  owner: PublicKey;\r\n  solAccountResp?: AccountInfo<Buffer> | null;\r\n  tokenAccountResp: RpcResponseAndContext<GetProgramAccountsResponse>;\r\n}\r\n\r\nexport function parseTokenAccountResp({ owner, solAccountResp, tokenAccountResp }: ParseTokenAccount): {\r\n  tokenAccounts: TokenAccount[];\r\n  tokenAccountRawInfos: TokenAccountRaw[];\r\n} {\r\n  const tokenAccounts: TokenAccount[] = [];\r\n  const tokenAccountRawInfos: TokenAccountRaw[] = [];\r\n\r\n  for (const { pubkey, account } of tokenAccountResp.value) {\r\n    const accountInfo = splAccountLayout.decode(account.data);\r\n    const { mint, amount } = accountInfo;\r\n    tokenAccounts.push({\r\n      publicKey: pubkey,\r\n      mint,\r\n      amount,\r\n      isAssociated: getATAAddress(owner, mint, account.owner).publicKey.equals(pubkey),\r\n      isNative: false,\r\n      programId: account.owner,\r\n    });\r\n    // todo programId should get from api\r\n    tokenAccountRawInfos.push({ pubkey, accountInfo, programId: account.owner });\r\n  }\r\n\r\n  if (solAccountResp) {\r\n    tokenAccounts.push({\r\n      mint: PublicKey.default,\r\n      amount: new BN(String(solAccountResp.lamports)),\r\n      isNative: true,\r\n      programId: solAccountResp.owner,\r\n    });\r\n  }\r\n\r\n  return {\r\n    tokenAccounts,\r\n    tokenAccountRawInfos,\r\n  };\r\n}\r\n\r\nexport function generatePubKey({\r\n  fromPublicKey,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  assignSeed,\r\n}: {\r\n  fromPublicKey: PublicKey;\r\n  programId: PublicKey;\r\n  assignSeed?: string;\r\n}): { publicKey: PublicKey; seed: string } {\r\n  const seed = assignSeed ? btoa(assignSeed).slice(0, 32) : Keypair.generate().publicKey.toBase58().slice(0, 32);\r\n  const publicKey = createWithSeed(fromPublicKey, seed, programId);\r\n  return { publicKey, seed };\r\n}\r\n\r\nfunction createWithSeed(fromPublicKey: PublicKey, seed: string, programId: PublicKey): PublicKey {\r\n  const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\r\n  const publicKeyBytes = sha256(buffer);\r\n  return new PublicKey(publicKeyBytes);\r\n}\r\n",null,null,null,null,"import { PublicKey } from \"@solana/web3.js\";\r\nimport BN, { isBN } from \"bn.js\";\r\n\r\nimport {\r\n  bits,\r\n  blob,\r\n  Blob,\r\n  Layout,\r\n  offset as _offset,\r\n  seq as _seq,\r\n  Structure as _Structure,\r\n  u32 as _u32,\r\n  u8 as _u8,\r\n  UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n} from \"./buffer-layout\";\r\n\r\nexport * from \"./buffer-layout\";\r\nexport { blob };\r\n\r\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\r\n  blob: Layout<Buffer>;\r\n  signed: boolean;\r\n\r\n  constructor(span: number, signed: boolean, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\r\n    super(span, property);\r\n    this.blob = blob(span);\r\n    this.signed = signed;\r\n  }\r\n\r\n  /** @override */\r\n  decode(b: Buffer, offset = 0): BN {\r\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\r\n    if (this.signed) {\r\n      return num.fromTwos(this.span * 8).clone();\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /** @override */\r\n  encode(src: BN, b: Buffer, offset = 0): number {\r\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\r\n    if (this.signed) {\r\n      src = src.toTwos(this.span * 8);\r\n    }\r\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\r\n  }\r\n}\r\n\r\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\r\n  _lower: any;\r\n  _upper: any;\r\n  // TODO: unknown\r\n  constructor(property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(8, property);\r\n    this._lower = bits(_u32(), false);\r\n    this._upper = bits(_u32(), false);\r\n  }\r\n\r\n  addBoolean(property: string): void {\r\n    if (this._lower.fields.length < 32) {\r\n      this._lower.addBoolean(property);\r\n    } else {\r\n      this._upper.addBoolean(property);\r\n    }\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\r\n    const lowerDecoded = this._lower.decode(b, offset);\r\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\r\n    return { ...lowerDecoded, ...upperDecoded };\r\n  }\r\n\r\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\r\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\r\n  }\r\n}\r\n\r\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(1, property);\r\n}\r\n\r\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(4, property);\r\n}\r\n\r\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, false, property);\r\n}\r\n\r\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, false, property);\r\n}\r\n\r\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(1, true, property);\r\n}\r\n\r\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, true, property);\r\n}\r\n\r\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, true, property);\r\n}\r\n\r\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\r\n  layout: Layout<T>;\r\n  decoder: (data: T) => U;\r\n  encoder: (src: U) => T;\r\n\r\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(layout.span, property);\r\n    this.layout = layout;\r\n    this.decoder = decoder;\r\n    this.encoder = encoder;\r\n  }\r\n\r\n  decode(b: Buffer, offset?: number): U {\r\n    return this.decoder(this.layout.decode(b, offset));\r\n  }\r\n\r\n  encode(src: U, b: Buffer, offset?: number): number {\r\n    return this.layout.encode(this.encoder(src), b, offset);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset?: number): number {\r\n    return this.layout.getSpan(b, offset);\r\n  }\r\n}\r\n\r\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\r\n  return new WrappedLayout(\r\n    blob(32),\r\n    (b: Buffer) => new PublicKey(b),\r\n    (key: PublicKey) => key.toBuffer(),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\r\n  layout: Layout<T>;\r\n  discriminator: Layout<number>;\r\n\r\n  constructor(layout: Layout<T>, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(-1, property);\r\n    this.layout = layout;\r\n    this.discriminator = _u8();\r\n  }\r\n\r\n  encode(src: T | null, b: Buffer, offset = 0): number {\r\n    if (src === null || src === undefined) {\r\n      return this.discriminator.encode(0, b, offset);\r\n    }\r\n    this.discriminator.encode(1, b, offset);\r\n    return this.layout.encode(src, b, offset + 1) + 1;\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): T | null {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return null;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.decode(b, offset + 1);\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset = 0): number {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return 1;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.getSpan(b, offset + 1) + 1;\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n}\r\n\r\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\r\n  return new OptionLayout<T, P>(layout, property);\r\n}\r\n\r\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\r\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\r\n}\r\n\r\nexport function decodeBool(value: number): boolean {\r\n  if (value === 0) {\r\n    return false;\r\n  } else if (value === 1) {\r\n    return true;\r\n  }\r\n  throw new Error(\"Invalid bool: \" + value);\r\n}\r\n\r\nexport function encodeBool(value: boolean): number {\r\n  return value ? 1 : 0;\r\n}\r\n\r\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ values: T[] }> = struct([\r\n    length,\r\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\r\n  ]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\r\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\r\n\r\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\r\n    if (!receivedTag.eq(tag)) {\r\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\r\n}\r\n\r\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ data }) => data,\r\n    (data) => ({ data }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\r\n  return new WrappedLayout(\r\n    vecU8(),\r\n    (data) => data.toString(\"utf-8\"),\r\n    (s) => Buffer.from(s, \"utf-8\"),\r\n    property,\r\n  );\r\n}\r\n\r\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\r\n  registry: Record<string, Layout<any>>;\r\n}\r\n\r\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\r\n  const unionLayout = _union(_u8(), property);\r\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\r\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\r\n}\r\n\r\nexport function array<T, P extends string = \"\">(\r\n  elementLayout: Layout<T>,\r\n  length: number,\r\n  property?: P,\r\n): Layout<T[], P> {\r\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class Structure<T, P, D extends { [key: string]: any; }> extends _Structure<T, P, D> {\r\n  /** @override */\r\n  decode(b: Buffer, offset?: number): D {\r\n    return super.decode(b, offset);\r\n  }\r\n}\r\n\r\nexport function struct<T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n): T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n    Value,\r\n    P,\r\n    {\r\n      [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n      ? V\r\n      : any;\r\n    }\r\n  >\r\n  : any {\r\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\r\n  return new Structure(fields, property, decodePrefixes);\r\n}\r\n\r\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\r\n  ? S\r\n  : any;\r\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any; }> = Structure<any, any, S>;\r\n\r\nexport class Union<Schema extends { [key: string]: any; }> extends _Union<Schema> {\r\n  encodeInstruction(instruction: any): Buffer {\r\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\r\n    const b = Buffer.alloc(instructionMaxSpan);\r\n    return b.slice(0, this.encode(instruction, b));\r\n  }\r\n\r\n  decodeInstruction(instruction: any): Partial<Schema> {\r\n    return this.decode(instruction);\r\n  }\r\n}\r\nexport function union<UnionSchema extends { [key: string]: any } = any>(\r\n  discr: any,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n): Union<UnionSchema> {\r\n  return new Union(discr, defaultLayout, property);\r\n}\r\n\r\nclass Zeros extends Blob {\r\n  decode(b: Buffer, offset: number): Buffer {\r\n    const slice = super.decode(b, offset);\r\n    if (!slice.every((v) => v === 0)) {\r\n      throw new Error(\"nonzero padding bytes\");\r\n    }\r\n    return slice;\r\n  }\r\n}\r\n\r\nexport function zeros(length: number): Zeros {\r\n  return new Zeros(length);\r\n}\r\n\r\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\r\n  elementLayout: Layout<T, P>,\r\n  count: number | BN | Layout<BN | number, P>,\r\n  property?: AnotherP,\r\n): Layout<T[], AnotherP> {\r\n  let parsedCount: number;\r\n  const superCount =\r\n    typeof count === \"number\"\r\n      ? count\r\n      : isBN(count)\r\n        ? count.toNumber()\r\n        : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\r\n          get(target, property): any {\r\n            if (!parsedCount) {\r\n              // get count in targetLayout. note that count may be BN\r\n              const countProperty = Reflect.get(target, \"count\");\r\n\r\n              // let targetLayout's  property:count be a number\r\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\r\n\r\n              // record the count\r\n              Reflect.set(target, \"count\", parsedCount);\r\n            }\r\n            return Reflect.get(target, property);\r\n          },\r\n          set(target, property, value): any {\r\n            if (property === \"count\") {\r\n              parsedCount = value;\r\n            }\r\n            return Reflect.set(target, property, value);\r\n          },\r\n        });\r\n\r\n  // @ts-expect-error force type\r\n  return _seq(elementLayout, superCount, property);\r\n}\r\n","import {\r\n  bits as _bits,\r\n  BitStructure as _BitStructure,\r\n  blob as _blob,\r\n  Blob as _Blob,\r\n  cstr as _cstr,\r\n  f32 as _f32,\r\n  f32be as _f32be,\r\n  f64 as _f64,\r\n  f64be as _f64be,\r\n  greedy as _greedy,\r\n  Layout as _Layout,\r\n  ns64 as _ns64,\r\n  ns64be as _ns64be,\r\n  nu64 as _nu64,\r\n  nu64be as _nu64be,\r\n  offset as _offset,\r\n  s16 as _s16,\r\n  s16be as _s16be,\r\n  s24 as _s24,\r\n  s24be as _s24be,\r\n  s32 as _s32,\r\n  s32be as _s32be,\r\n  s40 as _s40,\r\n  s40be as _s40be,\r\n  s48 as _s48,\r\n  s48be as _s48be,\r\n  s8 as _s8,\r\n  seq as _seq,\r\n  struct as _struct,\r\n  Structure as _Structure,\r\n  u16 as _u16,\r\n  u16be as _u16be,\r\n  u24 as _u24,\r\n  u24be as _u24be,\r\n  u32 as _u32,\r\n  u32be as _u32be,\r\n  u40 as _u40,\r\n  u40be as _u40be,\r\n  u48 as _u48,\r\n  u48be as _u48be,\r\n  u8 as _u8,\r\n  UInt as _UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\r\n  utf8 as _utf8,\r\n} from \"@solana/buffer-layout\";\r\n\r\n//#region ------------------- Layout -------------------\r\nexport interface Layout<T = any, P = \"\"> {\r\n  span: number;\r\n  property?: P;\r\n  decode(b: Buffer, offset?: number): T;\r\n  encode(src: T, b: Buffer, offset?: number): number;\r\n  getSpan(b: Buffer, offset?: number): number;\r\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\r\n}\r\nexport interface LayoutConstructor {\r\n  new <T, P>(): Layout<T, P>; // for class extends syntex\r\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\r\n  readonly prototype: Layout;\r\n}\r\nexport const Layout = _Layout as unknown as LayoutConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Structure -------------------\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\r\n  extends Layout<DecodeSchema, P> {\r\n  span: number;\r\n  decode(b: Buffer, offset?: number): DecodeSchema;\r\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\r\n  offsetOf<AP extends string>(property: AP): number;\r\n}\r\ninterface StructureConstructor {\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\r\n    fields: T,\r\n    property?: P,\r\n    decodePrefixes?: boolean,\r\n  ): Structure<T, P, DecodeSchema>;\r\n}\r\nexport const Structure = _Structure as unknown as StructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Union -------------------\r\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\r\n  registry: object;\r\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\r\n  addVariant(\r\n    variant: number,\r\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\r\n    property?: string,\r\n  ): any /* TEMP: code in Layout.js 1809 */;\r\n}\r\ninterface UnionConstructor {\r\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\r\n  new <UnionSchema extends { [key: string]: any } = any>(\r\n    discr: Layout<any, any>,\r\n    defaultLayout: Layout<any, any>,\r\n    property?: string,\r\n  ): Union<UnionSchema>;\r\n}\r\nexport const Union = _Union as unknown as UnionConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- BitStructure -------------------\r\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\r\ninterface BitStructureConstructor {\r\n  new (...params: any[]): BitStructure;\r\n}\r\nexport const BitStructure = _BitStructure as BitStructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- UInt -------------------\r\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\r\ninterface UIntConstructor {\r\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\r\n}\r\nexport const UInt = _UInt as UIntConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Blob -------------------\r\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\r\ninterface BlobConstructor {\r\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\r\n}\r\nexport const Blob = _Blob as unknown as BlobConstructor;\r\n//#endregion\r\n\r\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\r\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\n\r\nexport const struct = _struct as <T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n) => T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any;\r\n\r\nexport const seq = _seq as unknown as <T, P>(\r\n  elementLayout: Layout<T, string>,\r\n  count: number | Layout<number, string>,\r\n  property?: P,\r\n) => Layout<T[]>;\r\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\r\n  discr: Layout<any, any>,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n) => Union<UnionSchema>;\r\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\r\n  layout: Layout<any, P>,\r\n  property?: P,\r\n) => any;\r\nexport const blob = _blob as unknown as <P extends string = \"\">(\r\n  length: number | Layout<number, P>,\r\n  property?: P,\r\n) => Blob<P>;\r\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\r\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\r\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\r\n  word: Layout<T>,\r\n  msb?: boolean,\r\n  property?: P,\r\n) => BitStructure<T, P>; // TODO: not quite sure\r\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\r\n  layout: Layout<T, P>,\r\n  offset?: number,\r\n  property?: P,\r\n) => Layout<T, P>;\r\n\r\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\r\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const splAccountLayout = struct([\r\n  publicKey(\"mint\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"amount\"),\r\n  u32(\"delegateOption\"),\r\n  publicKey(\"delegate\"),\r\n  u8(\"state\"),\r\n  u32(\"isNativeOption\"),\r\n  u64(\"isNative\"),\r\n  u64(\"delegatedAmount\"),\r\n  u32(\"closeAuthorityOption\"),\r\n  publicKey(\"closeAuthority\"),\r\n]);\r\n","import { PublicKey, SystemProgram } from \"@solana/web3.js\";\r\nimport { createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\r\nimport { parseBigNumberish } from \"@/common\";\r\n\r\nimport { FormatFarmKeyOut } from \"../../api/type\";\r\nimport { AddInstructionParam, jsonInfo2PoolKeys } from \"@/common\";\r\nimport { BN_ZERO } from \"@/common/bignumber\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport { FARM_PROGRAM_ID_V6 } from \"@/common/programId\";\r\nimport { SOLMint, solToWSol, WSOLMint } from \"@/common/pubKey\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { generatePubKey } from \"../account/util\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport { FormatFarmInfoOut, FormatFarmKeyOutV6 } from \"../../api/type\";\r\nimport { ComputeBudgetConfig, TxTipConfig } from \"../../raydium/type\";\r\nimport { createWSolAccountInstructions } from \"../account/instruction\";\r\nimport ModuleBase from \"../moduleBase\";\r\nimport { TOKEN_WSOL } from \"../token/constant\";\r\nimport {\r\n  FARM_LOCK_MINT,\r\n  FARM_LOCK_VAULT,\r\n  FARM_PROGRAM_TO_VERSION,\r\n  isValidFarmVersion,\r\n  poolTypeV6,\r\n  validateFarmRewards,\r\n} from \"./config\";\r\nimport {\r\n  createAssociatedLedgerAccountInstruction,\r\n  makeAddNewRewardInstruction,\r\n  makeCreateFarmInstruction,\r\n  makeCreatorWithdrawFarmRewardInstruction,\r\n  makeDepositInstructionV3,\r\n  makeDepositInstructionV5,\r\n  makeDepositInstructionV6,\r\n  makeRestartRewardInstruction,\r\n  makeWithdrawInstructionV3,\r\n  makeWithdrawInstructionV4,\r\n  makeWithdrawInstructionV5,\r\n  makeWithdrawInstructionV6,\r\n} from \"./instruction\";\r\nimport { FarmLedger, farmStateV6Layout } from \"./layout\";\r\nimport {\r\n  CreateFarm,\r\n  CreateFarmExtInfo,\r\n  FarmDWParam,\r\n  FarmRewardInfo,\r\n  FarmRewardInfoConfig,\r\n  RewardInfoKey,\r\n  UpdateFarmReward,\r\n  UpdateFarmRewards,\r\n} from \"./type\";\r\nimport {\r\n  calFarmRewardAmount,\r\n  farmRewardInfoToConfig,\r\n  getAssociatedAuthority,\r\n  getAssociatedLedgerAccount,\r\n  getAssociatedLedgerPoolAccount,\r\n  getFarmLedgerLayout,\r\n} from \"./util\";\r\n\r\nexport default class Farm extends ModuleBase {\r\n  // token account needed\r\n  private async _getUserRewardInfo({ payer, rewardInfo }: { payer: PublicKey; rewardInfo: FarmRewardInfo }): Promise<{\r\n    rewardPubKey?: PublicKey;\r\n    newInstruction?: AddInstructionParam;\r\n  }> {\r\n    if (rewardInfo.mint.equals(SOLMint)) {\r\n      const txInstructions = await createWSolAccountInstructions({\r\n        connection: this.scope.connection,\r\n        owner: this.scope.ownerPubKey,\r\n        payer,\r\n        amount: calFarmRewardAmount({\r\n          ...rewardInfo,\r\n          openTime: rewardInfo.openTime.toString(),\r\n          endTime: rewardInfo.endTime.toString(),\r\n        }),\r\n      });\r\n      return {\r\n        rewardPubKey: txInstructions.addresses.newAccount,\r\n        newInstruction: txInstructions,\r\n      };\r\n    }\r\n\r\n    return {\r\n      rewardPubKey: await this.scope.account.getCreatedTokenAccount({\r\n        mint: rewardInfo.mint,\r\n        associatedOnly: false,\r\n      })!,\r\n    };\r\n  }\r\n\r\n  // token account needed\r\n  public async create<T extends TxVersion>({\r\n    poolInfo: propPoolInfo,\r\n    rewardInfos,\r\n    payer,\r\n    programId = FARM_PROGRAM_ID_V6,\r\n    txVersion,\r\n    feePayer,\r\n  }: CreateFarm<T>): Promise<MakeTxData<T, CreateFarmExtInfo>> {\r\n    this.checkDisabled();\r\n    this.scope.checkOwner();\r\n\r\n    const lpMint = new PublicKey(propPoolInfo.lpMint.address);\r\n    const poolInfo = {\r\n      lpMint,\r\n      lockInfo: { lockMint: FARM_LOCK_MINT, lockVault: FARM_LOCK_VAULT },\r\n      version: 6,\r\n      rewardInfos,\r\n      programId,\r\n    };\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const farmKeyPair = generatePubKey({ fromPublicKey: payerPubKey, programId: poolInfo.programId });\r\n    const lamports = await this.scope.connection.getMinimumBalanceForRentExemption(farmStateV6Layout.span);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        SystemProgram.createAccountWithSeed({\r\n          fromPubkey: payerPubKey,\r\n          basePubkey: payerPubKey,\r\n          seed: farmKeyPair.seed,\r\n          newAccountPubkey: farmKeyPair.publicKey,\r\n          lamports,\r\n          space: farmStateV6Layout.span,\r\n          programId: poolInfo.programId,\r\n        }),\r\n      ],\r\n    });\r\n\r\n    const { publicKey: authority, nonce } = getAssociatedAuthority({\r\n      programId: new PublicKey(poolInfo.programId),\r\n      poolId: farmKeyPair.publicKey,\r\n    });\r\n\r\n    const lpVault = getAssociatedLedgerPoolAccount({\r\n      programId: poolInfo.programId,\r\n      poolId: farmKeyPair.publicKey,\r\n      mint: poolInfo.lpMint,\r\n      type: \"lpVault\",\r\n    });\r\n\r\n    const rewardInfoConfig: FarmRewardInfoConfig[] = [];\r\n    const rewardInfoKey: RewardInfoKey[] = [];\r\n\r\n    for (const rewardInfo of poolInfo.rewardInfos) {\r\n      if (rewardInfo.openTime >= rewardInfo.endTime)\r\n        this.logAndCreateError(\"start time error\", \"rewardInfo.rewardOpenTime\", rewardInfo.openTime.toString());\r\n      if (isNaN(poolTypeV6[rewardInfo.rewardType])) this.logAndCreateError(\"rewardType error\", rewardInfo.rewardType);\r\n      if (Number(rewardInfo.perSecond) <= 0) this.logAndCreateError(\"rewardPerSecond error\", rewardInfo.perSecond);\r\n\r\n      rewardInfoConfig.push(farmRewardInfoToConfig(rewardInfo));\r\n\r\n      const { rewardPubKey, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n      if (!rewardPubKey) this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n      const rewardMint = rewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : rewardInfo.mint;\r\n      rewardInfoKey.push({\r\n        rewardMint,\r\n        rewardVault: getAssociatedLedgerPoolAccount({\r\n          programId: poolInfo.programId,\r\n          poolId: farmKeyPair.publicKey,\r\n          mint: rewardMint,\r\n          type: \"rewardVault\",\r\n        }),\r\n        userRewardToken: rewardPubKey!,\r\n      });\r\n    }\r\n\r\n    const { account: lockUserAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n      mint: new PublicKey(poolInfo.lockInfo.lockMint),\r\n      owner: this.scope.ownerPubKey,\r\n      skipCloseAccount: false,\r\n      createInfo: {\r\n        payer: this.scope.ownerPubKey,\r\n        amount: 0,\r\n      },\r\n      associatedOnly: false,\r\n    });\r\n    instructionParams && txBuilder.addInstruction(instructionParams);\r\n    if (!lockUserAccount)\r\n      this.logAndCreateError(\"cannot found lock vault\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const { instruction, instructionType } = makeCreateFarmInstruction({\r\n      farmId: farmKeyPair.publicKey,\r\n      owner: this.scope.ownerPubKey,\r\n      farmAuthority: authority,\r\n      lpVault,\r\n      lpMint: poolInfo.lpMint,\r\n      lockVault: poolInfo.lockInfo.lockVault,\r\n      lockMint: poolInfo.lockInfo.lockMint,\r\n      lockUserAccount,\r\n      programId: poolInfo.programId,\r\n      rewardInfo: rewardInfoKey,\r\n      rewardInfoConfig,\r\n      nonce,\r\n    });\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [instruction],\r\n        instructionTypes: [instructionType],\r\n      })\r\n      .versionBuild<CreateFarmExtInfo>({\r\n        txVersion,\r\n        extInfo: {\r\n          farmId: farmKeyPair.publicKey,\r\n          farmAuthority: authority,\r\n          lpVault,\r\n          lockUserAccount: lockUserAccount!,\r\n          nonce,\r\n        },\r\n      }) as Promise<MakeTxData<T, CreateFarmExtInfo>>;\r\n  }\r\n\r\n  public async restartReward<T extends TxVersion>({\r\n    farmInfo,\r\n    payer,\r\n    newRewardInfo,\r\n    txVersion,\r\n    feePayer,\r\n  }: UpdateFarmReward): Promise<MakeTxData<T>> {\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n\r\n    const farmKeys = {\r\n      id: farmInfoKeys.id,\r\n      rewardInfos: farmInfo.rewardInfos,\r\n      lpVault: farmInfoKeys.lpVault,\r\n      programId: farmInfoKeys.programId,\r\n    };\r\n\r\n    if (newRewardInfo.openTime >= newRewardInfo.endTime)\r\n      this.logAndCreateError(\"start time error\", \"newRewardInfo\", newRewardInfo);\r\n\r\n    const payerPubKey = payer || this.scope.ownerPubKey;\r\n\r\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\r\n    const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\r\n      new PublicKey(item.mint.address).equals(rewardMint),\r\n    );\r\n    const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\r\n\r\n    if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\r\n\r\n    const rewardVault = rewardInfo!.vault ?? SOLMint;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n      rewardInfo: newRewardInfo,\r\n      payer: payerPubKey,\r\n    });\r\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n    if (!userRewardTokenPub)\r\n      this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [\r\n          makeRestartRewardInstruction({\r\n            payer: this.scope.ownerPubKey,\r\n            rewardVault,\r\n            userRewardTokenPub: userRewardTokenPub!,\r\n            farmKeys,\r\n            rewardInfo: newRewardInfo,\r\n          }),\r\n        ],\r\n        instructionTypes: [InstructionType.FarmV6Restart],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async restartRewards<T extends TxVersion>({\r\n    farmInfo,\r\n    payer,\r\n    newRewardInfos,\r\n    txVersion,\r\n    feePayer,\r\n  }: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n\r\n    const farmKeys = {\r\n      id: farmInfoKeys.id,\r\n      rewardInfos: farmInfo.rewardInfos,\r\n      lpVault: farmInfoKeys.lpVault,\r\n      programId: farmInfoKeys.programId,\r\n    };\r\n\r\n    newRewardInfos.forEach((reward) => {\r\n      if (reward.openTime >= reward.endTime) this.logAndCreateError(\"start time error\", \"newRewardInfo\", reward);\r\n    });\r\n\r\n    const payerPubKey = payer || this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    for (const itemReward of newRewardInfos) {\r\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\r\n      const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\r\n        new PublicKey(item.mint.address).equals(rewardMint),\r\n      );\r\n      const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\r\n      if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\r\n      const rewardVault = rewardInfo!.vault ?? SOLMint;\r\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo: itemReward,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n      if (!userRewardTokenPub)\r\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n      const ins = makeRestartRewardInstruction({\r\n        payer: this.scope.ownerPubKey,\r\n        rewardVault,\r\n        userRewardTokenPub: userRewardTokenPub!,\r\n        farmKeys,\r\n        rewardInfo: itemReward,\r\n      });\r\n      txBuilder.addInstruction({\r\n        instructions: [ins],\r\n        instructionTypes: [InstructionType.FarmV6Restart],\r\n      });\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async addNewRewardToken<T extends TxVersion>(params: UpdateFarmReward): Promise<MakeTxData<T>> {\r\n    const { txVersion, farmInfo, newRewardInfo, payer, feePayer } = params;\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\r\n\r\n    const rewardVault = getAssociatedLedgerPoolAccount({\r\n      programId: new PublicKey(farmInfo.programId),\r\n      poolId: new PublicKey(farmInfo.id),\r\n      mint: rewardMint,\r\n      type: \"rewardVault\",\r\n    });\r\n\r\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n      rewardInfo: newRewardInfo,\r\n      payer: payerPubKey,\r\n    });\r\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n    if (!userRewardTokenPub)\r\n      this.logAndCreateError(\"annot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n    newRewardInfo.mint = rewardMint;\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [\r\n          makeAddNewRewardInstruction({\r\n            payer: this.scope.ownerPubKey,\r\n            userRewardTokenPub: userRewardTokenPub!,\r\n            farmKeys,\r\n            rewardVault,\r\n            rewardInfo: newRewardInfo,\r\n          }),\r\n        ],\r\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async addNewRewardsToken<T extends TxVersion>(params: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\r\n    const { txVersion, farmInfo, newRewardInfos, payer, feePayer } = params;\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    for (const itemReward of newRewardInfos) {\r\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\r\n      const rewardVault = getAssociatedLedgerPoolAccount({\r\n        programId: new PublicKey(farmInfo.programId),\r\n        poolId: new PublicKey(farmInfo.id),\r\n        mint: rewardMint,\r\n        type: \"rewardVault\",\r\n      });\r\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo: itemReward,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n      if (!userRewardTokenPub)\r\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n      const ins = makeAddNewRewardInstruction({\r\n        payer: this.scope.ownerPubKey,\r\n        userRewardTokenPub: userRewardTokenPub!,\r\n        farmKeys,\r\n        rewardVault,\r\n        rewardInfo: { ...itemReward, mint: rewardMint },\r\n      });\r\n      txBuilder.addInstruction({\r\n        instructions: [ins],\r\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\r\n      });\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async deposit<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      txVersion,\r\n      farmInfo,\r\n      amount,\r\n      feePayer,\r\n      useSOLBalance,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n    } = params;\r\n\r\n    if (this.scope.availability.addFarm === false)\r\n      this.logAndCreateError(\"farm deposit feature disabled in your region\");\r\n\r\n    const { rewardInfos, programId } = farmInfo;\r\n    const version = FARM_PROGRAM_TO_VERSION[programId];\r\n    if (version === 4) this.logAndCreateError(\"V4 has suspended deposits:\", farmInfo.programId);\r\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\r\n    const [farmProgramId, farmId] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\r\n\r\n    const ledger = getAssociatedLedgerAccount({\r\n      programId: farmProgramId,\r\n      poolId: farmId,\r\n      owner: this.scope.ownerPubKey,\r\n      version: version as 3 | 5 | 6,\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint, item.programId).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    const lpMint = farmKeys.lpMint;\r\n    const ownerLpTokenAccount = ownerMintToAccount[lpMint.address];\r\n    if (!ownerLpTokenAccount) this.logAndCreateError(\"you don't have any lp\", \"lp zero\", ownerMintToAccount);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of rewardInfos) {\r\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n\r\n      if (!ownerRewardAccount) {\r\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: itemReward.mint.programId,\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerRewardAccount = _ownerRewardAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount);\r\n    }\r\n\r\n    let ledgerInfo: FarmLedger | undefined = undefined;\r\n    const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n    if (ledgerData) {\r\n      const ledgerLayout = getFarmLedgerLayout(version)!;\r\n      ledgerInfo = ledgerLayout.decode(ledgerData.data);\r\n    }\r\n\r\n    if (farmInfo.programId !== FARM_PROGRAM_ID_V6.toString() && !ledgerInfo) {\r\n      const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n        id: farmId,\r\n        programId: farmProgramId,\r\n        version,\r\n        ledger,\r\n        owner: this.scope.ownerPubKey,\r\n      });\r\n      txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n    }\r\n\r\n    const errorMsg = validateFarmRewards({\r\n      version,\r\n      rewardInfos,\r\n      rewardTokenAccountsPublicKeys: rewardAccounts,\r\n    });\r\n    if (errorMsg) this.logAndCreateError(errorMsg);\r\n\r\n    const insParams = {\r\n      amount: parseBigNumberish(amount),\r\n      owner: this.scope.ownerPubKey,\r\n      farmInfo,\r\n      farmKeys,\r\n      lpAccount: ownerLpTokenAccount,\r\n      rewardAccounts,\r\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n    };\r\n\r\n    const newInstruction =\r\n      version === 6\r\n        ? makeDepositInstructionV6(insParams)\r\n        : version === 5\r\n          ? makeDepositInstructionV5(insParams)\r\n          : makeDepositInstructionV3(insParams);\r\n\r\n    const insType = {\r\n      3: InstructionType.FarmV3Deposit,\r\n      5: InstructionType.FarmV5Deposit,\r\n      6: InstructionType.FarmV6Deposit,\r\n    };\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [newInstruction],\r\n        instructionTypes: [insType[version]],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async withdraw<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      txVersion,\r\n      farmInfo,\r\n      amount,\r\n      deposited,\r\n      useSOLBalance,\r\n      feePayer,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n    } = params;\r\n    const { rewardInfos } = farmInfo;\r\n\r\n    if (this.scope.availability.removeFarm === false)\r\n      this.logAndCreateError(\"farm withdraw feature disabled in your region\");\r\n\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n\r\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\r\n\r\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    if (version !== 4) {\r\n      const ledger = getAssociatedLedgerAccount({\r\n        programId: new PublicKey(farmInfo.programId),\r\n        poolId: new PublicKey(farmInfo.id),\r\n        owner: this.scope.ownerPubKey,\r\n        version,\r\n      });\r\n      const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n\r\n      if (!ledgerData) {\r\n        // user has old none ata farm vault and don't have ata vault\r\n        if (version !== 6) {\r\n          const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n            id: new PublicKey(farmKeys.id),\r\n            programId: new PublicKey(farmKeys.programId),\r\n            version,\r\n            ledger,\r\n            owner: this.scope.ownerPubKey,\r\n          });\r\n          txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n        }\r\n      } else {\r\n        const ledgerLayout = getFarmLedgerLayout(version)!;\r\n        const ledgerInfo = ledgerLayout.decode(ledgerData!.data);\r\n        if (ledgerInfo.deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n      }\r\n    }\r\n\r\n    if (deposited && deposited.isZero() && !(userAuxiliaryLedgers || []).length)\r\n      this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n\r\n    // if (!deposited && version !== 4) {\r\n    // const ledger = getAssociatedLedgerAccount({\r\n    //   programId: new PublicKey(farmInfo.programId),\r\n    //   poolId: new PublicKey(farmInfo.id),\r\n    //   owner: this.scope.ownerPubKey,\r\n    //   version,\r\n    // });\r\n    // const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n    // if (!ledgerData) {\r\n    // user has old not ata farm vault and don't have ata vault\r\n    // if (version !== 6 && (userAuxiliaryLedgers || []).length > 0) {\r\n    //   const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n    //     id: new PublicKey(farmKeys.id),\r\n    //     programId: new PublicKey(farmKeys.programId),\r\n    //     version,\r\n    //     ledger,\r\n    //     owner: this.scope.ownerPubKey,\r\n    //   });\r\n    //   txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n    // } else {\r\n    //   this.logAndCreateError(\"no lp data\", { farmId: farmInfo.id, version, ledgerData });\r\n    // }\r\n    // } else {\r\n    //   const ledgerLayout = getFarmLedgerLayout(version)!;\r\n    //   const ledgerInfo = ledgerLayout.decode(ledgerData!.data);\r\n    //   if (ledgerInfo.deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n    // }\r\n    // } else if (deposited) {\r\n    //   if (deposited.isZero() && !(userAuxiliaryLedgers || []).length)\r\n    //     this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n    // }\r\n\r\n    const lpMint = farmKeys.lpMint.address;\r\n    const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\r\n\r\n    let ownerLpTokenAccount = ownerMintToAccount[lpMint.toString()];\r\n    if (!ownerLpTokenAccount) {\r\n      const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: farmKeys.lpMint.programId,\r\n        mint: new PublicKey(lpMint),\r\n        notUseTokenAccount: lpMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: true,\r\n        associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerLpTokenAccount = _ownerRewardAccount!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n    ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of rewardInfos) {\r\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n      if (!ownerRewardAccount) {\r\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: itemReward.mint.programId,\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerRewardAccount = _ownerRewardAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount);\r\n    }\r\n\r\n    const errorMsg = validateFarmRewards({\r\n      version,\r\n      rewardInfos,\r\n      rewardTokenAccountsPublicKeys: rewardAccounts,\r\n    });\r\n    if (errorMsg) this.logAndCreateError(errorMsg);\r\n\r\n    const insParams = {\r\n      amount: parseBigNumberish(amount),\r\n      owner: this.scope.ownerPubKey,\r\n      farmInfo,\r\n      farmKeys,\r\n      lpAccount: ownerLpTokenAccount,\r\n      rewardAccounts,\r\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n    };\r\n\r\n    const newInstruction =\r\n      version === 6\r\n        ? makeWithdrawInstructionV6(insParams)\r\n        : version === 5\r\n          ? makeWithdrawInstructionV5(insParams)\r\n          : version === 4\r\n            ? makeWithdrawInstructionV4(insParams)\r\n            : makeWithdrawInstructionV3(insParams);\r\n\r\n    const insType = {\r\n      3: InstructionType.FarmV3Withdraw,\r\n      4: InstructionType.FarmV4Withdraw,\r\n      5: InstructionType.FarmV5Withdraw,\r\n      6: InstructionType.FarmV6Withdraw,\r\n    };\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [newInstruction],\r\n        instructionTypes: [insType[version]],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  // token account needed\r\n  public async withdrawFarmReward<T extends TxVersion>({\r\n    farmInfo,\r\n    withdrawMint,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    farmInfo: FormatFarmInfoOut;\r\n    withdrawMint: PublicKey;\r\n    payer?: PublicKey;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    txVersion?: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    this.scope.checkOwner();\r\n    const farmKeys = jsonInfo2PoolKeys(\r\n      (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0] as FormatFarmKeyOutV6,\r\n    );\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version\", version);\r\n\r\n    // const rewardInfoIdx = farmInfo.rewardInfos.findIndex((item) =>\r\n    //   item.mint.address === SOLMint.toString() ? new PublicKey(TOKEN_WSOL.address) : withdrawMint,\r\n    // );\r\n    const rewardInfo = farmKeys.rewardInfos.find((r) => solToWSol(r.mint.address).equals(solToWSol(withdrawMint)));\r\n    if (!rewardInfo) this.logAndCreateError(\"withdraw mint error\", \"rewardInfos\", farmInfo);\r\n\r\n    const rewardVault = rewardInfo?.vault ?? SOLMint;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let userRewardToken: PublicKey;\r\n\r\n    if (withdrawMint.equals(SOLMint) || withdrawMint.equals(PublicKey.default)) {\r\n      const txInstruction = await createWSolAccountInstructions({\r\n        connection: this.scope.connection,\r\n        owner: this.scope.ownerPubKey,\r\n        payer: this.scope.ownerPubKey,\r\n        amount: calFarmRewardAmount({\r\n          ...rewardInfo,\r\n          openTime: rewardInfo!.openTime as unknown as string,\r\n          endTime: rewardInfo!.endTime as unknown as string,\r\n          perSecond: new Decimal(rewardInfo!.perSecond).mul(10 ** rewardInfo!.mint.decimals).toString(),\r\n        }),\r\n      });\r\n      userRewardToken = txInstruction.addresses.newAccount;\r\n      txBuilder.addInstruction(txInstruction);\r\n    } else {\r\n      const selectUserRewardToken = await this.scope.account.getCreatedTokenAccount({\r\n        mint: withdrawMint,\r\n      });\r\n\r\n      if (selectUserRewardToken === null) {\r\n        userRewardToken = await this.scope.account.getAssociatedTokenAccount(withdrawMint);\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            createAssociatedTokenAccountInstruction(\r\n              this.scope.ownerPubKey,\r\n              userRewardToken,\r\n              this.scope.ownerPubKey,\r\n              withdrawMint,\r\n            ),\r\n          ],\r\n          instructionTypes: [InstructionType.CreateATA],\r\n        });\r\n      } else {\r\n        userRewardToken = selectUserRewardToken!;\r\n      }\r\n    }\r\n\r\n    const { instruction, instructionType } = makeCreatorWithdrawFarmRewardInstruction({\r\n      programId: farmKeys.programId,\r\n      id: farmKeys.id,\r\n      authority: farmKeys.authority,\r\n      lpVault: farmKeys.lpVault,\r\n      rewardVault,\r\n      userRewardToken,\r\n      owner: this.scope.ownerPubKey,\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [instruction],\r\n        instructionTypes: [instructionType],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>(params: {\r\n    farmInfoList: Record<string, FormatFarmInfoOut>;\r\n    feePayer?: PublicKey;\r\n    useSOLBalance?: boolean;\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    userAuxiliaryLedgers?: string[];\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n  }): Promise<MakeMultiTxData<T>> {\r\n    const {\r\n      farmInfoList,\r\n      useSOLBalance,\r\n      feePayer,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      txVersion,\r\n      computeBudgetConfig,\r\n    } = params;\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    const allFarmKeys = await this.scope.api.fetchFarmKeysById({\r\n      ids: Object.values(farmInfoList)\r\n        .map((f) => f.id)\r\n        .join(\",\"),\r\n    });\r\n    const farmKeyMap: { [key: string]: FormatFarmKeyOut } = allFarmKeys.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.id]: cur }),\r\n      {},\r\n    );\r\n    for (const farmInfo of Object.values(farmInfoList)) {\r\n      const { programId, lpMint: farmLpMint, rewardInfos, id } = farmInfo;\r\n      const version = FARM_PROGRAM_TO_VERSION[programId];\r\n\r\n      const lpMint = farmLpMint.address;\r\n      const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\r\n      let ownerLpTokenAccount = ownerMintToAccount[lpMint];\r\n\r\n      if (!ownerLpTokenAccount) {\r\n        const { account: _ownerLpAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: farmLpMint.programId,\r\n          mint: new PublicKey(lpMint),\r\n          notUseTokenAccount: lpMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: true,\r\n          associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerLpTokenAccount = _ownerLpAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n      ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n      for (const itemReward of rewardInfos) {\r\n        const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: itemReward.mint.programId,\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            createInfo: {\r\n              payer: feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n          ownerRewardAccount = _ownerRewardAccount!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount);\r\n      }\r\n\r\n      const farmKeys = farmKeyMap[id];\r\n      const insParams = {\r\n        amount: BN_ZERO,\r\n        owner: this.scope.ownerPubKey,\r\n        farmInfo,\r\n        farmKeys,\r\n        lpAccount: ownerLpTokenAccount,\r\n        rewardAccounts,\r\n        userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n      };\r\n\r\n      const withdrawInstruction =\r\n        version === 6\r\n          ? makeWithdrawInstructionV6(insParams)\r\n          : version === 5\r\n            ? makeWithdrawInstructionV5(insParams)\r\n            : makeWithdrawInstructionV3(insParams);\r\n\r\n      const insType = {\r\n        3: InstructionType.FarmV3Withdraw,\r\n        5: InstructionType.FarmV5Withdraw,\r\n        6: InstructionType.FarmV6Withdraw,\r\n      };\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [withdrawInstruction],\r\n        instructionTypes: [insType[version]],\r\n      });\r\n    }\r\n\r\n    if (txVersion === TxVersion.LEGACY)\r\n      return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { ApiV3Token } from \"../../api/type\";\r\nimport { createLogger } from \"../../common/logger\";\r\nimport { FARM_PROGRAM_ID_V3, FARM_PROGRAM_ID_V4, FARM_PROGRAM_ID_V5, FARM_PROGRAM_ID_V6 } from \"../../common/programId\";\r\n\r\nimport {\r\n  FarmLedgerLayout,\r\n  farmLedgerLayoutV3_2,\r\n  farmLedgerLayoutV5_2,\r\n  farmLedgerLayoutV6_1,\r\n  FarmStateLayout,\r\n  farmStateV3Layout,\r\n  farmStateV5Layout,\r\n  farmStateV6Layout,\r\n} from \"./layout\";\r\n\r\nconst logger = createLogger(\"Raydium_farm_config\");\r\n\r\nexport type FarmVersion = 3 | 4 | 5 | 6;\r\nexport const FARM_LOCK_MINT = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const FARM_LOCK_VAULT = new PublicKey(\"FrspKwj8i3pNmKwXreTveC4fu7KL5ZbGeXdZBe2XViu1\");\r\n\r\n/* ================= index ================= */\r\n// version => farm state layout\r\nexport const FARM_VERSION_TO_STATE_LAYOUT: {\r\n  [version in FarmVersion]?: FarmStateLayout;\r\n} = {\r\n  3: farmStateV3Layout,\r\n  5: farmStateV5Layout,\r\n  6: farmStateV6Layout,\r\n};\r\n\r\n// version => farm ledger layout\r\nexport const FARM_VERSION_TO_LEDGER_LAYOUT: {\r\n  [version in FarmVersion]?: FarmLedgerLayout;\r\n} = {\r\n  3: farmLedgerLayoutV3_2,\r\n  5: farmLedgerLayoutV5_2,\r\n  6: farmLedgerLayoutV6_1,\r\n};\r\n\r\nexport const isValidFarmVersion = (version: number): boolean => [3, 4, 5, 6].indexOf(version) !== -1;\r\n\r\nexport const validateFarmRewards = (params: {\r\n  version: number;\r\n  rewardInfos: { mint: ApiV3Token }[];\r\n  rewardTokenAccountsPublicKeys: PublicKey[];\r\n}): (() => string | undefined) => {\r\n  const { version, rewardInfos, rewardTokenAccountsPublicKeys } = params;\r\n\r\n  const infoMsg = `rewardInfo:${JSON.stringify(rewardInfos)}, rewardAccount:${JSON.stringify(\r\n    rewardTokenAccountsPublicKeys,\r\n  )}`;\r\n\r\n  const validator = {\r\n    3: (): string | undefined => {\r\n      if (rewardInfos.length !== 1 || rewardTokenAccountsPublicKeys.length !== 1) {\r\n        return `rewardInfos or rewardTokenAccounts lengths not equal 1: ${infoMsg}`;\r\n      }\r\n    },\r\n    5: (): string | undefined => {\r\n      if (rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\r\n        return `rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\r\n      }\r\n    },\r\n    6: (): string | undefined => {\r\n      if (!rewardTokenAccountsPublicKeys.length || rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\r\n        return `no rewardTokenAccounts or rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\r\n      }\r\n    },\r\n  };\r\n\r\n  return validator[version]?.();\r\n};\r\n\r\nexport const poolTypeV6 = { \"Standard SPL\": 0, \"Option tokens\": 1 };\r\n\r\nexport const FARM_PROGRAM_TO_VERSION: Record<string, 3 | 4 | 5 | 6> = {\r\n  [FARM_PROGRAM_ID_V3.toString()]: 3,\r\n  [FARM_PROGRAM_ID_V4.toString()]: 4,\r\n  [FARM_PROGRAM_ID_V5.toString()]: 5,\r\n  [FARM_PROGRAM_ID_V6.toString()]: 6,\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  blob,\r\n  bool,\r\n  GetLayoutSchemaFromStructure,\r\n  GetStructureFromLayoutSchema,\r\n  GetStructureSchema,\r\n  i64,\r\n  i8,\r\n  publicKey,\r\n  seq,\r\n  struct,\r\n  u128,\r\n  u64,\r\n  u8,\r\n} from \"../../marshmallow\";\r\n\r\nimport { poolTypeV6 } from \"./config\";\r\nimport { RewardType } from \"./type\";\r\n\r\nexport const associatedLedgerAccountLayout = struct([u8(\"instruction\")]);\r\nexport const withdrawRewardLayout = struct([u8(\"instruction\")]);\r\n\r\nconst farmStateRewardInfoV6Layout = struct([\r\n  u64(\"rewardState\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardLastUpdateTime\"),\r\n  u64(\"totalReward\"),\r\n  u64(\"totalRewardEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u128(\"accRewardPerShare\"),\r\n  publicKey(\"rewardVault\"),\r\n  publicKey(\"rewardMint\"),\r\n  publicKey(\"rewardSender\"),\r\n  u64(\"rewardType\"),\r\n  seq(u64(), 15, \"padding\"),\r\n]);\r\n\r\nexport const realFarmStateV3Layout = struct([\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"rewardVault\"),\r\n  publicKey(),\r\n  publicKey(),\r\n  u64(),\r\n  u64(),\r\n  u64(\"totalReward\"),\r\n  u128(\"perShareReward\"),\r\n  u64(\"lastSlot\"),\r\n  u64(\"perSlotReward\"),\r\n]);\r\n\r\nexport const realFarmStateV5Layout = struct([\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"rewardVaultA\"),\r\n  u64(\"totalRewardA\"),\r\n  u128(\"perShareRewardA\"),\r\n  u64(\"perSlotRewardA\"),\r\n  u8(\"option\"),\r\n  publicKey(\"rewardVaultB\"),\r\n  blob(7),\r\n  u64(\"totalRewardB\"),\r\n  u128(\"perShareRewardB\"),\r\n  u64(\"perSlotRewardB\"),\r\n  u64(\"lastSlot\"),\r\n  publicKey(),\r\n]);\r\n\r\nexport const realFarmV6Layout = struct([\r\n  u64(),\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  u64(\"validRewardTokenNum\"),\r\n  u128(\"rewardMultiplier\"),\r\n  u64(\"rewardPeriodMax\"),\r\n  u64(\"rewardPeriodMin\"),\r\n  u64(\"rewardPeriodExtend\"),\r\n  publicKey(\"lpMint\"),\r\n  publicKey(\"lpVault\"),\r\n  seq(farmStateRewardInfoV6Layout, 5, \"rewardInfos\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(),\r\n  seq(u64(), 32, \"padding\"),\r\n]);\r\n\r\nexport const farmStateV3Layout = new Proxy(\r\n  realFarmStateV3Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 3;\r\n      rewardInfos: {\r\n        rewardVault: PublicKey;\r\n        totalReward: BN;\r\n        perSlotReward: BN;\r\n        perShareReward: BN;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV3Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 3,\r\n            rewardInfos: [\r\n              {\r\n                rewardVault: originalResult.rewardVault,\r\n                totalReward: originalResult.totalReward,\r\n                perSlotReward: originalResult.perSlotReward,\r\n                perShareReward: originalResult.perShareReward,\r\n              },\r\n            ],\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmStateV5Layout = new Proxy(\r\n  realFarmStateV5Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 5;\r\n      rewardInfos: {\r\n        rewardVault: PublicKey;\r\n        totalReward: BN;\r\n        perSlotReward: BN;\r\n        perShareReward: BN;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV5Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 5,\r\n            rewardInfos: [\r\n              {\r\n                rewardVault: originalResult.rewardVaultA,\r\n                totalReward: originalResult.totalRewardA,\r\n                perSlotReward: originalResult.perSlotRewardA,\r\n                perShareReward: originalResult.perShareRewardA,\r\n              },\r\n              {\r\n                rewardVault: originalResult.rewardVaultB,\r\n                totalReward: originalResult.totalRewardB,\r\n                perSlotReward: originalResult.perSlotRewardB,\r\n                perShareReward: originalResult.perShareRewardB,\r\n              },\r\n            ],\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmStateV6Layout = new Proxy(\r\n  realFarmV6Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 6;\r\n      rewardInfos: {\r\n        rewardState: BN;\r\n        rewardOpenTime: BN;\r\n        rewardEndTime: BN;\r\n        rewardLastUpdateTime: BN;\r\n        totalReward: BN;\r\n        totalRewardEmissioned: BN;\r\n        rewardClaimed: BN;\r\n        rewardPerSecond: BN;\r\n        accRewardPerShare: BN;\r\n        rewardVault: PublicKey;\r\n        rewardMint: PublicKey;\r\n        rewardSender: PublicKey;\r\n        rewardType: RewardType;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmV6Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 6,\r\n            rewardInfos: originalResult.rewardInfos.map((item) => ({\r\n              ...item,\r\n              rewardType: (Object.entries(poolTypeV6).find((i) => String(i[1]) === item.rewardType.toString()) ?? [\r\n                \"Standard SPL\",\r\n              ])[0],\r\n            })),\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmRewardTimeInfoLayout = struct([\r\n  u64(\"isSet\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardType\"),\r\n]);\r\n\r\nexport const farmRewardLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"nonce\"),\r\n  seq(farmRewardTimeInfoLayout, 5, \"rewardTimeInfo\"),\r\n]);\r\n\r\nexport const farmRewardRestartLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"rewardReopenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardPerSecond\"),\r\n]);\r\n\r\nexport const farmAddRewardLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"isSet\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardType\"),\r\n]);\r\n\r\nexport type FarmStateLayoutV3 = typeof farmStateV3Layout;\r\nexport type FarmStateLayoutV5 = typeof farmStateV5Layout;\r\nexport type FarmStateLayoutV6 = typeof farmStateV6Layout;\r\n\r\nexport type FarmStateV3 = GetStructureSchema<FarmStateLayoutV3>;\r\nexport type FarmStateV5 = GetStructureSchema<FarmStateLayoutV5>;\r\nexport type FarmStateV6 = GetStructureSchema<FarmStateLayoutV6>;\r\n\r\nexport type FarmState = FarmStateV3 | FarmStateV5 | FarmStateV6;\r\n// farmStateLayoutV3\r\nexport type FarmStateLayout = FarmStateLayoutV3 | FarmStateLayoutV5 | FarmStateLayoutV6;\r\n\r\n/* ================= ledger layouts ================= */\r\nexport const farmLedgerLayoutV3_1 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u64(), 1, \"rewardDebts\"),\r\n]);\r\n\r\nexport const farmLedgerLayoutV3_2 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 1, \"rewardDebts\"),\r\n  u64(\"\"),\r\n  u64(\"voteLockedBalance\"),\r\n  seq(u64(), 15),\r\n]);\r\n\r\nexport const farmLedgerLayoutV5_1 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u64(), 2, \"rewardDebts\"),\r\n]);\r\n\r\nexport const farmLedgerLayoutV5_2 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 2, \"rewardDebts\"),\r\n  seq(u64(), 17),\r\n]);\r\n\r\nexport const farmLedgerLayoutV6_1 = struct([\r\n  u64(),\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 5, \"rewardDebts\"),\r\n  seq(u64(), 16),\r\n]);\r\n\r\nexport type FarmLedgerLayoutV3_1 = typeof farmLedgerLayoutV3_1;\r\nexport type FarmLedgerLayoutV3_2 = typeof farmLedgerLayoutV3_2;\r\nexport type FarmLedgerLayoutV5_1 = typeof farmLedgerLayoutV5_1;\r\nexport type FarmLedgerLayoutV5_2 = typeof farmLedgerLayoutV5_2;\r\nexport type FarmLedgerLayoutV6_1 = typeof farmLedgerLayoutV6_1;\r\nexport type FarmLedgerLayout =\r\n  | FarmLedgerLayoutV3_1\r\n  | FarmLedgerLayoutV3_2\r\n  | FarmLedgerLayoutV5_1\r\n  | FarmLedgerLayoutV5_2\r\n  | FarmLedgerLayoutV6_1;\r\n\r\nexport type FarmLedgerV3_1 = GetStructureSchema<FarmLedgerLayoutV3_1>;\r\nexport type FarmLedgerV3_2 = GetStructureSchema<FarmLedgerLayoutV3_2>;\r\nexport type FarmLedgerV5_1 = GetStructureSchema<FarmLedgerLayoutV5_1>;\r\nexport type FarmLedgerV5_2 = GetStructureSchema<FarmLedgerLayoutV5_2>;\r\nexport type FarmLedgerV6_1 = GetStructureSchema<FarmLedgerLayoutV6_1>;\r\nexport type FarmLedger = FarmLedgerV3_1 | FarmLedgerV3_2 | FarmLedgerV5_1 | FarmLedgerV5_2 | FarmLedgerV6_1;\r\n\r\nexport const dwLayout = struct([u8(\"instruction\"), u64(\"amount\")]);\r\n\r\nexport const VoterVotingMintConfig = struct([\r\n  publicKey(\"mint\"),\r\n  publicKey(\"grantAuthority\"),\r\n  u64(\"baselineVoteWeightScaledFactor\"),\r\n  u64(\"maxExtraLockupVoteWeightScaledFactor\"),\r\n  u64(\"lockupSaturationSecs\"),\r\n\r\n  i8(\"digitShift\"), // TODO\r\n  seq(u8(), 7, \"reserved1\"),\r\n  seq(u64(), 7, \"reserved2\"),\r\n]);\r\n\r\nexport const VoterRegistrar = struct([\r\n  blob(8),\r\n  publicKey(\"governanceProgramId\"),\r\n  publicKey(\"realm\"),\r\n  publicKey(\"realmGoverningTokenMint\"),\r\n  publicKey(\"realmAuthority\"),\r\n\r\n  seq(u8(), 32, \"reserved1\"),\r\n  seq(VoterVotingMintConfig, 4, \"votingMints\"),\r\n\r\n  i64(\"timeOffset\"),\r\n  u8(\"bump\"),\r\n  seq(u8(), 7, \"reserved2\"),\r\n  seq(u64(), 11, \"reserved3\"),\r\n]);\r\n\r\nexport const VoterLockup = struct([i64(\"startTime\"), i64(\"endTime\"), u8(\"kind\"), seq(u8(), 15, \"reserved\")]);\r\n\r\nexport const VoterDepositEntry = struct([\r\n  seq(VoterLockup, 1, \"lockup\"),\r\n  u64(\"amountDeposited_native\"),\r\n  u64(\"amountInitiallyLockedNative\"),\r\n  bool(\"isUsed\"),\r\n  bool(\"allowClawback\"),\r\n  u8(\"votingMintConfigIdx\"),\r\n  seq(u8(), 29, \"reserved\"),\r\n]);\r\n\r\nexport const Voter = struct([\r\n  blob(8),\r\n  publicKey(\"voterAuthority\"),\r\n  publicKey(\"registrar\"),\r\n\r\n  seq(VoterDepositEntry, 32, \"deposits\"),\r\n\r\n  u8(\"voterBump\"),\r\n  u8(\"voterWweightRecordBump\"),\r\n  seq(u8(), 94, \"reserved\"),\r\n]);\r\n","import {\r\n  Connection,\r\n  PublicKey,\r\n  SystemProgram,\r\n  SYSVAR_CLOCK_PUBKEY,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport {\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  createAssociatedTokenAccountInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\n\r\nimport { FormatFarmKeyOut } from \"@/api/type\";\r\nimport { parseBigNumberish } from \"@/common\";\r\nimport { createLogger } from \"@/common/logger\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport {\r\n  accountMeta,\r\n  commonSystemAccountMeta,\r\n  INSTRUCTION_PROGRAM_ID,\r\n  RENT_PROGRAM_ID,\r\n  SOLMint,\r\n} from \"@/common/pubKey\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { bool, struct, u32, u64, u8 } from \"../../marshmallow\";\r\nimport { InstructionReturn } from \"../type\";\r\nimport { poolTypeV6 } from \"./config\";\r\nimport {\r\n  associatedLedgerAccountLayout,\r\n  dwLayout,\r\n  farmAddRewardLayout,\r\n  farmLedgerLayoutV3_2,\r\n  farmRewardLayout,\r\n  farmRewardRestartLayout,\r\n  withdrawRewardLayout,\r\n} from \"./layout\";\r\nimport {\r\n  getRegistrarAddress,\r\n  getTokenOwnerRecordAddress,\r\n  getVoterAddress,\r\n  getVoterWeightRecordAddress,\r\n  getVotingMintAuthority,\r\n  getVotingTokenMint,\r\n} from \"./pda\";\r\nimport { FarmRewardInfoConfig, RewardInfoKey, RewardType } from \"./type\";\r\nimport { getAssociatedLedgerAccount, getDepositEntryIndex } from \"./util\";\r\n\r\nconst logger = createLogger(\"Raydium_farm_instruction\");\r\n\r\nconst anchorDataBuf = {\r\n  voterStakeRegistryCreateVoter: Buffer.from([6, 24, 245, 52, 243, 255, 148, 25]), // CreateVoter\r\n  voterStakeRegistryCreateDepositEntry: Buffer.from([185, 131, 167, 186, 159, 125, 19, 67]), // CreateDepositEntry\r\n  voterStakeRegistryDeposit: Buffer.from([242, 35, 198, 137, 82, 225, 242, 182]), // Deposit\r\n  voterStakeRegistryWithdraw: Buffer.from([183, 18, 70, 156, 148, 109, 161, 34]), // Withdraw\r\n  voterStakeRegistryUpdateVoterWeightRecord: Buffer.from([45, 185, 3, 36, 109, 190, 115, 169]), // UpdateVoterWeightRecord\r\n};\r\n\r\nexport function createAssociatedLedgerAccountInstruction(params: {\r\n  version: number;\r\n  id: PublicKey;\r\n  programId: PublicKey;\r\n  ledger: PublicKey;\r\n  owner: PublicKey;\r\n}): InstructionReturn {\r\n  const { version, id, ledger, programId, owner } = params;\r\n  const instruction = { 3: 9, 5: 10 }[version];\r\n  if (!instruction) logger.logWithError(`invalid farm pool version: ${version}`);\r\n\r\n  const data = Buffer.alloc(associatedLedgerAccountLayout.span);\r\n  associatedLedgerAccountLayout.encode(\r\n    {\r\n      instruction: instruction!,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: ledger }),\r\n    accountMeta({ pubkey: owner, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      programId,\r\n      keys,\r\n      data,\r\n    }),\r\n    instructionType: InstructionType.FarmV3CreateLedger,\r\n  };\r\n}\r\n\r\ninterface CreateFarmInstruction {\r\n  farmId: PublicKey;\r\n  farmAuthority: PublicKey;\r\n  lpVault: PublicKey;\r\n  lpMint: PublicKey;\r\n  lockVault: PublicKey;\r\n  lockMint: PublicKey;\r\n  lockUserAccount?: PublicKey;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  rewardInfo: RewardInfoKey[];\r\n  rewardInfoConfig: FarmRewardInfoConfig[];\r\n  nonce: number;\r\n}\r\nexport function makeCreateFarmInstruction(params: CreateFarmInstruction): InstructionReturn {\r\n  const data = Buffer.alloc(farmRewardLayout.span);\r\n  farmRewardLayout.encode(\r\n    {\r\n      instruction: 0,\r\n      nonce: new BN(params.nonce),\r\n      rewardTimeInfo: params.rewardInfoConfig,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    ...commonSystemAccountMeta,\r\n    accountMeta({ pubkey: params.farmId }),\r\n    accountMeta({ pubkey: params.farmAuthority, isWritable: false }),\r\n    accountMeta({ pubkey: params.lpVault }),\r\n    accountMeta({ pubkey: params.lpMint, isWritable: false }),\r\n    accountMeta({ pubkey: params.lockVault }),\r\n    accountMeta({ pubkey: params.lockMint, isWritable: false }),\r\n    accountMeta({ pubkey: params.lockUserAccount ?? SOLMint }),\r\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  for (const item of params.rewardInfo) {\r\n    keys.push(\r\n      ...[\r\n        accountMeta({ pubkey: item.rewardMint, isWritable: false }),\r\n        accountMeta({ pubkey: item.rewardVault }),\r\n        accountMeta({ pubkey: item.userRewardToken }),\r\n      ],\r\n    );\r\n  }\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\r\n    instructionType: InstructionType.FarmV6Create,\r\n  };\r\n}\r\n\r\ninterface CreatorWithdrawFarmRewardInstruction {\r\n  id: PublicKey;\r\n  programId: PublicKey;\r\n  authority: PublicKey;\r\n  lpVault: PublicKey;\r\n  rewardVault: PublicKey;\r\n  userRewardToken: PublicKey;\r\n  owner: PublicKey;\r\n}\r\n\r\nexport function makeCreatorWithdrawFarmRewardInstruction(\r\n  params: CreatorWithdrawFarmRewardInstruction,\r\n): InstructionReturn {\r\n  const data = Buffer.alloc(withdrawRewardLayout.span);\r\n  withdrawRewardLayout.encode({ instruction: 5 }, data);\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: params.id }),\r\n    accountMeta({ pubkey: params.authority, isWritable: false }),\r\n    accountMeta({ pubkey: params.lpVault, isWritable: false }),\r\n    accountMeta({ pubkey: params.rewardVault }),\r\n    accountMeta({ pubkey: params.userRewardToken }),\r\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\r\n    instructionType: InstructionType.FarmV6CreatorWithdraw,\r\n  };\r\n}\r\n\r\nexport function voterStakeRegistryDeposit(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterVault: PublicKey,\r\n  depositToken: PublicKey,\r\n  depositAuthority: PublicKey,\r\n\r\n  userStakerInfoV2: PublicKey,\r\n  pool: PublicKey,\r\n  votingMint: PublicKey,\r\n  votingMintAuthority: PublicKey,\r\n  stakeProgramId: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  amount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterVault, isSigner: false, isWritable: true },\r\n    { pubkey: depositToken, isSigner: false, isWritable: true },\r\n    { pubkey: depositAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\r\n    { pubkey: pool, isSigner: false, isWritable: false },\r\n    { pubkey: votingMint, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryDeposit, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryUpdateVoterWeightRecord(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: false },\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({}, data);\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryUpdateVoterWeightRecord, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryWithdraw(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  tokenOwnerRecord: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n  vault: PublicKey,\r\n  destination: PublicKey,\r\n\r\n  userStakerInfoV2: PublicKey,\r\n  pool: PublicKey,\r\n  votingMint: PublicKey,\r\n  votingMintAuthority: PublicKey,\r\n  stakeProgramId: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  amount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: tokenOwnerRecord, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: vault, isSigner: false, isWritable: true },\r\n    { pubkey: destination, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\r\n    { pubkey: pool, isSigner: false, isWritable: false },\r\n    { pubkey: votingMint, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryWithdraw, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function governanceCreateTokenOwnerRecord(\r\n  programId: PublicKey,\r\n  realm: PublicKey,\r\n  governingTokenOwner: PublicKey,\r\n  governingTokenMint: PublicKey,\r\n  payer: PublicKey,\r\n  tokenOwnerRecordAddress: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"ins\")]);\r\n\r\n  const keys = [\r\n    { pubkey: realm, isSigner: false, isWritable: false },\r\n    { pubkey: governingTokenOwner, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenOwnerRecordAddress, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: governingTokenMint, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ ins: 23 }, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryCreateVoter(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  payer: PublicKey,\r\n\r\n  voterBump: number,\r\n  voterWeightRecordBump: number,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"voterBump\"), u8(\"voterWeightRecordBump\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ voterBump, voterWeightRecordBump }, data);\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateVoter, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryCreateDepositEntry(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterVault: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  payer: PublicKey,\r\n  depositMint: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  kind: number,\r\n  startTs: BN | undefined,\r\n  periods: number,\r\n  allowClawback: boolean,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([\r\n    u8(\"depositEntryIndex\"),\r\n    u8(\"kind\"),\r\n    u8(\"option\"),\r\n    u64(\"startTs\"),\r\n    u32(\"periods\"),\r\n    bool(\"allowClawback\"),\r\n  ]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterVault, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: depositMint, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      kind,\r\n      option: startTs === undefined ? 0 : 1,\r\n      startTs: startTs!,\r\n      periods,\r\n      allowClawback,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateDepositEntry, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport async function makeDepositTokenInstruction({\r\n  connection,\r\n  programId,\r\n  governanceProgramId,\r\n  voteWeightAddinProgramId,\r\n  realm,\r\n  communityTokenMint,\r\n  owner,\r\n  poolId,\r\n  tokenProgram,\r\n}: {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  governanceProgramId: PublicKey;\r\n  voteWeightAddinProgramId: PublicKey;\r\n  realm: PublicKey;\r\n  communityTokenMint: PublicKey;\r\n  owner: PublicKey;\r\n  poolId: PublicKey;\r\n  tokenProgram?: PublicKey;\r\n}): Promise<TransactionInstruction[]> {\r\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\r\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\r\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\r\n  if (ownerAccountInfo === null) {\r\n    throw Error(\"user is not staker\");\r\n  }\r\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\r\n  const mintAmount = ownerInfo.deposited.sub(ownerInfo.voteLockedBalance);\r\n  console.log(\"amount\", mintAmount.toString());\r\n  if (mintAmount.eq(new BN(0))) {\r\n    throw Error(\"user do not has new stake amount\");\r\n  }\r\n\r\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\r\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\r\n  const { publicKey: voter, nonce: voterBump } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\r\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\r\n\r\n  const { publicKey: voterWeightRecord, nonce: voterWeightRecordBump } = getVoterWeightRecordAddress(\r\n    voteWeightAddinProgramId,\r\n    registrar,\r\n    owner,\r\n  );\r\n\r\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\r\n    governanceProgramId,\r\n    realm,\r\n    communityTokenMint,\r\n    owner,\r\n  ).publicKey;\r\n\r\n  const instructions: TransactionInstruction[] = [];\r\n\r\n  const depositToken = getATAAddress(owner, votingMint, tokenProgram).publicKey;\r\n  const depositTokenAccountInfo = await connection.getAccountInfo(depositToken);\r\n  if (depositTokenAccountInfo === null) {\r\n    instructions.push(createAssociatedTokenAccountInstruction(owner, depositToken, owner, votingMint));\r\n  }\r\n  const voterAccountInfo = await connection.getAccountInfo(voter);\r\n  if (voterAccountInfo === null) {\r\n    const createTokenOwnerRecodeIns = governanceCreateTokenOwnerRecord(\r\n      governanceProgramId,\r\n      realm,\r\n      owner,\r\n      communityTokenMint,\r\n      owner,\r\n      tokenOwnerRecordAddress,\r\n    );\r\n\r\n    instructions.push(\r\n      createTokenOwnerRecodeIns,\r\n      voterStakeRegistryCreateVoter(\r\n        voteWeightAddinProgramId,\r\n        registrar,\r\n        voter,\r\n        voterWeightRecord,\r\n        owner,\r\n        owner,\r\n        voterBump,\r\n        voterWeightRecordBump,\r\n      ),\r\n    );\r\n  }\r\n\r\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\r\n    connection,\r\n    registrar,\r\n    voter,\r\n    votingMint,\r\n  );\r\n  if (!depositEntryInit) {\r\n    instructions.push(\r\n      voterStakeRegistryCreateDepositEntry(\r\n        voteWeightAddinProgramId,\r\n        registrar,\r\n        voter,\r\n        voterVault,\r\n        owner,\r\n        owner,\r\n        votingMint,\r\n\r\n        depositEntryIndex,\r\n        0,\r\n        undefined,\r\n        0,\r\n        false,\r\n      ),\r\n    );\r\n  }\r\n\r\n  instructions.push(\r\n    voterStakeRegistryDeposit(\r\n      voteWeightAddinProgramId,\r\n      registrar,\r\n      voter,\r\n      voterVault,\r\n      depositToken,\r\n      owner,\r\n\r\n      ownerPda,\r\n      poolId,\r\n      votingMint,\r\n      votingMintAuthority,\r\n      programId,\r\n\r\n      depositEntryIndex,\r\n      mintAmount,\r\n    ),\r\n    voterStakeRegistryUpdateVoterWeightRecord(voteWeightAddinProgramId, registrar, voter, voterWeightRecord),\r\n  );\r\n\r\n  return instructions;\r\n}\r\n\r\nexport async function makeWithdrawTokenInstruction({\r\n  connection,\r\n  programId,\r\n  governanceProgramId,\r\n  voteWeightAddinProgramId,\r\n  realm,\r\n  communityTokenMint,\r\n  owner,\r\n  poolId,\r\n  tokenProgram,\r\n}: {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n\r\n  governanceProgramId: PublicKey;\r\n  voteWeightAddinProgramId: PublicKey;\r\n  realm: PublicKey;\r\n  communityTokenMint: PublicKey;\r\n  owner: PublicKey;\r\n  poolId: PublicKey;\r\n  tokenProgram?: PublicKey;\r\n}): Promise<TransactionInstruction[]> {\r\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\r\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\r\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\r\n  if (ownerAccountInfo === null) {\r\n    throw Error(\"user is not staker\");\r\n  }\r\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\r\n  if (ownerInfo.voteLockedBalance.eq(new BN(0))) {\r\n    throw Error(\"user has vote locked balance = 0\");\r\n  }\r\n\r\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\r\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\r\n  const { publicKey: voter } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\r\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\r\n  const { publicKey: voterWeightRecord } = getVoterWeightRecordAddress(voteWeightAddinProgramId, registrar, owner);\r\n\r\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\r\n    governanceProgramId,\r\n    realm,\r\n    communityTokenMint,\r\n    owner,\r\n  ).publicKey;\r\n\r\n  const instructions: TransactionInstruction[] = [];\r\n\r\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\r\n    connection,\r\n    registrar,\r\n    voter,\r\n    votingMint,\r\n  );\r\n  if (!depositEntryInit) throw Error(\"deposit entry index check error\");\r\n\r\n  instructions.push(\r\n    voterStakeRegistryWithdraw(\r\n      voteWeightAddinProgramId,\r\n      registrar,\r\n      voter,\r\n      owner,\r\n      tokenOwnerRecordAddress,\r\n      voterWeightRecord,\r\n      voterVault,\r\n      getATAAddress(owner, votingMint, tokenProgram).publicKey,\r\n      ownerPda,\r\n      poolId,\r\n      votingMint,\r\n      votingMintAuthority,\r\n      programId,\r\n\r\n      depositEntryIndex,\r\n      ownerInfo.voteLockedBalance,\r\n    ),\r\n  );\r\n\r\n  return instructions;\r\n}\r\n\r\nexport function makeRestartRewardInstruction({\r\n  payer,\r\n  rewardVault,\r\n  userRewardTokenPub,\r\n  farmKeys,\r\n  rewardInfo,\r\n}: {\r\n  payer: PublicKey;\r\n  rewardVault: PublicKey;\r\n  userRewardTokenPub: PublicKey;\r\n  farmKeys: {\r\n    id: PublicKey;\r\n    programId: PublicKey;\r\n    lpVault: PublicKey;\r\n  };\r\n  rewardInfo: {\r\n    openTime: number;\r\n    endTime: number;\r\n    perSecond: string;\r\n  };\r\n}): TransactionInstruction {\r\n  const data = Buffer.alloc(farmRewardRestartLayout.span);\r\n  farmRewardRestartLayout.encode(\r\n    {\r\n      instruction: 3,\r\n      rewardReopenTime: parseBigNumberish(rewardInfo.openTime),\r\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\r\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: farmKeys.id }),\r\n    accountMeta({ pubkey: farmKeys.lpVault, isWritable: false }),\r\n    accountMeta({ pubkey: rewardVault }),\r\n    accountMeta({ pubkey: userRewardTokenPub! }),\r\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\r\n}\r\n\r\nexport function makeAddNewRewardInstruction({\r\n  payer,\r\n  userRewardTokenPub,\r\n  farmKeys,\r\n  rewardVault,\r\n  rewardInfo,\r\n}: {\r\n  payer: PublicKey;\r\n  userRewardTokenPub: PublicKey;\r\n  rewardVault: PublicKey;\r\n  farmKeys: {\r\n    id: PublicKey;\r\n    programId: PublicKey;\r\n    authority: PublicKey;\r\n  };\r\n  rewardInfo: {\r\n    mint: PublicKey;\r\n    openTime: number;\r\n    endTime: number;\r\n    perSecond: string;\r\n    rewardType: RewardType;\r\n  };\r\n}): TransactionInstruction {\r\n  const data = Buffer.alloc(farmAddRewardLayout.span);\r\n  farmAddRewardLayout.encode(\r\n    {\r\n      instruction: 4,\r\n      isSet: new BN(1),\r\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\r\n      rewardOpenTime: parseBigNumberish(rewardInfo.openTime),\r\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\r\n      rewardType: parseBigNumberish(poolTypeV6[rewardInfo.rewardType]),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    ...commonSystemAccountMeta,\r\n    accountMeta({ pubkey: farmKeys.id }),\r\n    accountMeta({ pubkey: farmKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: rewardInfo.mint, isWritable: false }),\r\n    accountMeta({ pubkey: rewardVault }),\r\n    accountMeta({ pubkey: userRewardTokenPub! }),\r\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\r\n}\r\n\r\nexport function makeDepositWithdrawInstruction(params: {\r\n  instruction: number;\r\n  amount: BN;\r\n  farmInfo: { id: string; programId: string };\r\n  farmKeys: FormatFarmKeyOut;\r\n  lpAccount: PublicKey;\r\n  owner: PublicKey;\r\n  rewardAccounts: PublicKey[];\r\n  deposit?: boolean;\r\n  version: 3 | 5 | 6;\r\n}): TransactionInstruction {\r\n  const { farmInfo, farmKeys, version, lpAccount, rewardAccounts, owner, instruction, amount, deposit } = params;\r\n\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys =\r\n    version === 6\r\n      ? [\r\n          accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n          ...(deposit ? [accountMeta({ pubkey: SystemProgram.programId, isWritable: false })] : []),\r\n          accountMeta({ pubkey: id }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n          accountMeta({ pubkey: ledgerAddress }),\r\n          accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n          accountMeta({ pubkey: lpAccount }),\r\n        ]\r\n      : [\r\n          accountMeta({ pubkey: id }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n          accountMeta({ pubkey: ledgerAddress }),\r\n          accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n          accountMeta({ pubkey: lpAccount }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n          accountMeta({ pubkey: rewardAccounts[0] }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n          // system\r\n          accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n          accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n        ];\r\n\r\n  if (version === 5) {\r\n    for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    }\r\n  }\r\n\r\n  if (version === 6) {\r\n    for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\ninterface DepositWithdrawParams {\r\n  amount: BN;\r\n  farmInfo: { id: string; programId: string };\r\n  farmKeys: FormatFarmKeyOut;\r\n  lpAccount: PublicKey;\r\n  owner: PublicKey;\r\n  rewardAccounts: PublicKey[];\r\n  userAuxiliaryLedgers?: PublicKey[];\r\n}\r\n\r\nexport function makeWithdrawInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 6,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 2,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n\r\n    accountMeta({ pubkey: id }),\r\n\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n  ];\r\n\r\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeWithdrawInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 5,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 12,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n  }\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeWithdrawInstructionV4(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const dataLayout = struct([u8('instruction'), u64('amount')])\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: userAuxiliaryLedgers![0] }),\r\n    accountMeta({ pubkey: owner, isSigner: true, isWritable: false }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: rewardAccounts[1] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[1].vault) }),\r\n  ]\r\n\r\n  const data = Buffer.alloc(dataLayout.span)\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 2,\r\n      amount\r\n    },\r\n    data\r\n  )\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data\r\n  })\r\n}\r\n\r\nexport function makeWithdrawInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 3,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 3,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 10,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 5,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n  }\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 6,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 1,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n  ];\r\n\r\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { RewardInfoV6 } from \"../../api/type\";\r\nimport { parseBigNumberish } from \"../../common\";\r\nimport { GetMultipleAccountsInfoConfig, getMultipleAccountsInfoWithCustomFlags } from \"../../common/accountInfo\";\r\nimport { DateParam, isDateAfter, isDateBefore } from \"../../common/date\";\r\nimport { createLogger } from \"../../common/logger\";\r\nimport { findProgramAddress, ProgramAddress } from \"../../common/txTool/txUtils\";\r\nimport { jsonInfo2PoolKeys } from \"../../common/utility\";\r\n\r\nimport { splAccountLayout } from \"../account/layout\";\r\nimport { SplAccount } from \"../account/types\";\r\nimport { FARM_VERSION_TO_LEDGER_LAYOUT, FARM_VERSION_TO_STATE_LAYOUT, poolTypeV6 } from \"./config\";\r\nimport { FarmLedger, FarmLedgerLayout, FarmState, FarmStateLayout } from \"./layout\";\r\nimport { FarmRewardInfo, FarmRewardInfoConfig } from \"./type\";\r\n\r\nimport { Voter, VoterRegistrar } from \"./layout\";\r\n\r\nconst logger = createLogger(\"Raydium.farm.util\");\r\ninterface AssociatedLedgerPoolAccount {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n  mint: PublicKey;\r\n  type: \"lpVault\" | \"rewardVault\";\r\n}\r\n\r\nexport function getAssociatedLedgerPoolAccount({\r\n  programId,\r\n  poolId,\r\n  mint,\r\n  type,\r\n}: AssociatedLedgerPoolAccount): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [\r\n      poolId.toBuffer(),\r\n      mint.toBuffer(),\r\n      Buffer.from(\r\n        type === \"lpVault\" ? \"lp_vault_associated_seed\" : type === \"rewardVault\" ? \"reward_vault_associated_seed\" : \"\",\r\n        \"utf-8\",\r\n      ),\r\n    ],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getAssociatedLedgerAccount({\r\n  programId,\r\n  poolId,\r\n  owner,\r\n  version,\r\n}: {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n  owner: PublicKey;\r\n  version: 6 | 5 | 3;\r\n}): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [\r\n      poolId.toBuffer(),\r\n      owner.toBuffer(),\r\n      Buffer.from(version === 6 ? \"farmer_info_associated_seed\" : \"staker_info_v2_associated_seed\", \"utf-8\"),\r\n    ],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport const getAssociatedAuthority = ({\r\n  programId,\r\n  poolId,\r\n}: {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n}): ProgramAddress => findProgramAddress([poolId.toBuffer()], programId);\r\n\r\nexport function farmRewardInfoToConfig(data: FarmRewardInfo): FarmRewardInfoConfig {\r\n  return {\r\n    isSet: new BN(1),\r\n    rewardPerSecond: parseBigNumberish(data.perSecond),\r\n    rewardOpenTime: parseBigNumberish(data.openTime),\r\n    rewardEndTime: parseBigNumberish(data.endTime),\r\n    rewardType: parseBigNumberish(poolTypeV6[data.rewardType]),\r\n  };\r\n}\r\n\r\nexport function calFarmRewardAmount(data: Pick<RewardInfoV6, \"openTime\" | \"endTime\"> & { perSecond: string }): BN {\r\n  return parseBigNumberish(data.endTime).sub(parseBigNumberish(data.openTime)).mul(parseBigNumberish(data.perSecond));\r\n}\r\n\r\nexport function getFarmLedgerLayout(version: number): FarmLedgerLayout | undefined {\r\n  const ledgerLayout = FARM_VERSION_TO_LEDGER_LAYOUT[version];\r\n  if (!ledgerLayout) logger.logWithError(\"invalid version\", version);\r\n  return ledgerLayout;\r\n}\r\n\r\nexport function getFarmStateLayout(version: number): FarmStateLayout | undefined {\r\n  const stateLayout = FARM_VERSION_TO_STATE_LAYOUT[version];\r\n  if (!stateLayout) logger.logWithError(\"invalid version\", version);\r\n  return stateLayout;\r\n}\r\n\r\nexport function updateFarmPoolInfo(\r\n  poolInfo: FarmState,\r\n  lpVault: SplAccount,\r\n  slot: number,\r\n  chainTime: number,\r\n): FarmState {\r\n  if (poolInfo.version === 3 || poolInfo.version === 5) {\r\n    if (poolInfo.lastSlot.gte(new BN(slot))) return poolInfo;\r\n\r\n    const spread = new BN(slot).sub(poolInfo.lastSlot);\r\n    poolInfo.lastSlot = new BN(slot);\r\n\r\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\r\n      if (lpVault.amount.eq(new BN(0))) continue;\r\n\r\n      const reward = itemRewardInfo.perSlotReward.mul(spread);\r\n      itemRewardInfo.perShareReward = itemRewardInfo.perShareReward.add(\r\n        reward.mul(new BN(10).pow(new BN(poolInfo.version === 3 ? 9 : 15))).div(lpVault.amount),\r\n      );\r\n      itemRewardInfo.totalReward = itemRewardInfo.totalReward.add(reward);\r\n    }\r\n  } else if (poolInfo.version === 6) {\r\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\r\n      if (itemRewardInfo.rewardState.eq(new BN(0))) continue;\r\n      const updateTime = BN.min(new BN(chainTime), itemRewardInfo.rewardEndTime);\r\n      if (itemRewardInfo.rewardOpenTime.gte(updateTime)) continue;\r\n      const spread = updateTime.sub(itemRewardInfo.rewardLastUpdateTime);\r\n      let reward = spread.mul(itemRewardInfo.rewardPerSecond);\r\n      const leftReward = itemRewardInfo.totalReward.sub(itemRewardInfo.totalRewardEmissioned);\r\n      if (leftReward.lt(reward)) {\r\n        reward = leftReward;\r\n        itemRewardInfo.rewardLastUpdateTime = itemRewardInfo.rewardLastUpdateTime.add(\r\n          leftReward.div(itemRewardInfo.rewardPerSecond),\r\n        );\r\n      } else {\r\n        itemRewardInfo.rewardLastUpdateTime = updateTime;\r\n      }\r\n      if (lpVault.amount.eq(new BN(0))) continue;\r\n      itemRewardInfo.accRewardPerShare = itemRewardInfo.accRewardPerShare.add(\r\n        reward.mul(poolInfo.rewardMultiplier).div(lpVault.amount),\r\n      );\r\n      itemRewardInfo.totalRewardEmissioned = itemRewardInfo.totalRewardEmissioned.add(reward);\r\n    }\r\n  }\r\n  return poolInfo;\r\n}\r\n\r\ninterface FarmPoolsInfo {\r\n  [id: string]: {\r\n    state: FarmState;\r\n    lpVault: SplAccount;\r\n    ledger?: FarmLedger;\r\n    wrapped?: { pendingRewards: BN[] };\r\n  };\r\n}\r\n\r\nexport interface FarmFetchMultipleInfoParams {\r\n  connection: Connection;\r\n  farmPools: any[];\r\n  owner?: PublicKey;\r\n  config?: GetMultipleAccountsInfoConfig;\r\n  chainTime: number;\r\n}\r\n\r\nexport async function fetchMultipleFarmInfoAndUpdate({\r\n  connection,\r\n  farmPools,\r\n  owner,\r\n  config,\r\n  chainTime,\r\n}: FarmFetchMultipleInfoParams): Promise<FarmPoolsInfo> {\r\n  let hasNotV6Pool = false;\r\n  let hasV6Pool = false;\r\n  const tenBN = new BN(10);\r\n\r\n  const publicKeys: {\r\n    pubkey: PublicKey;\r\n    version: number;\r\n    key: \"state\" | \"lpVault\" | \"ledger\";\r\n    poolId: PublicKey;\r\n  }[] = [];\r\n\r\n  for (const poolInfo of farmPools) {\r\n    const pool = jsonInfo2PoolKeys(poolInfo);\r\n    if (pool.version === 6) hasV6Pool = true;\r\n    else hasNotV6Pool = true;\r\n\r\n    publicKeys.push(\r\n      {\r\n        pubkey: pool.id,\r\n        version: pool.version,\r\n        key: \"state\",\r\n        poolId: pool.id,\r\n      },\r\n      {\r\n        pubkey: pool.lpVault,\r\n        version: pool.version,\r\n        key: \"lpVault\",\r\n        poolId: pool.id,\r\n      },\r\n    );\r\n\r\n    if (owner) {\r\n      publicKeys.push({\r\n        pubkey: getAssociatedLedgerAccount({\r\n          programId: pool.programId,\r\n          poolId: pool.id,\r\n          owner,\r\n          version: poolInfo.version as 6 | 5 | 3,\r\n        }),\r\n        version: pool.version,\r\n        key: \"ledger\",\r\n        poolId: pool.id,\r\n      });\r\n    }\r\n  }\r\n\r\n  const poolsInfo: FarmPoolsInfo = {};\r\n  const accountsInfo = await getMultipleAccountsInfoWithCustomFlags(connection, publicKeys, config);\r\n  for (const { pubkey, version, key, poolId, accountInfo } of accountsInfo) {\r\n    const _poolId = poolId.toBase58();\r\n    poolsInfo[_poolId] = { ...poolsInfo[_poolId] };\r\n    if (key === \"state\") {\r\n      const stateLayout = getFarmStateLayout(version);\r\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== stateLayout!.span)\r\n        logger.logWithError(`invalid farm state account info, pools.id, ${pubkey}`);\r\n      poolsInfo[_poolId].state = stateLayout!.decode(accountInfo!.data);\r\n    } else if (key === \"lpVault\") {\r\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== splAccountLayout.span)\r\n        logger.logWithError(`invalid farm lp vault account info, pools.lpVault, ${pubkey}`);\r\n      poolsInfo[_poolId].lpVault = splAccountLayout.decode(accountInfo!.data);\r\n    } else if (key === \"ledger\") {\r\n      const legerLayout = getFarmLedgerLayout(version)!;\r\n      if (accountInfo && accountInfo.data) {\r\n        if (accountInfo.data.length !== legerLayout.span)\r\n          logger.logWithError(`invalid farm ledger account info, ledger, ${pubkey}`);\r\n        poolsInfo[_poolId].ledger = legerLayout.decode(accountInfo.data);\r\n      }\r\n    }\r\n  }\r\n\r\n  const slot = hasV6Pool || hasNotV6Pool ? await connection.getSlot() : 0;\r\n\r\n  for (const poolId of Object.keys(poolsInfo)) {\r\n    if (poolsInfo[poolId] === undefined) continue;\r\n    poolsInfo[poolId].state = updateFarmPoolInfo(poolsInfo[poolId].state, poolsInfo[poolId].lpVault, slot, chainTime);\r\n  }\r\n\r\n  for (const [poolId, { state, ledger }] of Object.entries(poolsInfo)) {\r\n    if (ledger) {\r\n      const multiplier =\r\n        state.version === 6\r\n          ? state.rewardMultiplier\r\n          : state.rewardInfos.length === 1\r\n            ? tenBN.pow(new BN(9))\r\n            : tenBN.pow(new BN(15));\r\n\r\n      const pendingRewards = state.rewardInfos.map((rewardInfo, index) => {\r\n        const rewardDebt = ledger.rewardDebts[index];\r\n        const pendingReward = ledger.deposited\r\n          .mul(state.version === 6 ? rewardInfo.accRewardPerShare : rewardInfo.perShareReward)\r\n          .div(multiplier)\r\n          .sub(rewardDebt);\r\n\r\n        return pendingReward;\r\n      });\r\n\r\n      poolsInfo[poolId].wrapped = {\r\n        ...poolsInfo[poolId].wrapped,\r\n        pendingRewards,\r\n      };\r\n    }\r\n  }\r\n\r\n  return poolsInfo;\r\n}\r\n/** deprecated */\r\nexport function judgeFarmType(\r\n  info: any,\r\n  currentTime: DateParam = Date.now(),\r\n): \"closed pool\" | \"normal fusion pool\" | \"dual fusion pool\" | undefined | \"upcoming pool\" {\r\n  if (info.version === 6) {\r\n    const rewardInfos = info.state.rewardInfos;\r\n    if (rewardInfos.every(({ rewardOpenTime }) => isDateBefore(currentTime, rewardOpenTime.toNumber(), { unit: \"s\" })))\r\n      return \"upcoming pool\";\r\n    if (rewardInfos.every(({ rewardEndTime }) => isDateAfter(currentTime, rewardEndTime.toNumber(), { unit: \"s\" })))\r\n      return \"closed pool\";\r\n  } else {\r\n    const perSlotRewards = info.state.rewardInfos.map(({ perSlotReward }) => perSlotReward);\r\n    if (perSlotRewards.length === 2) {\r\n      // v5\r\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) !== \"0\") {\r\n        return \"normal fusion pool\"; // reward xxx token\r\n      }\r\n      if (String(perSlotRewards[0]) !== \"0\" && String(perSlotRewards[1]) !== \"0\") {\r\n        return \"dual fusion pool\"; // reward ray and xxx token\r\n      }\r\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) === \"0\") {\r\n        return \"closed pool\";\r\n      }\r\n    } else if (perSlotRewards.length === 1) {\r\n      // v3\r\n      if (String(perSlotRewards[0]) === \"0\") {\r\n        return \"closed pool\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport async function getDepositEntryIndex(\r\n  connection: Connection,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterMint: PublicKey,\r\n): Promise<{ index: number; isInit: boolean }> {\r\n  const registrarAccountData = await connection.getAccountInfo(registrar);\r\n  if (registrarAccountData === null) throw Error(\"registrar info check error\");\r\n  const registrarData = VoterRegistrar.decode(registrarAccountData.data);\r\n\r\n  const votingMintConfigIndex = registrarData.votingMints.findIndex((i) => i.mint.equals(voterMint));\r\n\r\n  if (votingMintConfigIndex === -1) throw Error(\"find voter mint error\");\r\n\r\n  const voterAccountData = await connection.getAccountInfo(voter);\r\n  if (voterAccountData === null) return { index: votingMintConfigIndex, isInit: false }; // throw Error('voter info check error')\r\n\r\n  const voterData = Voter.decode(voterAccountData.data);\r\n\r\n  const depositEntryIndex = voterData.deposits.findIndex(\r\n    (i) => i.isUsed && i.votingMintConfigIdx === votingMintConfigIndex,\r\n  );\r\n  if (depositEntryIndex === -1) return { index: votingMintConfigIndex, isInit: false };\r\n  else return { index: depositEntryIndex, isInit: true };\r\n}\r\n","import { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\r\nimport {\r\n  AmmV4Keys,\r\n  AmmV5Keys,\r\n  ApiV3PoolInfoConcentratedItem,\r\n  ApiV3PoolInfoStandardItem,\r\n  FormatFarmInfoOutV6,\r\n} from \"../../api/type\";\r\nimport { AccountLayout, NATIVE_MINT, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { getMultipleAccountsInfoWithCustomFlags } from \"@/common/accountInfo\";\r\nimport { BN_ZERO, divCeil } from \"@/common/bignumber\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport { BNDivCeil } from \"@/common/transfer\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { Percent, Token, TokenAmount } from \"../../module\";\r\nimport {\r\n  FARM_PROGRAM_TO_VERSION,\r\n  FarmLedger,\r\n  createAssociatedLedgerAccountInstruction,\r\n  getAssociatedLedgerAccount,\r\n  getFarmLedgerLayout,\r\n  makeWithdrawInstructionV3,\r\n  makeWithdrawInstructionV5,\r\n  makeWithdrawInstructionV6,\r\n} from \"../../raydium/farm\";\r\nimport { ClmmInstrument } from \"../clmm/instrument\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { toToken } from \"../token\";\r\nimport { ComputeBudgetConfig } from \"../type\";\r\nimport { LIQUIDITY_FEES_DENOMINATOR, LIQUIDITY_FEES_NUMERATOR } from \"./constant\";\r\nimport {\r\n  createPoolV4InstructionV2,\r\n  makeAMMSwapInstruction,\r\n  makeAddLiquidityInstruction,\r\n  removeLiquidityInstruction,\r\n} from \"./instruction\";\r\nimport { createPoolFeeLayout, liquidityStateV4Layout } from \"./layout\";\r\nimport { StableLayout, getDxByDyBaseIn, getDyByDxBaseIn, getStablePrice } from \"./stable\";\r\nimport {\r\n  AddLiquidityParams,\r\n  AmmRpcData,\r\n  AmountSide,\r\n  ComputeAmountInParam,\r\n  ComputeAmountOutParam,\r\n  CreatePoolAddress,\r\n  CreatePoolParam,\r\n  CreateMarketAndPoolParam,\r\n  RemoveParams,\r\n  SwapParam,\r\n} from \"./type\";\r\nimport { getAssociatedConfigId, getAssociatedPoolKeys, toAmmComputePoolInfo } from \"./utils\";\r\n\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { AMM_V4, FEE_DESTINATION_ID, OPEN_BOOK_PROGRAM, WSOLMint } from \"@/common\";\r\nimport { generatePubKey } from \"../account\";\r\nimport { makeCreateMarketInstruction, MarketExtInfo } from \"../marketV2\";\r\n\r\nexport default class LiquidityModule extends ModuleBase {\r\n  public stableLayout: StableLayout;\r\n\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n    this.stableLayout = new StableLayout({ connection: this.scope.connection });\r\n  }\r\n\r\n  public async initLayout(): Promise<void> {\r\n    await this.stableLayout.initStableModelLayout();\r\n  }\r\n\r\n  public async load(): Promise<void> {\r\n    this.checkDisabled();\r\n  }\r\n\r\n  public computePairAmount({\r\n    poolInfo,\r\n    amount,\r\n    // anotherToken,\r\n    slippage,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoStandardItem;\r\n    amount: string | Decimal;\r\n    slippage: Percent;\r\n    baseIn?: boolean;\r\n  }): { anotherAmount: TokenAmount; maxAnotherAmount: TokenAmount; minAnotherAmount: TokenAmount; liquidity: BN } {\r\n    const inputAmount = new BN(new Decimal(amount).mul(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals).toFixed(0));\r\n    const _anotherToken = toToken(poolInfo[baseIn ? \"mintB\" : \"mintA\"]);\r\n\r\n    const [baseReserve, quoteReserve] = [\r\n      new BN(new Decimal(poolInfo.mintAmountA).mul(10 ** poolInfo.mintA.decimals).toString()),\r\n      new BN(new Decimal(poolInfo.mintAmountB).mul(10 ** poolInfo.mintB.decimals).toString()),\r\n    ];\r\n    const lpAmount = new BN(\r\n      new Decimal(poolInfo.lpAmount).mul(10 ** poolInfo.lpMint.decimals).toFixed(0, Decimal.ROUND_DOWN),\r\n    );\r\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\r\n\r\n    this.logDebug(\r\n      \"tokenIn:\",\r\n      baseIn ? poolInfo.mintA.symbol : poolInfo.mintB.symbol,\r\n      \"amountIn:\",\r\n      inputAmount.toString(),\r\n      \"anotherToken:\",\r\n      baseIn ? poolInfo.mintB.symbol : poolInfo.mintA.symbol,\r\n      \"slippage:\",\r\n      `${slippage.toSignificant()}%`,\r\n      \"baseReserve\",\r\n      baseReserve.toString(),\r\n      \"quoteReserve\",\r\n      quoteReserve.toString(),\r\n    );\r\n\r\n    // input is fixed\r\n    const input = baseIn ? \"base\" : \"quote\";\r\n    this.logDebug(\"input side:\", input);\r\n\r\n    // round up\r\n    let amountRaw = BN_ZERO;\r\n    if (!inputAmount.isZero()) {\r\n      amountRaw =\r\n        input === \"base\"\r\n          ? divCeil(inputAmount.mul(quoteReserve), baseReserve)\r\n          : divCeil(inputAmount.mul(baseReserve), quoteReserve);\r\n    }\r\n\r\n    this.logDebug(\"amountRaw:\", amountRaw.toString(), \"lpAmount:\", lpAmount.toString());\r\n\r\n    const liquidity = divCeil(inputAmount.mul(lpAmount), input === \"base\" ? baseReserve : quoteReserve);\r\n\r\n    this.logDebug(\"liquidity:\", liquidity.toString());\r\n\r\n    const _slippage = new Percent(new BN(1)).add(slippage);\r\n    const _slippageMin = new Percent(new BN(1)).sub(slippage);\r\n    const slippageAdjustedAmount = _slippage.mul(amountRaw).quotient;\r\n    const slippageAdjustedMinAmount = _slippageMin.mul(amountRaw).quotient;\r\n\r\n    const _anotherAmount = new TokenAmount(_anotherToken, amountRaw);\r\n    const _maxAnotherAmount = new TokenAmount(_anotherToken, slippageAdjustedAmount);\r\n    const _minAnotherAmount = new TokenAmount(_anotherToken, slippageAdjustedMinAmount);\r\n    this.logDebug(\"anotherAmount:\", _anotherAmount.toFixed(), \"maxAnotherAmount:\", _maxAnotherAmount.toFixed());\r\n\r\n    return {\r\n      anotherAmount: _anotherAmount,\r\n      maxAnotherAmount: _maxAnotherAmount,\r\n      minAnotherAmount: _minAnotherAmount,\r\n      liquidity,\r\n    };\r\n  }\r\n\r\n  public async getAmmPoolKeys(poolId: string): Promise<AmmV4Keys | AmmV5Keys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as (AmmV4Keys | AmmV5Keys)[])[0];\r\n  }\r\n\r\n  public async addLiquidity<T extends TxVersion>(params: AddLiquidityParams<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      amountInA,\r\n      amountInB,\r\n      otherAmountMin,\r\n      fixedSide,\r\n      config,\r\n      txVersion,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      feePayer,\r\n    } = params;\r\n\r\n    if (this.scope.availability.addStandardPosition === false)\r\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\r\n\r\n    this.logDebug(\"amountInA:\", amountInA, \"amountInB:\", amountInB);\r\n    if (amountInA.isZero() || amountInB.isZero())\r\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA & amountInB\", {\r\n        amountInA: amountInA.toFixed(),\r\n        amountInB: amountInB.toFixed(),\r\n      });\r\n    const { account } = this.scope;\r\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\r\n      // default\r\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\r\n      // custom\r\n      ...config,\r\n    };\r\n    const [tokenA, tokenB] = [amountInA.token, amountInB.token];\r\n    const tokenAccountA = await account.getCreatedTokenAccount({\r\n      mint: tokenA.mint,\r\n      associatedOnly: false,\r\n    });\r\n    const tokenAccountB = await account.getCreatedTokenAccount({\r\n      mint: tokenB.mint,\r\n      associatedOnly: false,\r\n    });\r\n    if (!tokenAccountA && !tokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\r\n\r\n    const lpTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n    });\r\n\r\n    const tokens = [tokenA, tokenB];\r\n    const _tokenAccounts = [tokenAccountA, tokenAccountB];\r\n    const rawAmounts = [amountInA.raw, amountInB.raw];\r\n\r\n    // handle amount a & b and direction\r\n    const sideA = amountInA.token.mint.toBase58() === poolInfo.mintA.address ? \"base\" : \"quote\";\r\n    let _fixedSide: AmountSide = \"base\";\r\n    if (![\"quote\", \"base\"].includes(sideA)) this.logAndCreateError(\"invalid fixedSide\", \"fixedSide\", fixedSide);\r\n    if (sideA === \"quote\") {\r\n      tokens.reverse();\r\n      _tokenAccounts.reverse();\r\n      rawAmounts.reverse();\r\n      _fixedSide = fixedSide === \"a\" ? \"quote\" : \"base\";\r\n    } else if (sideA === \"base\") {\r\n      _fixedSide = fixedSide === \"a\" ? \"base\" : \"quote\";\r\n    }\r\n\r\n    const [baseToken, quoteToken] = tokens;\r\n    const [baseTokenAccount, quoteTokenAccount] = _tokenAccounts;\r\n    const [baseAmountRaw, quoteAmountRaw] = rawAmounts;\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getAmmPoolKeys(poolInfo.id));\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\r\n      side: \"in\",\r\n      amount: baseAmountRaw,\r\n      mint: baseToken.mint,\r\n      tokenAccount: baseTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(baseInstruction);\r\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\r\n      side: \"in\",\r\n      amount: quoteAmountRaw,\r\n      mint: quoteToken.mint,\r\n      tokenAccount: quoteTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(quoteInstruction);\r\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } = await account.handleTokenAccount({\r\n      side: \"out\",\r\n      amount: 0,\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n      tokenAccount: lpTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(lpInstruction);\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeAddLiquidityInstruction({\r\n          poolInfo,\r\n          poolKeys: poolKeys as AmmV4Keys | AmmV5Keys,\r\n          userKeys: {\r\n            baseTokenAccount: _baseTokenAccount!,\r\n            quoteTokenAccount: _quoteTokenAccount!,\r\n            lpTokenAccount: _lpTokenAccount!,\r\n            owner: this.scope.ownerPubKey,\r\n          },\r\n          baseAmountIn: baseAmountRaw,\r\n          quoteAmountIn: quoteAmountRaw,\r\n          otherAmountMin: otherAmountMin.raw,\r\n          fixedSide: _fixedSide,\r\n        }),\r\n      ],\r\n      instructionTypes: [\r\n        poolInfo.pooltype.includes(\"StablePool\")\r\n          ? InstructionType.AmmV5AddLiquidity\r\n          : InstructionType.AmmV4AddLiquidity,\r\n      ],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    if (txVersion === TxVersion.V0) return (await txBuilder.buildV0()) as MakeTxData<T>;\r\n    return txBuilder.build() as MakeTxData<T>;\r\n  }\r\n\r\n  public async removeLiquidity<T extends TxVersion>(params: RemoveParams<T>): Promise<Promise<MakeTxData<T>>> {\r\n    if (this.scope.availability.removeStandardPosition === false)\r\n      this.logAndCreateError(\"remove liquidity feature disabled in your region\");\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      lpAmount,\r\n      baseAmountMin,\r\n      quoteAmountMin,\r\n      config,\r\n      txVersion,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      feePayer,\r\n    } = params;\r\n    const poolKeys = propPoolKeys ?? (await this.getAmmPoolKeys(poolInfo.id));\r\n    const [baseMint, quoteMint, lpMint] = [\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n      new PublicKey(poolInfo.lpMint.address),\r\n    ];\r\n    this.logDebug(\"lpAmount:\", lpAmount);\r\n    this.logDebug(\"baseAmountMin:\", baseAmountMin);\r\n    this.logDebug(\"quoteAmountMin:\", quoteAmountMin);\r\n    if (lpAmount.isZero()) this.logAndCreateError(\"amount must greater than zero\", \"lpAmount\", lpAmount.toString());\r\n\r\n    const { account } = this.scope;\r\n    const lpTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: lpMint,\r\n      associatedOnly: false,\r\n    });\r\n    if (!lpTokenAccount) this.logAndCreateError(\"cannot found lpTokenAccount\", \"tokenAccounts\", account.tokenAccounts);\r\n\r\n    const baseTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: baseMint,\r\n    });\r\n    const quoteTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: quoteMint,\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\r\n      // default\r\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\r\n      // custom\r\n      ...config,\r\n    };\r\n\r\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\r\n      side: \"out\",\r\n      amount: 0,\r\n      mint: baseMint,\r\n      tokenAccount: baseTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(baseInstruction);\r\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\r\n      side: \"out\",\r\n      amount: 0,\r\n      mint: quoteMint,\r\n      tokenAccount: quoteTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(quoteInstruction);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        removeLiquidityInstruction({\r\n          poolInfo,\r\n          poolKeys,\r\n          userKeys: {\r\n            lpTokenAccount: lpTokenAccount!,\r\n            baseTokenAccount: _baseTokenAccount!,\r\n            quoteTokenAccount: _quoteTokenAccount!,\r\n            owner: this.scope.ownerPubKey,\r\n          },\r\n          lpAmount,\r\n          baseAmountMin,\r\n          quoteAmountMin,\r\n        }),\r\n      ],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      instructionTypes: [\r\n        poolInfo.pooltype.includes(\"StablePool\")\r\n          ? InstructionType.AmmV5RemoveLiquidity\r\n          : InstructionType.AmmV4RemoveLiquidity,\r\n      ],\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    if (txVersion === TxVersion.V0) return (await txBuilder.buildV0()) as MakeTxData<T>;\r\n    return txBuilder.build() as MakeTxData<T>;\r\n  }\r\n\r\n  public async removeAllLpAndCreateClmmPosition<T extends TxVersion>({\r\n    poolInfo,\r\n    clmmPoolInfo,\r\n    removeLpAmount,\r\n    createPositionInfo,\r\n    farmInfo,\r\n    userFarmLpAmount,\r\n    base,\r\n    computeBudgetConfig,\r\n    payer,\r\n    userAuxiliaryLedgers,\r\n    tokenProgram = TOKEN_PROGRAM_ID,\r\n    checkCreateATAOwner = true,\r\n    getEphemeralSigners,\r\n    txVersion,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoStandardItem;\r\n    clmmPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n    removeLpAmount: BN;\r\n    createPositionInfo: {\r\n      tickLower: number;\r\n      tickUpper: number;\r\n      baseAmount: BN;\r\n      otherAmountMax: BN;\r\n    };\r\n    farmInfo?: FormatFarmInfoOutV6;\r\n    userFarmLpAmount?: BN;\r\n    userAuxiliaryLedgers?: PublicKey[];\r\n    base: \"MintA\" | \"MintB\";\r\n    payer?: PublicKey;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    tokenProgram?: PublicKey;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    getEphemeralSigners?: (k: number) => any;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeMultiTxData<T>> {\r\n    if (\r\n      this.scope.availability.removeStandardPosition === false ||\r\n      this.scope.availability.createConcentratedPosition === false\r\n    )\r\n      this.logAndCreateError(\"remove liquidity or create position feature disabled in your region\");\r\n\r\n    if (\r\n      !(poolInfo.mintA.address === clmmPoolInfo.mintA.address || poolInfo.mintA.address === clmmPoolInfo.mintB.address)\r\n    )\r\n      throw Error(\"mint check error\");\r\n    if (\r\n      !(poolInfo.mintB.address === clmmPoolInfo.mintA.address || poolInfo.mintB.address === clmmPoolInfo.mintB.address)\r\n    )\r\n      throw Error(\"mint check error\");\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const mintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccountRawInfos) {\r\n      if (\r\n        mintToAccount[item.accountInfo.mint.toString()] === undefined ||\r\n        getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, TOKEN_PROGRAM_ID).publicKey.equals(item.pubkey)\r\n      ) {\r\n        mintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      }\r\n    }\r\n\r\n    const lpTokenAccount = mintToAccount[poolInfo.lpMint.address];\r\n    if (lpTokenAccount === undefined) throw Error(\"find lp account error in trade accounts\");\r\n\r\n    const amountIn = removeLpAmount.add(userFarmLpAmount ?? new BN(0));\r\n    const mintBaseUseSOLBalance = poolInfo.mintA.address === Token.WSOL.mint.toString();\r\n    const mintQuoteUseSOLBalance = poolInfo.mintB.address === Token.WSOL.mint.toString();\r\n\r\n    const { account: baseTokenAccount, instructionParams: ownerTokenAccountBaseInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: mintBaseUseSOLBalance\r\n          ? {\r\n            payer: this.scope.ownerPubKey,\r\n          }\r\n          : undefined,\r\n        skipCloseAccount: !mintBaseUseSOLBalance,\r\n        notUseTokenAccount: mintBaseUseSOLBalance,\r\n        associatedOnly: true,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\r\n    if (baseTokenAccount === undefined) throw new Error(\"base token account not found\");\r\n\r\n    const { account: quoteTokenAccount, instructionParams: ownerTokenAccountQuoteInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintQuoteUseSOLBalance\r\n          ? {\r\n            payer: this.scope.ownerPubKey!,\r\n            amount: 0,\r\n          }\r\n          : undefined,\r\n        skipCloseAccount: !mintQuoteUseSOLBalance,\r\n        notUseTokenAccount: mintQuoteUseSOLBalance,\r\n        associatedOnly: true,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\r\n    if (quoteTokenAccount === undefined) throw new Error(\"quote token account not found\");\r\n\r\n    mintToAccount[poolInfo.mintA.address] = baseTokenAccount;\r\n    mintToAccount[poolInfo.mintB.address] = quoteTokenAccount;\r\n\r\n    if (farmInfo !== undefined && !userFarmLpAmount?.isZero()) {\r\n      const farmVersion = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n      const ledger = getAssociatedLedgerAccount({\r\n        programId: new PublicKey(farmInfo.programId),\r\n        poolId: new PublicKey(farmInfo.id),\r\n        owner: this.scope.ownerPubKey,\r\n        version: farmVersion as 3 | 5 | 6,\r\n      });\r\n      let ledgerInfo: FarmLedger | undefined = undefined;\r\n      const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n      if (ledgerData) {\r\n        const ledgerLayout = getFarmLedgerLayout(farmVersion)!;\r\n        ledgerInfo = ledgerLayout.decode(ledgerData.data);\r\n      }\r\n      if (farmVersion !== 6 && !ledgerInfo) {\r\n        const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n          id: new PublicKey(farmInfo.id),\r\n          programId: new PublicKey(farmInfo.programId),\r\n          version: farmVersion,\r\n          ledger,\r\n          owner: this.scope.ownerPubKey,\r\n        });\r\n        txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n      }\r\n\r\n      const rewardTokenAccounts: PublicKey[] = [];\r\n      for (const item of farmInfo.rewardInfos) {\r\n        const rewardIsWsol = item.mint.address === Token.WSOL.mint.toString();\r\n        if (mintToAccount[item.mint.address]) rewardTokenAccounts.push(mintToAccount[item.mint.address]);\r\n        else {\r\n          const { account: farmRewardAccount, instructionParams: ownerTokenAccountFarmInstruction } =\r\n            await this.scope.account.getOrCreateTokenAccount({\r\n              mint: new PublicKey(item.mint.address),\r\n              tokenProgram,\r\n              owner: this.scope.ownerPubKey,\r\n              skipCloseAccount: !rewardIsWsol,\r\n              createInfo: {\r\n                payer: payer || this.scope.ownerPubKey,\r\n              },\r\n              associatedOnly: true,\r\n              checkCreateATAOwner,\r\n            });\r\n          if (!farmRewardAccount) this.logAndCreateError(\"farm reward account not found:\", item.mint.address);\r\n          ownerTokenAccountFarmInstruction && txBuilder.addInstruction(ownerTokenAccountFarmInstruction);\r\n          rewardTokenAccounts.push(farmRewardAccount!);\r\n        }\r\n      }\r\n      const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\r\n      const insParams = {\r\n        userAuxiliaryLedgers,\r\n        amount: userFarmLpAmount!,\r\n        owner: this.scope.ownerPubKey,\r\n        farmInfo,\r\n        farmKeys,\r\n        lpAccount: lpTokenAccount,\r\n        rewardAccounts: rewardTokenAccounts,\r\n      };\r\n      const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n      const newInstruction =\r\n        version === 6\r\n          ? makeWithdrawInstructionV6(insParams)\r\n          : version === 5\r\n            ? makeWithdrawInstructionV5(insParams)\r\n            : makeWithdrawInstructionV3(insParams);\r\n      const insType = {\r\n        3: InstructionType.FarmV3Withdraw,\r\n        5: InstructionType.FarmV5Withdraw,\r\n        6: InstructionType.FarmV6Withdraw,\r\n      };\r\n      txBuilder.addInstruction({\r\n        instructions: [newInstruction],\r\n        instructionTypes: [insType[version]],\r\n      });\r\n    }\r\n\r\n    const poolKeys = await this.getAmmPoolKeys(poolInfo.id);\r\n\r\n    const removeIns = removeLiquidityInstruction({\r\n      poolInfo,\r\n      poolKeys,\r\n      userKeys: {\r\n        lpTokenAccount,\r\n        baseTokenAccount,\r\n        quoteTokenAccount,\r\n        owner: this.scope.ownerPubKey,\r\n      },\r\n      lpAmount: amountIn,\r\n      baseAmountMin: 0,\r\n      quoteAmountMin: 0,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [removeIns],\r\n      instructionTypes: [\r\n        !poolInfo.pooltype.includes(\"StablePool\")\r\n          ? InstructionType.AmmV4RemoveLiquidity\r\n          : InstructionType.AmmV5RemoveLiquidity,\r\n      ],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    });\r\n\r\n    const [tokenAccountA, tokenAccountB] =\r\n      poolInfo.mintA.address === clmmPoolInfo.mintA.address\r\n        ? [baseTokenAccount, quoteTokenAccount]\r\n        : [quoteTokenAccount, baseTokenAccount];\r\n\r\n    const clmmPoolKeys = await this.scope.clmm.getClmmPoolKeys(clmmPoolInfo.id);\r\n\r\n    const createPositionIns = await ClmmInstrument.openPositionFromBaseInstructions({\r\n      poolInfo: clmmPoolInfo,\r\n      poolKeys: clmmPoolKeys,\r\n      ownerInfo: {\r\n        feePayer: this.scope.ownerPubKey,\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA,\r\n        tokenAccountB,\r\n      },\r\n      withMetadata: \"create\",\r\n      ...createPositionInfo,\r\n      base,\r\n      getEphemeralSigners,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [...createPositionIns.instructions],\r\n      signers: createPositionIns.signers,\r\n      instructionTypes: [...createPositionIns.instructionTypes],\r\n      lookupTableAddress: clmmPoolKeys.lookupTableAccount ? [clmmPoolKeys.lookupTableAccount] : [],\r\n    });\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async createPoolV4<T extends TxVersion>({\r\n    programId,\r\n    marketInfo,\r\n    baseMintInfo,\r\n    quoteMintInfo,\r\n    baseAmount,\r\n    quoteAmount,\r\n    startTime,\r\n    ownerInfo,\r\n    associatedOnly = false,\r\n    checkCreateATAOwner = false,\r\n    tokenProgram,\r\n    txVersion,\r\n    feeDestinationId,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CreatePoolParam<T>): Promise<MakeTxData<T, { address: CreatePoolAddress }>> {\r\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && baseMintInfo.mint.equals(NATIVE_MINT);\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && quoteMintInfo.mint.equals(NATIVE_MINT);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const { account: ownerTokenAccountBase, instructionParams: ownerTokenAccountBaseInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: baseMintInfo.mint,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintAUseSOLBalance\r\n          ? {\r\n            payer: payer!,\r\n            amount: baseAmount,\r\n          }\r\n          : undefined,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\r\n\r\n    const { account: ownerTokenAccountQuote, instructionParams: ownerTokenAccountQuoteInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: quoteMintInfo.mint,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n            payer: payer!,\r\n            amount: quoteAmount,\r\n          }\r\n          : undefined,\r\n\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\r\n\r\n    if (ownerTokenAccountBase === undefined || ownerTokenAccountQuote === undefined)\r\n      throw Error(\"you don't has some token account\");\r\n\r\n    const poolInfo = getAssociatedPoolKeys({\r\n      version: 4,\r\n      marketVersion: 3,\r\n      marketId: marketInfo.marketId,\r\n      baseMint: baseMintInfo.mint,\r\n      quoteMint: quoteMintInfo.mint,\r\n      baseDecimals: baseMintInfo.decimals,\r\n      quoteDecimals: quoteMintInfo.decimals,\r\n      programId,\r\n      marketProgramId: marketInfo.programId,\r\n    });\r\n\r\n    const createPoolKeys = {\r\n      programId,\r\n      ammId: poolInfo.id,\r\n      ammAuthority: poolInfo.authority,\r\n      ammOpenOrders: poolInfo.openOrders,\r\n      lpMint: poolInfo.lpMint,\r\n      coinMint: poolInfo.baseMint,\r\n      pcMint: poolInfo.quoteMint,\r\n      coinVault: poolInfo.baseVault,\r\n      pcVault: poolInfo.quoteVault,\r\n      withdrawQueue: poolInfo.withdrawQueue,\r\n      ammTargetOrders: poolInfo.targetOrders,\r\n      poolTempLp: poolInfo.lpVault,\r\n      marketProgramId: poolInfo.marketProgramId,\r\n      marketId: poolInfo.marketId,\r\n      ammConfigId: poolInfo.configId,\r\n      feeDestinationId,\r\n    };\r\n\r\n    const { instruction, instructionType } = createPoolV4InstructionV2({\r\n      ...createPoolKeys,\r\n      userWallet: this.scope.ownerPubKey,\r\n      userCoinVault: ownerTokenAccountBase,\r\n      userPcVault: ownerTokenAccountQuote,\r\n      userLpVault: getATAAddress(this.scope.ownerPubKey, poolInfo.lpMint, tokenProgram).publicKey,\r\n\r\n      nonce: poolInfo.nonce,\r\n      openTime: startTime,\r\n      coinAmount: baseAmount,\r\n      pcAmount: quoteAmount,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [instruction],\r\n      instructionTypes: [instructionType],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: {\r\n        address: createPoolKeys,\r\n      },\r\n    }) as Promise<MakeTxData<T, { address: CreatePoolAddress }>>;\r\n  }\r\n\r\n  public async createMarketAndPoolV4<T extends TxVersion>({\r\n    programId = AMM_V4,\r\n    marketProgram = OPEN_BOOK_PROGRAM,\r\n    feeDestinationId = FEE_DESTINATION_ID,\r\n    tokenProgram,\r\n\r\n    baseMintInfo,\r\n    quoteMintInfo,\r\n    baseAmount,\r\n    quoteAmount,\r\n    startTime,\r\n\r\n    ownerInfo,\r\n    lowestFeeMarket,\r\n    assignSeed,\r\n\r\n    associatedOnly = false,\r\n    checkCreateATAOwner = false,\r\n\r\n    lotSize = 1,\r\n    tickSize = 0.01,\r\n\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CreateMarketAndPoolParam<T>): Promise<\r\n    MakeMultiTxData<T, { address: CreatePoolAddress & MarketExtInfo[\"address\"] }>\r\n  > {\r\n    const wallet = this.scope.ownerPubKey;\r\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && baseMintInfo.mint.equals(NATIVE_MINT);\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && quoteMintInfo.mint.equals(NATIVE_MINT);\r\n\r\n    const seed = assignSeed\r\n      ? `${baseMintInfo.mint.toBase58().slice(0, 7)}-${quoteMintInfo.mint.toBase58().slice(0, 7)}-${assignSeed}`\r\n      : undefined;\r\n\r\n    const market = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: marketProgram,\r\n      assignSeed: seed ? `${seed}-market` : seed,\r\n    });\r\n    const requestQueue = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: marketProgram,\r\n      assignSeed: seed ? `${seed}-request` : seed,\r\n    });\r\n    const eventQueue = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: marketProgram,\r\n      assignSeed: seed ? `${seed}-event` : seed,\r\n    });\r\n    const bids = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: marketProgram,\r\n      assignSeed: seed ? `${seed}-bids` : seed,\r\n    });\r\n    const asks = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: marketProgram,\r\n      assignSeed: seed ? `${seed}-asks` : seed,\r\n    });\r\n    const baseVault = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: TOKEN_PROGRAM_ID,\r\n      assignSeed: seed ? `${seed}-baseVault` : seed,\r\n    });\r\n    const quoteVault = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: TOKEN_PROGRAM_ID,\r\n      assignSeed: seed ? `${seed}-quoteVault` : seed,\r\n    });\r\n\r\n    const feeRateBps = 0;\r\n    const quoteDustThreshold = new BN(100);\r\n    function getVaultOwnerAndNonce() {\r\n      const vaultSignerNonce = new BN(0);\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        try {\r\n          const vaultOwner = PublicKey.createProgramAddressSync(\r\n            [market.publicKey.toBuffer(), vaultSignerNonce.toArrayLike(Buffer, \"le\", 8)],\r\n            marketProgram,\r\n          );\r\n          return { vaultOwner, vaultSignerNonce };\r\n        } catch (e) {\r\n          vaultSignerNonce.iaddn(1);\r\n          if (vaultSignerNonce.gt(new BN(25555))) throw Error(\"find vault owner error\");\r\n        }\r\n      }\r\n    }\r\n    const { vaultOwner, vaultSignerNonce } = getVaultOwnerAndNonce();\r\n    const baseLotSize = new BN(Math.round(10 ** baseMintInfo.decimals * lotSize));\r\n    const quoteLotSize = new BN(Math.round(lotSize * 10 ** quoteMintInfo.decimals * tickSize));\r\n\r\n    if (baseLotSize.eq(BN_ZERO)) throw Error(\"lot size is too small\");\r\n    if (quoteLotSize.eq(BN_ZERO)) throw Error(\"tick size or lot size is too small\");\r\n    const allTxArr = await makeCreateMarketInstruction({\r\n      connection: this.scope.connection,\r\n      wallet: this.scope.ownerPubKey,\r\n      marketInfo: {\r\n        programId: marketProgram,\r\n        vaultOwner,\r\n        baseMint: baseMintInfo.mint,\r\n        quoteMint: quoteMintInfo.mint,\r\n\r\n        id: market,\r\n        baseVault,\r\n        quoteVault,\r\n        requestQueue,\r\n        eventQueue,\r\n        bids,\r\n        asks,\r\n\r\n        feeRateBps,\r\n        quoteDustThreshold,\r\n        vaultSignerNonce,\r\n        baseLotSize,\r\n        quoteLotSize,\r\n        lowestFeeMarket,\r\n      },\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    txBuilder.addInstruction({\r\n      instructions: allTxArr[0].transaction.instructions,\r\n      signers: allTxArr[0].signer,\r\n    });\r\n\r\n    for await (const txData of allTxArr.slice(1, allTxArr.length)) {\r\n      txBuilder.addInstruction({\r\n        instructions: txData.transaction.instructions,\r\n        signers: txData.signer,\r\n        instructionTypes: txData.instructionTypes,\r\n      });\r\n    }\r\n\r\n    const { account: ownerTokenAccountBase, instructionParams: ownerTokenAccountBaseInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: baseMintInfo.mint,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintAUseSOLBalance\r\n          ? {\r\n            payer: payer!,\r\n            amount: baseAmount,\r\n          }\r\n          : undefined,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n        assignSeed: mintAUseSOLBalance && seed ? `${seed}-wsol` : undefined,\r\n      });\r\n\r\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\r\n\r\n    const { account: ownerTokenAccountQuote, instructionParams: ownerTokenAccountQuoteInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: quoteMintInfo.mint,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n            payer: payer!,\r\n            amount: quoteAmount,\r\n          }\r\n          : undefined,\r\n\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n        assignSeed: mintBUseSOLBalance && seed ? `${seed}-wsol` : undefined,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\r\n\r\n    if (ownerTokenAccountBase === undefined) throw Error(\"you don't has base token account\");\r\n    if (ownerTokenAccountQuote === undefined) throw Error(\"you don't has quote token account\");\r\n\r\n    // create pool ins\r\n    const poolInfo = getAssociatedPoolKeys({\r\n      version: 4,\r\n      marketVersion: 3,\r\n      marketId: market.publicKey,\r\n      baseMint: baseMintInfo.mint,\r\n      quoteMint: quoteMintInfo.mint,\r\n      baseDecimals: baseMintInfo.decimals,\r\n      quoteDecimals: quoteMintInfo.decimals,\r\n      programId,\r\n      marketProgramId: marketProgram,\r\n    });\r\n\r\n    const createPoolKeys = {\r\n      programId,\r\n      ammId: poolInfo.id,\r\n      ammAuthority: poolInfo.authority,\r\n      ammOpenOrders: poolInfo.openOrders,\r\n      lpMint: poolInfo.lpMint,\r\n      coinMint: poolInfo.baseMint,\r\n      pcMint: poolInfo.quoteMint,\r\n      coinVault: poolInfo.baseVault,\r\n      pcVault: poolInfo.quoteVault,\r\n      withdrawQueue: poolInfo.withdrawQueue,\r\n      ammTargetOrders: poolInfo.targetOrders,\r\n      poolTempLp: poolInfo.lpVault,\r\n      marketProgramId: poolInfo.marketProgramId,\r\n      marketId: poolInfo.marketId,\r\n      ammConfigId: poolInfo.configId,\r\n      feeDestinationId,\r\n    };\r\n\r\n    const { instruction, instructionType } = createPoolV4InstructionV2({\r\n      ...createPoolKeys,\r\n      userWallet: this.scope.ownerPubKey,\r\n      userCoinVault: ownerTokenAccountBase,\r\n      userPcVault: ownerTokenAccountQuote,\r\n      userLpVault: getATAAddress(this.scope.ownerPubKey, poolInfo.lpMint, tokenProgram).publicKey,\r\n\r\n      nonce: poolInfo.nonce,\r\n      openTime: startTime,\r\n      coinAmount: baseAmount,\r\n      pcAmount: quoteAmount,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [instruction],\r\n      instructionTypes: [instructionType],\r\n    });\r\n\r\n    const splitIns =\r\n      mintAUseSOLBalance || mintBUseSOLBalance\r\n        ? ([\r\n          ownerTokenAccountBaseInstruction?.instructions?.[0] || ownerTokenAccountQuoteInstruction?.instructions?.[0],\r\n        ].filter((i) => !!i) as TransactionInstruction[])\r\n        : undefined;\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({\r\n        computeBudgetConfig,\r\n        splitIns,\r\n        address: {\r\n          requestQueue: requestQueue.publicKey,\r\n          eventQueue: eventQueue.publicKey,\r\n          bids: bids.publicKey,\r\n          asks: asks.publicKey,\r\n          baseVault: baseVault.publicKey,\r\n          quoteVault: quoteVault.publicKey,\r\n          baseMint: new PublicKey(baseMintInfo.mint),\r\n          quoteMint: new PublicKey(quoteMintInfo.mint),\r\n          ...createPoolKeys,\r\n        },\r\n      }) as Promise<MakeMultiTxData<T, { address: CreatePoolAddress & MarketExtInfo[\"address\"] }>>;\r\n\r\n    return txBuilder.sizeCheckBuild({\r\n      computeBudgetConfig,\r\n      splitIns,\r\n      address: {\r\n        requestQueue: requestQueue.publicKey,\r\n        eventQueue: eventQueue.publicKey,\r\n        bids: bids.publicKey,\r\n        asks: asks.publicKey,\r\n        baseVault: baseVault.publicKey,\r\n        quoteVault: quoteVault.publicKey,\r\n        baseMint: new PublicKey(baseMintInfo.mint),\r\n        quoteMint: new PublicKey(quoteMintInfo.mint),\r\n        ...createPoolKeys,\r\n      },\r\n    }) as Promise<MakeMultiTxData<T, { address: CreatePoolAddress & MarketExtInfo[\"address\"] }>>;\r\n  }\r\n\r\n  public async getCreatePoolFee({ programId }: { programId: PublicKey }): Promise<BN> {\r\n    const configId = getAssociatedConfigId({ programId });\r\n\r\n    const account = await this.scope.connection.getAccountInfo(configId, { dataSlice: { offset: 536, length: 8 } });\r\n    if (account === null) throw Error(\"get config account error\");\r\n\r\n    return createPoolFeeLayout.decode(account.data).fee;\r\n  }\r\n\r\n  public computeAmountOut({\r\n    poolInfo,\r\n    amountIn,\r\n    mintIn: propMintIn,\r\n    mintOut: propMintOut,\r\n    slippage,\r\n  }: ComputeAmountOutParam): {\r\n    amountOut: BN;\r\n    minAmountOut: BN;\r\n    currentPrice: Decimal;\r\n    executionPrice: Decimal;\r\n    priceImpact: Decimal;\r\n    fee: BN;\r\n  } {\r\n    const [mintIn, mintOut] = [propMintIn.toString(), propMintOut.toString()];\r\n    if (mintIn !== poolInfo.mintA.address && mintIn !== poolInfo.mintB.address) throw new Error(\"toke not match\");\r\n    if (mintOut !== poolInfo.mintA.address && mintOut !== poolInfo.mintB.address) throw new Error(\"toke not match\");\r\n\r\n    const { baseReserve, quoteReserve } = poolInfo;\r\n\r\n    const reserves = [baseReserve, quoteReserve];\r\n    const mintDecimals = [poolInfo.mintA.decimals, poolInfo.mintB.decimals];\r\n\r\n    // input is fixed\r\n    const input = mintIn == poolInfo.mintA.address ? \"base\" : \"quote\";\r\n    if (input === \"quote\") {\r\n      reserves.reverse();\r\n      mintDecimals.reverse();\r\n    }\r\n\r\n    const [reserveIn, reserveOut] = reserves;\r\n    const [mintInDecimals, mintOutDecimals] = mintDecimals;\r\n    const isVersion4 = poolInfo.version === 4;\r\n    let currentPrice: Decimal;\r\n    if (isVersion4) {\r\n      currentPrice = new Decimal(reserveOut.toString())\r\n        .div(10 ** mintOutDecimals)\r\n        .div(new Decimal(reserveIn.toString()).div(10 ** mintInDecimals));\r\n    } else {\r\n      const p = getStablePrice(\r\n        this.stableLayout.stableModelData,\r\n        baseReserve.toNumber(),\r\n        quoteReserve.toNumber(),\r\n        false,\r\n      );\r\n      if (input === \"quote\") currentPrice = new Decimal(1e6).div(p * 1e6);\r\n      else currentPrice = new Decimal(p * 1e6).div(1e6);\r\n    }\r\n\r\n    const amountInRaw = amountIn;\r\n    let amountOutRaw = new BN(0);\r\n    let feeRaw = new BN(0);\r\n\r\n    if (!amountInRaw.isZero()) {\r\n      if (isVersion4) {\r\n        feeRaw = BNDivCeil(amountInRaw.mul(LIQUIDITY_FEES_NUMERATOR), LIQUIDITY_FEES_DENOMINATOR);\r\n        const amountInWithFee = amountInRaw.sub(feeRaw);\r\n\r\n        const denominator = reserveIn.add(amountInWithFee);\r\n        amountOutRaw = reserveOut.mul(amountInWithFee).div(denominator);\r\n      } else {\r\n        feeRaw = amountInRaw.mul(new BN(2)).div(new BN(10000));\r\n        const amountInWithFee = amountInRaw.sub(feeRaw);\r\n        if (input === \"quote\")\r\n          amountOutRaw = new BN(\r\n            getDyByDxBaseIn(\r\n              this.stableLayout.stableModelData,\r\n              quoteReserve.toNumber(),\r\n              baseReserve.toNumber(),\r\n              amountInWithFee.toNumber(),\r\n            ),\r\n          );\r\n        else {\r\n          amountOutRaw = new BN(\r\n            getDxByDyBaseIn(\r\n              this.stableLayout.stableModelData,\r\n              quoteReserve.toNumber(),\r\n              baseReserve.toNumber(),\r\n              amountInWithFee.toNumber(),\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const minAmountOutRaw = new BN(new Decimal(amountOutRaw.toString()).mul(1 - slippage).toFixed(0));\r\n\r\n    const amountOut = amountOutRaw;\r\n    const minAmountOut = minAmountOutRaw;\r\n\r\n    let executionPrice = new Decimal(amountOutRaw.toString()).div(\r\n      new Decimal(amountInRaw.sub(feeRaw).toString()).toFixed(0),\r\n    );\r\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\r\n      executionPrice = new Decimal(amountOutRaw.toString())\r\n        .div(10 ** mintOutDecimals)\r\n        .div(new Decimal(amountInRaw.sub(feeRaw).toString()).div(10 ** mintInDecimals));\r\n    }\r\n\r\n    const priceImpact = currentPrice.sub(executionPrice).div(currentPrice).mul(100);\r\n\r\n    const fee = feeRaw;\r\n\r\n    return {\r\n      amountOut,\r\n      minAmountOut,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee,\r\n    };\r\n  }\r\n\r\n  public computeAmountIn({ poolInfo, amountOut, mintIn, mintOut, slippage }: ComputeAmountInParam): {\r\n    amountIn: BN;\r\n    maxAmountIn: BN;\r\n    currentPrice: Decimal;\r\n    executionPrice: Decimal | null;\r\n    priceImpact: Decimal;\r\n  } {\r\n    const { baseReserve, quoteReserve } = poolInfo;\r\n    if (mintIn.toString() !== poolInfo.mintA.address && mintIn.toString() !== poolInfo.mintB.address)\r\n      this.logAndCreateError(\"mintIn does not match pool\");\r\n    if (mintOut.toString() !== poolInfo.mintA.address && mintOut.toString() !== poolInfo.mintB.address)\r\n      this.logAndCreateError(\"mintOut does not match pool\");\r\n    this.logDebug(\"baseReserve:\", baseReserve.toString());\r\n    this.logDebug(\"quoteReserve:\", quoteReserve.toString());\r\n\r\n    const baseIn = mintIn.toString() === poolInfo.mintA.address;\r\n    const [tokenIn, tokenOut] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n\r\n    this.logDebug(\"currencyOut:\", tokenOut.symbol || tokenOut.address);\r\n    this.logDebug(\r\n      \"amountOut:\",\r\n      new Decimal(amountOut.toString())\r\n        .div(10 ** tokenOut.decimals)\r\n        .toDecimalPlaces(tokenOut.decimals)\r\n        .toString(),\r\n      tokenIn.symbol || tokenIn.address,\r\n    );\r\n    this.logDebug(\"slippage:\", `${slippage * 100}%`);\r\n\r\n    const reserves = [baseReserve, quoteReserve];\r\n\r\n    // output is fixed\r\n    const output = !baseIn ? \"base\" : \"quote\";\r\n    if (output === \"base\") {\r\n      reserves.reverse();\r\n    }\r\n    this.logDebug(\"output side:\", output);\r\n\r\n    const [reserveIn, reserveOut] = reserves;\r\n\r\n    const currentPrice = new Decimal(reserveOut.toString())\r\n      .div(10 ** poolInfo[baseIn ? \"mintB\" : \"mintA\"].decimals)\r\n      .div(new Decimal(reserveIn.toString()).div(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals));\r\n    this.logDebug(\r\n      \"currentPrice:\",\r\n      `1 ${tokenIn.symbol || tokenIn.address} ≈ ${currentPrice.toString()} ${tokenOut.symbol || tokenOut.address}`,\r\n    );\r\n    this.logDebug(\r\n      \"currentPrice invert:\",\r\n      `1 ${tokenOut.symbol || tokenOut.address} ≈ ${new Decimal(1).div(currentPrice).toString()} ${tokenIn.symbol || tokenIn.address\r\n      }`,\r\n    );\r\n\r\n    let amountInRaw = new BN(0);\r\n    let amountOutRaw = amountOut;\r\n    if (!amountOutRaw.isZero()) {\r\n      // if out > reserve, out = reserve - 1\r\n      if (amountOutRaw.gt(reserveOut)) {\r\n        amountOutRaw = reserveOut.sub(new BN(1));\r\n      }\r\n\r\n      const denominator = reserveOut.sub(amountOutRaw);\r\n      const amountInWithoutFee = reserveIn.mul(amountOutRaw).div(denominator);\r\n\r\n      amountInRaw = amountInWithoutFee\r\n        .mul(LIQUIDITY_FEES_DENOMINATOR)\r\n        .div(LIQUIDITY_FEES_DENOMINATOR.sub(LIQUIDITY_FEES_NUMERATOR));\r\n    }\r\n\r\n    const maxAmountInRaw = new BN(new Decimal(amountInRaw.toString()).mul(1 + slippage).toFixed(0));\r\n\r\n    const amountIn = amountInRaw;\r\n    const maxAmountIn = maxAmountInRaw;\r\n    this.logDebug(\r\n      \"amountIn:\",\r\n      new Decimal(amountIn.toString())\r\n        .div(10 ** tokenIn.decimals)\r\n        .toDecimalPlaces(tokenIn.decimals)\r\n        .toString(),\r\n    );\r\n    this.logDebug(\r\n      \"maxAmountIn:\",\r\n      new Decimal(maxAmountIn.toString())\r\n        .div(10 ** tokenIn.decimals)\r\n        .toDecimalPlaces(tokenIn.decimals)\r\n        .toString(),\r\n    );\r\n\r\n    let executionPrice: Decimal | null = null;\r\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\r\n      executionPrice = new Decimal(amountOutRaw.toString())\r\n        .div(10 ** tokenOut.decimals)\r\n        .div(new Decimal(amountInRaw.toString()).div(10 ** tokenIn.decimals));\r\n      this.logDebug(\r\n        \"executionPrice:\",\r\n        `1 ${tokenOut.symbol || tokenOut.address} ≈ ${executionPrice\r\n          .toDecimalPlaces(Math.max(poolInfo.mintA.decimals, poolInfo.mintB.decimals))\r\n          .toString()} ${tokenIn.symbol || tokenIn.address}`,\r\n      );\r\n      this.logDebug(\r\n        \"executionPrice invert:\",\r\n        `1 ${tokenOut.symbol || tokenOut.address} ≈ ${new Decimal(1)\r\n          .div(executionPrice)\r\n          .toDecimalPlaces(Math.max(poolInfo.mintA.decimals, poolInfo.mintB.decimals))\r\n          .toString()} ${tokenIn.symbol || tokenIn.address}`,\r\n      );\r\n    }\r\n\r\n    const exactQuote = currentPrice.mul(amountIn.toString());\r\n    const priceImpact = exactQuote.sub(amountOut.toString()).abs().div(exactQuote);\r\n    this.logDebug(\"priceImpact:\", `${priceImpact.toString()}%`);\r\n\r\n    return {\r\n      amountIn,\r\n      maxAmountIn,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n    };\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    amountIn,\r\n    amountOut,\r\n    inputMint,\r\n    fixedSide,\r\n    txVersion,\r\n    config,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: SwapParam<T>): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const { associatedOnly = true, inputUseSolBalance = true, outputUseSolBalance = true } = config || {};\r\n\r\n    const [tokenIn, tokenOut] =\r\n      inputMint === poolInfo.mintA.address ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n\r\n    const inputTokenUseSolBalance = inputUseSolBalance && tokenIn.address === WSOLMint.toBase58();\r\n    const outputTokenUseSolBalance = outputUseSolBalance && tokenOut.address === WSOLMint.toBase58();\r\n\r\n    const { account: _tokenAccountIn, instructionParams: ownerTokenAccountBaseInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        mint: new PublicKey(tokenIn.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: inputTokenUseSolBalance\r\n          ? {\r\n            payer: this.scope.ownerPubKey,\r\n            amount: amountIn,\r\n          }\r\n          : undefined,\r\n        skipCloseAccount: !inputTokenUseSolBalance,\r\n        notUseTokenAccount: inputTokenUseSolBalance,\r\n        associatedOnly,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\r\n\r\n    if (!_tokenAccountIn)\r\n      this.logAndCreateError(\"input token account not found\", {\r\n        token: tokenIn.symbol || tokenIn.address,\r\n        tokenAccountIn: _tokenAccountIn,\r\n        inputTokenUseSolBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const { account: _tokenAccountOut, instructionParams: ownerTokenAccountQuoteInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        mint: new PublicKey(tokenOut.address),\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey!,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !outputTokenUseSolBalance,\r\n        notUseTokenAccount: outputTokenUseSolBalance,\r\n        associatedOnly: outputTokenUseSolBalance ? false : associatedOnly,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\r\n    if (_tokenAccountOut === undefined)\r\n      this.logAndCreateError(\"output token account not found\", {\r\n        token: tokenOut.symbol || tokenOut.address,\r\n        tokenAccountOut: _tokenAccountOut,\r\n        outputTokenUseSolBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys || (await this.getAmmPoolKeys(poolInfo.id));\r\n    let version = 4;\r\n    if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeAMMSwapInstruction({\r\n          version,\r\n          poolKeys,\r\n          userKeys: {\r\n            tokenAccountIn: _tokenAccountIn!,\r\n            tokenAccountOut: _tokenAccountOut!,\r\n            owner: this.scope.ownerPubKey,\r\n          },\r\n          amountIn,\r\n          amountOut,\r\n          fixedSide,\r\n        }),\r\n      ],\r\n      instructionTypes: [version === 4 ? InstructionType.AmmV4SwapBaseIn : InstructionType.AmmV5SwapBaseIn],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async getRpcPoolInfo(poolId: string): Promise<AmmRpcData> {\r\n    return (await this.getRpcPoolInfos([poolId]))[poolId];\r\n  }\r\n\r\n  public async getRpcPoolInfos(\r\n    poolIds: (string | PublicKey)[],\r\n    config?: { batchRequest?: boolean; chunkCount?: number },\r\n  ): Promise<{\r\n    [poolId: string]: AmmRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n    const poolInfos: { [poolId: string]: ReturnType<typeof liquidityStateV4Layout.decode> & { programId: PublicKey } } =\r\n      {};\r\n\r\n    const needFetchVaults: PublicKey[] = [];\r\n\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = liquidityStateV4Layout.decode(item.accountInfo.data);\r\n      poolInfos[String(poolIds[i])] = {\r\n        ...rpc,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n\r\n      needFetchVaults.push(rpc.baseVault, rpc.quoteVault);\r\n    }\r\n\r\n    const vaultInfo: { [vaultId: string]: BN } = {};\r\n    const vaultAccountInfo = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      needFetchVaults.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n\r\n    for (let i = 0; i < needFetchVaults.length; i++) {\r\n      const vaultItemInfo = vaultAccountInfo[i].accountInfo;\r\n      if (vaultItemInfo === null) throw Error(\"fetch vault info error: \" + needFetchVaults[i]);\r\n\r\n      vaultInfo[String(needFetchVaults[i])] = new BN(AccountLayout.decode(vaultItemInfo.data).amount.toString());\r\n    }\r\n\r\n    const returnData: { [poolId: string]: AmmRpcData } = {};\r\n\r\n    for (const [id, info] of Object.entries(poolInfos)) {\r\n      const baseReserve = vaultInfo[info.baseVault.toString()].sub(info.baseNeedTakePnl);\r\n      const quoteReserve = vaultInfo[info.quoteVault.toString()].sub(info.quoteNeedTakePnl);\r\n      returnData[id] = {\r\n        ...info,\r\n        baseReserve,\r\n        mintAAmount: vaultInfo[info.baseVault.toString()],\r\n        mintBAmount: vaultInfo[info.quoteVault.toString()],\r\n        quoteReserve,\r\n        poolPrice: new Decimal(quoteReserve.toString())\r\n          .div(new Decimal(10).pow(info.quoteDecimal.toString()))\r\n          .div(new Decimal(baseReserve.toString()).div(new Decimal(10).pow(info.baseDecimal.toString()))),\r\n      };\r\n    }\r\n\r\n    return returnData;\r\n  }\r\n\r\n  public async getPoolInfoFromRpc({ poolId }: { poolId: string }): Promise<{\r\n    poolRpcData: AmmRpcData;\r\n    poolInfo: ComputeAmountOutParam[\"poolInfo\"];\r\n    poolKeys: AmmV4Keys | AmmV5Keys;\r\n  }> {\r\n    const rpcData = await this.getRpcPoolInfo(poolId);\r\n    const computeData = toAmmComputePoolInfo({ [poolId]: rpcData });\r\n    const poolInfo = computeData[poolId];\r\n    const allKeys = await this.scope.tradeV2.computePoolToPoolKeys({\r\n      pools: [computeData[poolId]],\r\n      ammRpcData: { [poolId]: rpcData },\r\n    });\r\n    return {\r\n      poolRpcData: rpcData,\r\n      poolInfo,\r\n      poolKeys: allKeys[0] as AmmV4Keys | AmmV5Keys,\r\n    };\r\n  }\r\n}\r\n","import { Connection, Keypair, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token, ClmmKeys } from \"@/api/type\";\r\nimport {\r\n  InstructionType,\r\n  MEMO_PROGRAM_ID,\r\n  MEMO_PROGRAM_ID2,\r\n  METADATA_PROGRAM_ID,\r\n  RENT_PROGRAM_ID,\r\n  createLogger,\r\n  getATAAddress,\r\n  parseBigNumberish,\r\n} from \"@/common\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { bool, s32, struct, u128, u64, u8 } from \"@/marshmallow\";\r\nimport { ClmmPositionLayout, ObservationInfoLayout } from \"./layout\";\r\nimport {\r\n  ClmmPoolPersonalPosition,\r\n  ClosePositionExtInfo,\r\n  InitRewardExtInfo,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport {\r\n  getPdaExBitmapAccount,\r\n  getPdaLockPositionId,\r\n  getPdaMetadataKey,\r\n  getPdaObservationAccount,\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaPoolId,\r\n  getPdaPoolRewardVaulId,\r\n  getPdaPoolVaultId,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaTickArrayAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\nimport { ZERO } from \"./utils/constants\";\r\nObservationInfoLayout.span; // do not delete this line\r\n\r\nconst logger = createLogger(\"Raydium_Clmm\");\r\n\r\nconst anchorDataBuf = {\r\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\r\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\r\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\r\n  openPosition: [77, 184, 74, 214, 112, 86, 241, 199],\r\n  openPositionWithTokenEx: [77, 255, 174, 82, 125, 29, 201, 46],\r\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\r\n  increaseLiquidity: [133, 29, 89, 223, 69, 238, 176, 10],\r\n  decreaseLiquidity: [58, 127, 188, 62, 79, 82, 196, 96],\r\n  swap: [43, 4, 237, 11, 26, 201, 30, 98], // [248, 198, 158, 145, 225, 117, 135, 200],\r\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\r\n};\r\n\r\nconst lockInsDataBuf = [188, 37, 179, 131, 82, 150, 84, 73];\r\nconst lockHarvestInsDataBuf = [16, 72, 250, 198, 14, 162, 212, 19];\r\n\r\ninterface CreatePoolInstruction {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  ammConfigId: PublicKey;\r\n  initialPriceX64: BN;\r\n  forerunCreate?: boolean;\r\n  extendMintAccount?: PublicKey[];\r\n}\r\n\r\nexport class ClmmInstrument {\r\n  static createPoolInstruction(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    poolCreator: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    observationId: PublicKey,\r\n    mintA: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintProgramIdA: PublicKey,\r\n    mintB: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintProgramIdB: PublicKey,\r\n    exTickArrayBitmap: PublicKey,\r\n    sqrtPriceX64: BN,\r\n    extendMintAccount?: PublicKey[],\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"sqrtPriceX64\"), u64(\"zero\")]);\r\n\r\n    const keys = [\r\n      { pubkey: poolCreator, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n      { pubkey: exTickArrayBitmap, isSigner: false, isWritable: true },\r\n      { pubkey: mintProgramIdA, isSigner: false, isWritable: false },\r\n      { pubkey: mintProgramIdB, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      ...(extendMintAccount?.map((k) => ({ pubkey: k, isSigner: false, isWritable: false })) || []),\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        sqrtPriceX64,\r\n        zero: ZERO,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async createPoolInstructions(props: CreatePoolInstruction): Promise<\r\n    ReturnTypeMakeInstructions<{\r\n      poolId: PublicKey;\r\n      observationId: PublicKey;\r\n      exBitmapAccount: PublicKey;\r\n      mintAVault: PublicKey;\r\n      mintBVault: PublicKey;\r\n    }>\r\n  > {\r\n    const { programId, owner, mintA, mintB, ammConfigId, initialPriceX64, extendMintAccount } = props;\r\n    const [mintAAddress, mintBAddress] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\r\n\r\n    const { publicKey: poolId } = getPdaPoolId(programId, ammConfigId, mintAAddress, mintBAddress);\r\n    const { publicKey: observationId } = getPdaObservationAccount(programId, poolId);\r\n    const { publicKey: mintAVault } = getPdaPoolVaultId(programId, poolId, mintAAddress);\r\n    const { publicKey: mintBVault } = getPdaPoolVaultId(programId, poolId, mintBAddress);\r\n    const exBitmapAccount = getPdaExBitmapAccount(programId, poolId).publicKey;\r\n\r\n    const ins = [\r\n      this.createPoolInstruction(\r\n        programId,\r\n        poolId,\r\n        owner,\r\n        ammConfigId,\r\n        observationId,\r\n        mintAAddress,\r\n        mintAVault,\r\n        new PublicKey(mintA.programId || TOKEN_PROGRAM_ID),\r\n        mintBAddress,\r\n        mintBVault,\r\n        new PublicKey(mintB.programId || TOKEN_PROGRAM_ID),\r\n        exBitmapAccount,\r\n        initialPriceX64,\r\n        extendMintAccount,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.CreateAccount, InstructionType.ClmmCreatePool],\r\n      address: { poolId, observationId, exBitmapAccount, mintAVault, mintBVault },\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      signers,\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n    };\r\n  }\r\n\r\n  static async openPositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromBaseExtInfo>> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromBaseInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromBaseInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromLiquidityExtInfo[\"address\"]>> {\r\n    let nftMintAccount: PublicKey;\r\n    const signers: Keypair[] = [];\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static closePositionInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n    nft2022?: boolean,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([]);\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({}, data);\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static closePositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    ownerPosition,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n    };\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ClosePositionExtInfo[\"address\"]> {\r\n    const programId = new PublicKey(poolInfo.programId);\r\n    // const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    ins.push(\r\n      this.closePositionInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        ownerPosition.nftMint,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        nft2022,\r\n      ),\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        positionNftAccount,\r\n        personalPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmClosePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        optionBaseFlag: 0,\r\n        baseFlag: false,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const ins = this.increasePositionFromLiquidityInstruction(\r\n      programId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(programId, id).publicKey\r\n        : undefined,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPoolPersonalPosition;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [\r\n        this.increasePositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          positionNftAccount,\r\n          personalPosition,\r\n          id,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        ),\r\n      ],\r\n      signers: [],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[],\r\n\r\n    liquidity: BN,\r\n    amountMinA: BN,\r\n    amountMinB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"liquidity\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMinA,\r\n        amountMinB,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMinA,\r\n    amountMinB,\r\n    programId,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n      rewardAccounts: PublicKey[];\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMinA: BN;\r\n    amountMinB: BN;\r\n    programId?: PublicKey;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [poolProgramId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, id, tickArrayUpperStartIndex);\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, programId);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolProgramId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolInfo.rewardDefaultInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: ownerInfo.rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolInfo.rewardDefaultInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    const decreaseIns = this.decreaseLiquidityInstruction(\r\n      poolProgramId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n      rewardAccounts,\r\n\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(poolProgramId, id).publicKey\r\n        : undefined,\r\n    );\r\n    ins.push(decreaseIns);\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static swapInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    inputTokenAccount: PublicKey,\r\n    outputTokenAccount: PublicKey,\r\n    inputVault: PublicKey,\r\n    outputVault: PublicKey,\r\n    inputMint: PublicKey,\r\n    outputMint: PublicKey,\r\n    tickArray: PublicKey[],\r\n    observationId: PublicKey,\r\n\r\n    amount: BN,\r\n    otherAmountThreshold: BN,\r\n    sqrtPriceLimitX64: BN,\r\n    isBaseInput: boolean,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u64(\"amount\"),\r\n      u64(\"otherAmountThreshold\"),\r\n      u128(\"sqrtPriceLimitX64\"),\r\n      bool(\"isBaseInput\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...tickArray.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: false },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: inputVault, isSigner: false, isWritable: true },\r\n      { pubkey: outputVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: inputMint, isSigner: false, isWritable: false },\r\n      { pubkey: outputMint, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        amount,\r\n        otherAmountThreshold,\r\n        sqrtPriceLimitX64,\r\n        isBaseInput,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static makeSwapBaseInInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    inputMint: PublicKey;\r\n\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const isInputMintA = poolInfo.mintA.address === inputMint.toString();\r\n\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n\r\n        isInputMintA ? mintAVault : mintBVault,\r\n        isInputMintA ? mintBVault : mintAVault,\r\n\r\n        isInputMintA ? mintA : mintB,\r\n        isInputMintA ? mintB : mintA,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        true,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseIn],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static makeSwapBaseOutInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    outputMint: PublicKey;\r\n\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n    const isInputMintA = poolInfo.mintA.address === outputMint.toBase58();\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n\r\n        isInputMintA ? mintBVault : mintAVault,\r\n        isInputMintA ? mintAVault : mintBVault,\r\n\r\n        isInputMintA ? mintB : mintA,\r\n        isInputMintA ? mintA : mintB,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        false,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseOut],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static initRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardProgramId: PublicKey,\r\n    rewardMint: PublicKey,\r\n    rewardVault: PublicKey,\r\n\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u64(\"openTime\"), u64(\"endTime\"), u128(\"emissionsPerSecondX64\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: rewardProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n        emissionsPerSecondX64,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static initRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      programId: PublicKey;\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions<InitRewardExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const poolRewardVault = getPdaPoolRewardVaulId(programId, id, rewardInfo.mint).publicKey;\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n    const ins = [\r\n      this.initRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardInfo.programId,\r\n        rewardInfo.mint,\r\n        poolRewardVault,\r\n\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { poolRewardVault, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmInitReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static setRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\"), u128(\"emissionsPerSecondX64\"), u64(\"openTime\"), u64(\"endTime\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: true },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n        emissionsPerSecondX64,\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static setRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    let rewardMint: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardInfo.mint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n        rewardMint = new PublicKey(poolKeys.rewardInfos[index].mint.address);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n\r\n    const ins = [\r\n      this.setRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint!,\r\n\r\n        rewardIndex!,\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault!, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSetReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static collectRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static collectRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardMint,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardMint: PublicKey;\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardMint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const ins = [\r\n      this.collectRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint,\r\n\r\n        rewardIndex!,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault! },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmCollectReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static async makeLockPositions({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    payer,\r\n    wallet,\r\n    nftMint,\r\n    nft2022,\r\n    getEphemeralSigners,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    wallet: PublicKey;\r\n    payer: PublicKey;\r\n    nftMint: PublicKey;\r\n    nft2022?: boolean;\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<ReturnTypeMakeInstructions<ClmmLockAddress>> {\r\n    const signers: Signer[] = [];\r\n    let lockNftMint: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      lockNftMint = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      lockNftMint = _k.publicKey;\r\n    }\r\n\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(wallet, nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(wallet, nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, nftMint);\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(wallet, lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const metadataAccount = getPdaMetadataKey(lockNftMint).publicKey;\r\n\r\n    const ins = ClmmInstrument.lockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      payer,\r\n      positionOwner: wallet,\r\n      lockOwner: wallet,\r\n      positionNftAccount,\r\n      positionId,\r\n      lockPositionId,\r\n      lockNftMint,\r\n      lockNftAccount,\r\n      metadataAccount,\r\n      withMetadata: true,\r\n      nft2022,\r\n\r\n      positionNftMint: nftMint,\r\n      authPositionNftAccount: getATAAddress(authProgramId, nftMint, nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID)\r\n        .publicKey,\r\n      positionNftProgram: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n    });\r\n\r\n    return {\r\n      address: {\r\n        positionId,\r\n        lockPositionId,\r\n        lockNftAccount,\r\n        lockNftMint,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmLockPosition],\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static lockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    payer,\r\n    positionOwner,\r\n    lockOwner,\r\n    positionNftAccount,\r\n    positionId,\r\n    positionNftMint,\r\n    authPositionNftAccount,\r\n    positionNftProgram,\r\n    lockPositionId,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    metadataAccount,\r\n    withMetadata,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    payer: PublicKey;\r\n    positionOwner: PublicKey;\r\n    lockOwner: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    positionNftMint: PublicKey;\r\n    authPositionNftAccount: PublicKey;\r\n    positionNftProgram: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    metadataAccount: PublicKey;\r\n    withMetadata: boolean;\r\n    nft2022?: boolean;\r\n  }): TransactionInstruction {\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionOwner, isSigner: true, isWritable: true },\r\n      { pubkey: lockOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: authPositionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: true },\r\n      { pubkey: lockNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftProgram, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    const dataLayout = struct([bool(\"withMetadata\")]);\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        withMetadata,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...lockInsDataBuf, ...data]);\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static lockPositionInstruction({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    owner,\r\n    positionNft,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    owner: PublicKey;\r\n    positionNft: PublicKey;\r\n  }): TransactionInstruction {\r\n    const { publicKey: nftAccount } = getATAAddress(owner, positionNft, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, positionNft);\r\n\r\n    const keys = [\r\n      { pubkey: authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(programId, positionId).publicKey, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstruction(props: {\r\n    poolKeys: ClmmKeys;\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    ownerPosition: ClmmPositionLayout;\r\n    owner: PublicKey;\r\n    ownerRewardAccounts: PublicKey[];\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n  }): TransactionInstruction {\r\n    const [poolProgramId, poolId] = [new PublicKey(props.poolKeys.programId), new PublicKey(props.poolKeys.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickLower,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickUpper,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayUpperStartIndex);\r\n    const { publicKey: nftAccount } = getATAAddress(props.owner, props.ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, props.ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      poolId,\r\n      props.ownerPosition.tickLower,\r\n      props.ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n\r\n    for (let i = 0; i < props.poolKeys.rewardInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(props.poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: props.ownerRewardAccounts[i],\r\n        rewardMint: new PublicKey(props.poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const remainingAccounts = [\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: props.authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(props.programId, positionId).publicKey, isSigner: false, isWritable: false },\r\n      { pubkey: poolProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: props.owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.A), isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.B), isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintA.address), isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintB.address), isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId: props.programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    lockPositionId,\r\n    clmmProgram,\r\n    lockOwner,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    positionNftAccount,\r\n    positionId,\r\n    poolId,\r\n    protocolPosition,\r\n    vaultA,\r\n    vaultB,\r\n    tickArrayLower,\r\n    tickArrayUpper,\r\n    userVaultA,\r\n    userVaultB,\r\n    mintA,\r\n    mintB,\r\n    rewardAccounts,\r\n    exTickArrayBitmap,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    clmmProgram: PublicKey;\r\n    lockOwner: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    poolId: PublicKey;\r\n    protocolPosition: PublicKey;\r\n    vaultA: PublicKey;\r\n    vaultB: PublicKey;\r\n    tickArrayLower: PublicKey;\r\n    tickArrayUpper: PublicKey;\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n    mintA: PublicKey;\r\n    mintB: PublicKey;\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[];\r\n\r\n    exTickArrayBitmap?: PublicKey;\r\n  }): TransactionInstruction {\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: lockOwner, isSigner: true, isWritable: false },\r\n      // { pubkey: lockNftMint, isSigner: false, isWritable: false },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: false },\r\n      { pubkey: clmmProgram, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: vaultA, isSigner: false, isWritable: true },\r\n      { pubkey: vaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { ClmmPoolInfo, TickArrayBitmapExtensionType } from \"../type\";\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { SqrtPriceMath, TickMath } from \"./math\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport const TICK_ARRAY_SIZE = 60;\r\nexport const TICK_ARRAY_BITMAP_SIZE = 512;\r\n\r\nexport interface ReturnTypeGetTickPrice {\r\n  tick: number;\r\n  price: Decimal;\r\n  tickSqrtPriceX64: BN;\r\n}\r\n\r\nexport interface ReturnTypeGetPriceAndTick {\r\n  tick: number;\r\n  price: Decimal;\r\n}\r\n\r\nexport type Tick = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  rewardGrowthsOutsideX64: BN[];\r\n};\r\n\r\nexport type TickArray = {\r\n  address: PublicKey;\r\n  poolId: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: Tick[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport type TickState = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  tickCumulativeOutside: BN;\r\n  secondsPerLiquidityOutsideX64: BN;\r\n  secondsOutside: number;\r\n  rewardGrowthsOutside: BN[];\r\n};\r\n\r\nexport type TickArrayState = {\r\n  ammPool: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: TickState[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport class TickUtils {\r\n  public static getTickArrayAddressByTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n  ): PublicKey {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return tickArrayAddress;\r\n  }\r\n\r\n  public static getTickOffsetInArray(tickIndex: number, tickSpacing: number): number {\r\n    if (tickIndex % tickSpacing != 0) {\r\n      throw new Error(\"tickIndex % tickSpacing not equal 0\");\r\n    }\r\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing);\r\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\r\n      throw new Error(\"tick offset in array overflow\");\r\n    }\r\n    return offsetInArray;\r\n  }\r\n\r\n  public static getTickArrayBitIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = TickQuery.tickCount(tickSpacing);\r\n\r\n    let startIndex: number = tickIndex / ticksInArray;\r\n    if (tickIndex < 0 && tickIndex % ticksInArray != 0) {\r\n      startIndex = Math.ceil(startIndex) - 1;\r\n    } else {\r\n      startIndex = Math.floor(startIndex);\r\n    }\r\n    return startIndex;\r\n  }\r\n\r\n  public static getTickArrayStartIndexByTick(tickIndex: number, tickSpacing: number): number {\r\n    return this.getTickArrayBitIndex(tickIndex, tickSpacing) * TickQuery.tickCount(tickSpacing);\r\n  }\r\n\r\n  public static getTickArrayOffsetInBitmapByTick(tick: number, tickSpacing: number): number {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    return Math.abs(compressed);\r\n  }\r\n\r\n  public static checkTickArrayIsInitialized(\r\n    bitmap: BN,\r\n    tick: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    isInitialized: boolean;\r\n    startIndex: number;\r\n  } {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    const bitPos = Math.abs(compressed);\r\n    return {\r\n      isInitialized: bitmap.testn(bitPos),\r\n      startIndex: (bitPos - 512) * multiplier,\r\n    };\r\n  }\r\n\r\n  public static getNextTickArrayStartIndex(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): number {\r\n    return zeroForOne\r\n      ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE\r\n      : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE;\r\n  }\r\n\r\n  public static mergeTickArrayBitmap(bns: BN[]): BN {\r\n    let b = new BN(0);\r\n    for (let i = 0; i < bns.length; i++) {\r\n      b = b.add(bns[i].shln(64 * i));\r\n    }\r\n    return b;\r\n  }\r\n\r\n  public static getInitializedTickArrayInRange(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n    tickArrayStartIndex: number,\r\n    expectedCount: number,\r\n  ): number[] {\r\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE));\r\n    return [\r\n      // find right of currenct offset\r\n      ...TickUtils.searchLowBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset - 1,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n\r\n      // find left of current offset\r\n      ...TickUtils.searchHightBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public static getAllInitializedTickArrayStartIndex(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    // find from offset 0 to 1024\r\n    return TickUtils.searchHightBitFromStart(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      -7680,\r\n      TICK_ARRAY_BITMAP_SIZE,\r\n      tickSpacing,\r\n    );\r\n  }\r\n\r\n  public static getAllInitializedTickArrayInfo(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n  ): {\r\n    tickArrayStartIndex: number;\r\n    tickArrayAddress: PublicKey;\r\n  }[] {\r\n    const result: {\r\n      tickArrayStartIndex: number;\r\n      tickArrayAddress: PublicKey;\r\n    }[] = [];\r\n    const allInitializedTickArrayIndex: number[] = TickUtils.getAllInitializedTickArrayStartIndex(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n    );\r\n    for (const startIndex of allInitializedTickArrayIndex) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n      result.push({\r\n        tickArrayStartIndex: startIndex,\r\n        tickArrayAddress: address,\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static getAllInitializedTickInTickArray(tickArray: TickArrayState): TickState[] {\r\n    return tickArray.ticks.filter((i) => i.liquidityGross.gtn(0));\r\n  }\r\n\r\n  public static searchLowBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex >= -7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex--;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static searchHightBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex < 7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex++;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static checkIsOutOfBoundary(tick: number): boolean {\r\n    return tick < MIN_TICK || tick > MAX_TICK;\r\n  }\r\n\r\n  public static nextInitTick(\r\n    tickArrayCurrent: TickArray,\r\n    currentTickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    t: boolean,\r\n  ): Tick | null {\r\n    const currentTickArrayStartIndex = TickQuery.getArrayStartIndex(currentTickIndex, tickSpacing);\r\n    if (currentTickArrayStartIndex != tickArrayCurrent.startTickIndex) {\r\n      return null;\r\n    }\r\n    let offsetInArray = Math.floor((currentTickIndex - tickArrayCurrent.startTickIndex) / tickSpacing);\r\n\r\n    if (zeroForOne) {\r\n      while (offsetInArray >= 0) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray - 1;\r\n      }\r\n    } else {\r\n      if (!t) offsetInArray = offsetInArray + 1;\r\n      while (offsetInArray < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray + 1;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static firstInitializedTick(tickArrayCurrent: TickArray, zeroForOne: boolean): Tick {\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n\r\n    throw Error(`firstInitializedTick check error: ${tickArrayCurrent} - ${zeroForOne}`);\r\n  }\r\n\r\n  public static _getTickPriceLegacy({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static _getPriceAndTickLegacy({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.ammConfig.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n\r\n  public static getTickPrice({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static getPriceAndTick({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.config.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nexport const ZERO = new BN(0);\r\nexport const ONE = new BN(1);\r\nexport const NEGATIVE_ONE = new BN(-1);\r\n\r\nexport const Q64 = new BN(1).shln(64);\r\nexport const Q128 = new BN(1).shln(128);\r\n\r\nexport const MaxU64 = Q64.sub(ONE);\r\n\r\nexport const U64Resolution = 64;\r\n\r\nexport const MaxUint128 = Q128.subn(1);\r\n\r\nexport const MIN_TICK = -443636;\r\nexport const MAX_TICK = -MIN_TICK;\r\n\r\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"4295048016\");\r\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"79226673521066979257578248091\");\r\n\r\nexport const MIN_SQRT_PRICE_X64_ADD_ONE: BN = new BN(\"4295048017\");\r\nexport const MAX_SQRT_PRICE_X64_SUB_ONE: BN = new BN(\"79226673521066979257578248090\");\r\n\r\n// export const MIN_TICK_ARRAY_START_INDEX = -307200;\r\n// export const MAX_TICK_ARRAY_START_INDEX = 306600;\r\n\r\nexport const BIT_PRECISION = 16;\r\nexport const LOG_B_2_X32 = \"59543866431248\";\r\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\r\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\r\n\r\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\r\n\r\nexport enum Fee {\r\n  rate_500 = 500, //  500 / 10e6 = 0.0005\r\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\r\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\r\n}\r\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\r\n  [Fee.rate_500]: 10,\r\n  [Fee.rate_3000]: 60,\r\n  [Fee.rate_10000]: 200,\r\n};\r\n\r\nexport const mockCreatePoolInfo = {\r\n  version: 6,\r\n  liquidity: ZERO,\r\n  tickCurrent: 0,\r\n  feeGrowthGlobalX64A: ZERO,\r\n  feeGrowthGlobalX64B: ZERO,\r\n  protocolFeesTokenA: ZERO,\r\n  protocolFeesTokenB: ZERO,\r\n  swapInAmountTokenA: ZERO,\r\n  swapOutAmountTokenB: ZERO,\r\n  swapInAmountTokenB: ZERO,\r\n  swapOutAmountTokenA: ZERO,\r\n  tickArrayBitmap: [],\r\n\r\n  rewardInfos: [],\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  tvl: 0,\r\n};\r\n\r\nexport const mockV3CreatePoolInfo = {\r\n  tvl: 0,\r\n  volumeQuote: 0,\r\n  mintAmountA: 0,\r\n  mintAmountB: 0,\r\n  rewardDefaultInfos: [],\r\n  farmUpcomingCount: 0,\r\n  farmOngoingCount: 0,\r\n  farmFinishedCount: 0,\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  pooltype: [],\r\n};\r\n\r\nexport const U64_IGNORE_RANGE = new BN(\"18446744073700000000\");\r\n","import { EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common/transfer\";\r\nimport { ReturnTypeGetLiquidityAmountOut, TickArrayBitmapExtensionType } from \"../type\";\r\nimport {\r\n  BIT_PRECISION,\r\n  Fee,\r\n  FEE_RATE_DENOMINATOR,\r\n  LOG_B_2_X32,\r\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\r\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\r\n  MAX_SQRT_PRICE_X64,\r\n  MAX_TICK,\r\n  MaxU64,\r\n  MaxUint128,\r\n  MIN_SQRT_PRICE_X64,\r\n  MIN_TICK,\r\n  NEGATIVE_ONE,\r\n  ONE,\r\n  Q128,\r\n  Q64,\r\n  U64Resolution,\r\n  ZERO,\r\n} from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { PoolUtils } from \"./pool\";\r\nimport { Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class MathUtil {\r\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\r\n    const numerator = a.mul(b);\r\n    let result = numerator.div(denominator);\r\n    if (!numerator.mod(denominator).eq(ZERO)) {\r\n      result = result.add(ONE);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    return a.mul(b).div(denominator);\r\n  }\r\n\r\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    const numerator = a.mul(b).add(denominator.sub(ONE));\r\n    return numerator.div(denominator);\r\n  }\r\n\r\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\r\n    return new Decimal(num.toString()).div(Decimal.pow(2, 64)).toDecimalPlaces(decimalPlaces);\r\n  }\r\n\r\n  public static decimalToX64(num: Decimal): BN {\r\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\r\n  }\r\n\r\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\r\n    return n0.add(Q128).sub(n1).mod(Q128);\r\n  }\r\n}\r\n\r\n// sqrt price math\r\nfunction mulRightShift(val: BN, mulBy: BN): BN {\r\n  return signedRightShift(val.mul(mulBy), 64, 256);\r\n}\r\n\r\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\r\n  twosN0.imaskn(bitWidth + 1);\r\n  return twosN0.fromTwos(bitWidth);\r\n}\r\n\r\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\r\n  twoN0.imaskn(bitWidth - shiftBy + 1);\r\n  return twoN0.fromTwos(bitWidth - shiftBy);\r\n}\r\n\r\nexport class SqrtPriceMath {\r\n  public static sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\r\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\r\n      .pow(2)\r\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\r\n  }\r\n\r\n  public static priceToSqrtPriceX64(price: Decimal, decimalsA: number, decimalsB: number): BN {\r\n    return MathUtil.decimalToX64(price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt());\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromInput(sqrtPriceX64: BN, liquidity: BN, amountIn: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountIn, true)\r\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountIn, true);\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromOutput(sqrtPriceX64: BN, liquidity: BN, amountOut: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountOut, false)\r\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountOut, false);\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    if (amount.eq(ZERO)) return sqrtPriceX64;\r\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\r\n\r\n    if (add) {\r\n      const numerator1 = liquidityLeftShift;\r\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\r\n      if (denominator.gte(numerator1)) {\r\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\r\n      }\r\n      return MathUtil.mulDivRoundingUp(numerator1, ONE, numerator1.div(sqrtPriceX64).add(amount));\r\n    } else {\r\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\r\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\");\r\n      }\r\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\r\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\r\n    }\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    const deltaY = amount.shln(U64Resolution);\r\n    if (add) {\r\n      return sqrtPriceX64.add(deltaY.div(liquidity));\r\n    } else {\r\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(deltaY, ONE, liquidity);\r\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\");\r\n      }\r\n      return sqrtPriceX64.sub(amountDivLiquidity);\r\n    }\r\n  }\r\n\r\n  public static getSqrtPriceX64FromTick(tick: number): BN {\r\n    if (!Number.isInteger(tick)) {\r\n      throw new Error(\"tick must be integer\");\r\n    }\r\n    if (tick < MIN_TICK || tick > MAX_TICK) {\r\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\r\n    }\r\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\r\n\r\n    let ratio: BN = (tickAbs & 0x1) != 0 ? new BN(\"18445821805675395072\") : new BN(\"18446744073709551616\");\r\n    if ((tickAbs & 0x2) != 0) ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\r\n    if ((tickAbs & 0x4) != 0) ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\r\n    if ((tickAbs & 0x8) != 0) ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\r\n    if ((tickAbs & 0x10) != 0) ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\r\n    if ((tickAbs & 0x20) != 0) ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\r\n    if ((tickAbs & 0x40) != 0) ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\r\n    if ((tickAbs & 0x80) != 0) ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\r\n    if ((tickAbs & 0x100) != 0) ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\r\n    if ((tickAbs & 0x200) != 0) ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\r\n    if ((tickAbs & 0x400) != 0) ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\r\n    if ((tickAbs & 0x800) != 0) ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\r\n    if ((tickAbs & 0x1000) != 0) ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\r\n    if ((tickAbs & 0x2000) != 0) ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\r\n    if ((tickAbs & 0x4000) != 0) ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\r\n    if ((tickAbs & 0x8000) != 0) ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\r\n    if ((tickAbs & 0x10000) != 0) ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\r\n    if ((tickAbs & 0x20000) != 0) ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\r\n    if ((tickAbs & 0x40000) != 0) ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\r\n\r\n    if (tick > 0) ratio = MaxUint128.div(ratio);\r\n    return ratio;\r\n  }\r\n\r\n  public static getTickFromPrice(price: Decimal, decimalsA: number, decimalsB: number): number {\r\n    return SqrtPriceMath.getTickFromSqrtPriceX64(SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB));\r\n  }\r\n\r\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\r\n    if (sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) || sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)) {\r\n      throw new Error(\"Provided sqrtPrice is not within the supported sqrtPrice range.\");\r\n    }\r\n\r\n    const msb = sqrtPriceX64.bitLength() - 1;\r\n    const adjustedMsb = new BN(msb - 64);\r\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\r\n\r\n    let bit = new BN(\"8000000000000000\", \"hex\");\r\n    let precision = 0;\r\n    let log2pFractionX64 = new BN(0);\r\n\r\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\r\n\r\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\r\n      r = r.mul(r);\r\n      const rMoreThanTwo = r.shrn(127);\r\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\r\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\r\n      bit = bit.shrn(1);\r\n      precision += 1;\r\n    }\r\n\r\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\r\n\r\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\r\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\r\n\r\n    const tickLow = signedRightShift(logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)), 64, 128).toNumber();\r\n    const tickHigh = signedRightShift(logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)), 64, 128).toNumber();\r\n\r\n    if (tickLow == tickHigh) {\r\n      return tickLow;\r\n    } else {\r\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh);\r\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow;\r\n    }\r\n  }\r\n}\r\n\r\n// tick math\r\nexport class TickMath {\r\n  public static getTickWithPriceAndTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): number {\r\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\r\n      SqrtPriceMath.priceToSqrtPriceX64(price, mintDecimalsA, mintDecimalsB),\r\n    );\r\n    let result = tick / tickSpacing;\r\n    if (result < 0) {\r\n      result = Math.floor(result);\r\n    } else {\r\n      result = Math.ceil(result);\r\n    }\r\n    return result * tickSpacing;\r\n  }\r\n\r\n  public static roundPriceWithTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): Decimal {\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(price, tickSpacing, mintDecimalsA, mintDecimalsB);\r\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    return SqrtPriceMath.sqrtPriceX64ToPrice(sqrtPriceX64, mintDecimalsA, mintDecimalsB);\r\n  }\r\n}\r\n\r\nexport class LiquidityMath {\r\n  public static addDelta(x: BN, y: BN): BN {\r\n    return x.add(y);\r\n  }\r\n\r\n  public static getTokenAmountAFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    const numerator1 = liquidity.ushln(U64Resolution);\r\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivRoundingUp(MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B), ONE, sqrtPriceX64A)\r\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(sqrtPriceX64A);\r\n  }\r\n\r\n  public static getTokenAmountBFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\r\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountA(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountA: BN, roundUp: boolean): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\r\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n    const result = numerator.div(denominator);\r\n\r\n    if (roundUp) {\r\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\r\n    } else {\r\n      return result.shrn(U64Resolution);\r\n    }\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountB(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountB: BN): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    return MathUtil.mulDivFloor(amountB, MaxU64, sqrtPriceX64B.sub(sqrtPriceX64A));\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmounts(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    amountA: BN,\r\n    amountB: BN,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, amountA, false);\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceCurrentX64, sqrtPriceX64B, amountA, false);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceCurrentX64, amountB);\r\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\r\n    } else {\r\n      return LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, amountB);\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidity(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): { amountA: BN; amountB: BN } {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return {\r\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n        amountB: new BN(0),\r\n      };\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\r\n        sqrtPriceCurrentX64,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\r\n        sqrtPriceX64A,\r\n        sqrtPriceCurrentX64,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      return { amountA, amountB };\r\n    } else {\r\n      return {\r\n        amountA: new BN(0),\r\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n      };\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidityWithSlippage(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    amountMax: boolean,\r\n    roundUp: boolean,\r\n    amountSlippage: number,\r\n  ): { amountSlippageA: BN; amountSlippageB: BN } {\r\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n      sqrtPriceCurrentX64,\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      roundUp,\r\n    );\r\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\r\n\r\n    const amount0Slippage = new BN(new Decimal(amountA.toString()).mul(coefficient).toFixed(0));\r\n    const amount1Slippage = new BN(new Decimal(amountB.toString()).mul(coefficient).toFixed(0));\r\n    return {\r\n      amountSlippageA: amount0Slippage,\r\n      amountSlippageB: amount1Slippage,\r\n    };\r\n  }\r\n\r\n  public static getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n\r\n    epochInfo: EpochInfo;\r\n    amountAddFee: boolean;\r\n  }): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, amountAddFee),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, amountAddFee),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n\r\n// swap math\r\n\r\ntype SwapStep = {\r\n  sqrtPriceX64Next: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n};\r\n\r\nexport interface StepComputations {\r\n  sqrtPriceStartX64: BN;\r\n  tickNext: number;\r\n  initialized: boolean;\r\n  sqrtPriceNextX64: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n}\r\n\r\nexport abstract class SwapMath {\r\n  public static swapCompute(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickArrayBitmap: BN[],\r\n    tickarrayBitmapExtension: TickArrayBitmapExtensionType,\r\n    zeroForOne: boolean,\r\n    fee: number,\r\n    liquidity: BN,\r\n    currentTick: number,\r\n    tickSpacing: number,\r\n    currentSqrtPriceX64: BN,\r\n    amountSpecified: BN,\r\n    lastSavedTickArrayStartIndex: number,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    amountSpecifiedRemaining: BN;\r\n    amountCalculated: BN;\r\n    feeAmount: BN;\r\n    sqrtPriceX64: BN;\r\n    liquidity: BN;\r\n    tickCurrent: number;\r\n    accounts: PublicKey[];\r\n  } {\r\n    if (amountSpecified.eq(ZERO)) {\r\n      throw new Error(\"amountSpecified must not be 0\");\r\n    }\r\n    if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n    if (zeroForOne) {\r\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n      }\r\n    } else {\r\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than current\");\r\n      }\r\n    }\r\n    const baseInput = amountSpecified.gt(ZERO);\r\n\r\n    const state = {\r\n      amountSpecifiedRemaining: amountSpecified,\r\n      amountCalculated: ZERO,\r\n      sqrtPriceX64: currentSqrtPriceX64,\r\n      tick:\r\n        currentTick > lastSavedTickArrayStartIndex\r\n          ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n          : lastSavedTickArrayStartIndex,\r\n      accounts: [] as PublicKey[],\r\n      liquidity,\r\n      feeAmount: new BN(0),\r\n    };\r\n    let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n    let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n    let loopCount = 0;\r\n    let t = !zeroForOne && tickArrayCurrent.startTickIndex === state.tick;\r\n    while (\r\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n      !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n      // state.tick < MAX_TICK &&\r\n      // state.tick > MIN_TICK\r\n    ) {\r\n      if (loopCount > 10) {\r\n        // throw Error('liquidity limit')\r\n      }\r\n      const step: Partial<StepComputations> = {};\r\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n      const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne, t);\r\n\r\n      let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n      let tickArrayAddress: null | PublicKey = null;\r\n\r\n      if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n        const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n          {\r\n            tickCurrent: state.tick,\r\n            tickSpacing,\r\n            tickArrayBitmap,\r\n            exBitmapInfo: tickarrayBitmapExtension,\r\n          },\r\n          tickAarrayStartIndex,\r\n          zeroForOne,\r\n        );\r\n        if (!nextInitTickArrayIndex.isExist) {\r\n          if (catchLiquidityInsufficient) {\r\n            return {\r\n              allTrade: false,\r\n              amountSpecifiedRemaining: state.amountSpecifiedRemaining,\r\n              amountCalculated: state.amountCalculated,\r\n              feeAmount: state.feeAmount,\r\n              sqrtPriceX64: state.sqrtPriceX64,\r\n              liquidity: state.liquidity,\r\n              tickCurrent: state.tick,\r\n              accounts: state.accounts,\r\n            };\r\n          }\r\n          throw Error(\"swapCompute LiquidityInsufficient\");\r\n        }\r\n        tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n        const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n          programId,\r\n          poolId,\r\n          tickAarrayStartIndex,\r\n        );\r\n        tickArrayAddress = expectedNextTickArrayAddress;\r\n        tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n        try {\r\n          nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n        } catch (e) {\r\n          throw Error(\"not found next tick info\");\r\n        }\r\n      }\r\n\r\n      step.tickNext = nextInitTick.tick;\r\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n      if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n        state.accounts.push(tickArrayAddress);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n      if (step.tickNext < MIN_TICK) {\r\n        step.tickNext = MIN_TICK;\r\n      } else if (step.tickNext > MAX_TICK) {\r\n        step.tickNext = MAX_TICK;\r\n      }\r\n\r\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n      let targetPrice: BN;\r\n      if (\r\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n      ) {\r\n        targetPrice = sqrtPriceLimitX64;\r\n      } else {\r\n        targetPrice = step.sqrtPriceNextX64;\r\n      }\r\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n        state.sqrtPriceX64,\r\n        targetPrice,\r\n        state.liquidity,\r\n        state.amountSpecifiedRemaining,\r\n        fee,\r\n        zeroForOne,\r\n      );\r\n\r\n      state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n      if (baseInput) {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n      } else {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n        state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n      }\r\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n        if (step.initialized) {\r\n          let liquidityNet = nextInitTick.liquidityNet;\r\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n        }\r\n\r\n        t = step.tickNext != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === step.tickNext;\r\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext; //\r\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n        const _T = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n        t = _T != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === _T;\r\n        state.tick = _T;\r\n      }\r\n      ++loopCount;\r\n    }\r\n\r\n    try {\r\n      const { nextStartIndex: tickAarrayStartIndex, isExist } = TickQuery.nextInitializedTickArray(\r\n        state.tick,\r\n        tickSpacing,\r\n        zeroForOne,\r\n        tickArrayBitmap,\r\n        tickarrayBitmapExtension,\r\n      );\r\n      if (isExist && lastSavedTickArrayStartIndex !== tickAarrayStartIndex) {\r\n        state.accounts.push(getPdaTickArrayAddress(programId, poolId, tickAarrayStartIndex).publicKey);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    return {\r\n      allTrade: true,\r\n      amountSpecifiedRemaining: ZERO,\r\n      amountCalculated: state.amountCalculated,\r\n      feeAmount: state.feeAmount,\r\n      sqrtPriceX64: state.sqrtPriceX64,\r\n      liquidity: state.liquidity,\r\n      tickCurrent: state.tick,\r\n      accounts: state.accounts,\r\n    };\r\n  }\r\n  // public static swapCompute(\r\n  //   programId: PublicKey,\r\n  //   poolId: PublicKey,\r\n  //   tickArrayCache: { [key: string]: TickArray },\r\n  //   tickArrayBitmap: BN[],\r\n  //   tickarrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  //   zeroForOne: boolean,\r\n  //   fee: number,\r\n  //   liquidity: BN,\r\n  //   currentTick: number,\r\n  //   tickSpacing: number,\r\n  //   currentSqrtPriceX64: BN,\r\n  //   amountSpecified: BN,\r\n  //   lastSavedTickArrayStartIndex: number,\r\n  //   sqrtPriceLimitX64?: BN,\r\n  // ): {\r\n  //   amountCalculated: BN;\r\n  //   feeAmount: BN;\r\n  //   sqrtPriceX64: BN;\r\n  //   liquidity: BN;\r\n  //   tickCurrent: number;\r\n  //   accounts: PublicKey[];\r\n  // } {\r\n  //   if (amountSpecified.eq(ZERO)) {\r\n  //     throw new Error(\"amountSpecified must not be 0\");\r\n  //   }\r\n  //   if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n  //   if (zeroForOne) {\r\n  //     if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n  //     }\r\n  //   } else {\r\n  //     if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than current\");\r\n  //     }\r\n  //   }\r\n  //   const baseInput = amountSpecified.gt(ZERO);\r\n\r\n  //   const state = {\r\n  //     amountSpecifiedRemaining: amountSpecified,\r\n  //     amountCalculated: ZERO,\r\n  //     sqrtPriceX64: currentSqrtPriceX64,\r\n  //     tick:\r\n  //       currentTick > lastSavedTickArrayStartIndex\r\n  //         ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n  //         : lastSavedTickArrayStartIndex,\r\n  //     accounts: [] as PublicKey[],\r\n  //     liquidity,\r\n  //     feeAmount: new BN(0),\r\n  //   };\r\n  //   let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n  //   let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n  //   let loopCount = 0;\r\n  //   while (\r\n  //     !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n  //     !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n  //     // state.tick < MAX_TICK &&\r\n  //     // state.tick > MIN_TICK\r\n  //   ) {\r\n  //     if (loopCount > 10) {\r\n  //       throw Error(\"liquidity limit\");\r\n  //     }\r\n  //     const step: Partial<StepComputations> = {};\r\n  //     step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n  //     const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne);\r\n\r\n  //     let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n  //     let tickArrayAddress: PublicKey | null = null;\r\n\r\n  //     if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n  //       const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n  //         {\r\n  //           tickCurrent: state.tick,\r\n  //           tickSpacing,\r\n  //           tickArrayBitmap,\r\n  //           exBitmapInfo: tickarrayBitmapExtension,\r\n  //         },\r\n  //         tickAarrayStartIndex,\r\n  //         zeroForOne,\r\n  //       );\r\n  //       if (!nextInitTickArrayIndex.isExist) {\r\n  //         throw Error(\"swapCompute LiquidityInsufficient\");\r\n  //       }\r\n  //       tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n  //       const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n  //         programId,\r\n  //         poolId,\r\n  //         tickAarrayStartIndex,\r\n  //       );\r\n  //       tickArrayAddress = expectedNextTickArrayAddress;\r\n  //       tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n  //       nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n  //     }\r\n\r\n  //     step.tickNext = nextInitTick.tick;\r\n  //     step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n  //     if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n  //       state.accounts.push(tickArrayAddress);\r\n  //       lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //     }\r\n  //     if (step.tickNext < MIN_TICK) {\r\n  //       step.tickNext = MIN_TICK;\r\n  //     } else if (step.tickNext > MAX_TICK) {\r\n  //       step.tickNext = MAX_TICK;\r\n  //     }\r\n\r\n  //     step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n  //     let targetPrice: BN;\r\n  //     if (\r\n  //       (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n  //       (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n  //     ) {\r\n  //       targetPrice = sqrtPriceLimitX64;\r\n  //     } else {\r\n  //       targetPrice = step.sqrtPriceNextX64;\r\n  //     }\r\n  //     [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n  //       state.sqrtPriceX64,\r\n  //       targetPrice,\r\n  //       state.liquidity,\r\n  //       state.amountSpecifiedRemaining,\r\n  //       fee,\r\n  //     );\r\n\r\n  //     state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n  //     if (baseInput) {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n  //       state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n  //     } else {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n  //       state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n  //     }\r\n  //     if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n  //       if (step.initialized) {\r\n  //         let liquidityNet = nextInitTick.liquidityNet;\r\n  //         if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n  //         state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n  //       }\r\n  //       state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\r\n  //     } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n  //       state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n  //     }\r\n  //     ++loopCount;\r\n  //   }\r\n\r\n  //   // try {\r\n  //   //   console.log('state.tick', state.tick)\r\n  //   //   const { nextStartIndex: tickAarrayStartIndex } = TickQuery.nextInitializedTickArray(\r\n  //   //     state.tick,\r\n  //   //     tickSpacing,\r\n  //   //     zeroForOne,\r\n  //   //     tickArrayBitmap,\r\n  //   //     tickarrayBitmapExtension,\r\n  //   //   );\r\n  //   //   if (\r\n  //   //     lastSavedTickArrayStartIndex !== tickAarrayStartIndex\r\n  //   //   ) {\r\n  //   //     state.accounts.push(getPdaTickArrayAddress(\r\n  //   //       programId,\r\n  //   //       poolId,\r\n  //   //       tickAarrayStartIndex,\r\n  //   //     ).publicKey)\r\n  //   //     lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //   //   }\r\n  //   // } catch (e) { /* empty */ }\r\n\r\n  //   return {\r\n  //     amountCalculated: state.amountCalculated,\r\n  //     feeAmount: state.feeAmount,\r\n  //     sqrtPriceX64: state.sqrtPriceX64,\r\n  //     liquidity: state.liquidity,\r\n  //     tickCurrent: state.tick,\r\n  //     accounts: state.accounts,\r\n  //   };\r\n  // }\r\n\r\n  private static swapStepCompute(\r\n    sqrtPriceX64Current: BN,\r\n    sqrtPriceX64Target: BN,\r\n    liquidity: BN,\r\n    amountRemaining: BN,\r\n    feeRate: Fee,\r\n    zeroForOne: boolean,\r\n  ): [BN, BN, BN, BN] {\r\n    const swapStep: SwapStep = {\r\n      sqrtPriceX64Next: new BN(0),\r\n      amountIn: new BN(0),\r\n      amountOut: new BN(0),\r\n      feeAmount: new BN(0),\r\n    };\r\n\r\n    const baseInput = amountRemaining.gte(ZERO);\r\n\r\n    if (baseInput) {\r\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\r\n        amountRemaining,\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\r\n        FEE_RATE_DENOMINATOR,\r\n      );\r\n      swapStep.amountIn = zeroForOne\r\n        ? LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, true)\r\n        : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, true);\r\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemainingSubtractFee,\r\n          zeroForOne,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountOut = zeroForOne\r\n        ? LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, false)\r\n        : LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, false);\r\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemaining.mul(NEGATIVE_ONE),\r\n          zeroForOne,\r\n        );\r\n      }\r\n    }\r\n\r\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\r\n\r\n    if (zeroForOne) {\r\n      if (!(reachTargetPrice && baseInput)) {\r\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          true,\r\n        );\r\n      }\r\n\r\n      if (!(reachTargetPrice && !baseInput)) {\r\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          false,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountIn =\r\n        reachTargetPrice && baseInput\r\n          ? swapStep.amountIn\r\n          : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, swapStep.sqrtPriceX64Next, liquidity, true);\r\n      swapStep.amountOut =\r\n        reachTargetPrice && !baseInput\r\n          ? swapStep.amountOut\r\n          : LiquidityMath.getTokenAmountAFromLiquidity(\r\n            sqrtPriceX64Current,\r\n            swapStep.sqrtPriceX64Next,\r\n            liquidity,\r\n            false,\r\n          );\r\n    }\r\n\r\n    if (!baseInput && swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))) {\r\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\r\n    }\r\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\r\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\r\n    } else {\r\n      swapStep.feeAmount = MathUtil.mulDivCeil(\r\n        swapStep.amountIn,\r\n        new BN(feeRate),\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate)),\r\n      );\r\n    }\r\n    return [swapStep.sqrtPriceX64Next, swapStep.amountIn, swapStep.amountOut, swapStep.feeAmount];\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nexport function u16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setUint16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function i16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setInt16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function u32ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(4);\r\n  const view = new DataView(arr);\r\n  view.setUint32(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function i32ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(4);\r\n  const view = new DataView(arr);\r\n  view.setInt32(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function leadingZeros(bitNum: number, data: BN): number {\r\n  let i = 0;\r\n  for (let j = bitNum - 1; j >= 0; j--) {\r\n    if (!data.testn(j)) {\r\n      i++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nexport function trailingZeros(bitNum: number, data: BN) {\r\n  let i = 0;\r\n  for (let j = 0; j < bitNum; j++) {\r\n    if (!data.testn(j)) {\r\n      i++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nexport function isZero(bitNum: number, data: BN): boolean {\r\n  for (let i = 0; i < bitNum; i++) {\r\n    if (data.testn(i)) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function mostSignificantBit(bitNum: number, data: BN): number | null {\r\n  if (isZero(bitNum, data)) return null;\r\n  else return leadingZeros(bitNum, data);\r\n}\r\n\r\nexport function leastSignificantBit(bitNum: number, data: BN): number | null {\r\n  if (isZero(bitNum, data)) return null;\r\n  else return trailingZeros(bitNum, data);\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { findProgramAddress, METADATA_PROGRAM_ID } from \"../../../common\";\r\n\r\nimport { i32ToBytes, u16ToBytes } from \"./util\";\r\n\r\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\r\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\r\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\r\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\r\nexport const POOL_TICK_ARRAY_BITMAP_SEED = Buffer.from(\"pool_tick_array_bitmap_extension\", \"utf8\");\r\nexport const OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\r\n\r\nexport function getPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolVaultId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  vaultMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolRewardVaulId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  rewardMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaTickArrayAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  startIndex: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)], programId);\r\n}\r\n\r\nexport function getPdaProtocolPositionAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  tickLower: number,\r\n  tickUpper: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [POSITION_SEED, poolId.toBuffer(), i32ToBytes(tickLower), i32ToBytes(tickUpper)],\r\n    programId,\r\n  );\r\n}\r\n\r\nexport function getPdaPersonalPositionAddress(\r\n  programId: PublicKey,\r\n  nftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POSITION_SEED, nftMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaMetadataKey(mint: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [Buffer.from(\"metadata\", \"utf8\"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    METADATA_PROGRAM_ID,\r\n  );\r\n}\r\n\r\nexport function getPdaOperationAccount(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OPERATION_SEED], programId);\r\n}\r\n\r\nexport function getPdaExBitmapAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_TICK_ARRAY_BITMAP_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaObservationAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport const POOL_LOCK_ID_SEED = Buffer.from(\"locked_position\", \"utf8\");\r\nexport function getPdaLockPositionId(\r\n  programId: PublicKey,\r\n  positionId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, positionId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLockClPositionIdV2(\r\n  programId: PublicKey,\r\n  lockNftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, lockNftMint.toBuffer()], programId);\r\n}\r\n\r\nexport const SUPPORT_MINT_SEED = Buffer.from(\"support_mint\", \"utf8\");\r\nexport function getPdaMintExAccount(\r\n  programId: PublicKey,\r\n  mintAddress: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([SUPPORT_MINT_SEED, mintAddress.toBuffer()], programId);\r\n}\r\n","import { Connection, EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  ClmmPoolInfo,\r\n  ClmmPoolRewardInfo,\r\n  ClmmPoolRewardLayoutInfo,\r\n  ComputeClmmPoolInfo,\r\n  ReturnTypeComputeAmountOut,\r\n  ReturnTypeComputeAmountOutBaseOut,\r\n  ReturnTypeComputeAmountOutFormat,\r\n  ReturnTypeFetchExBitmaps,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  ReturnTypeGetLiquidityAmountOut,\r\n  SDKParsedConcentratedInfo,\r\n  TickArrayBitmapExtensionType,\r\n} from \"../type\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token } from \"@/api/type\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport {\r\n  getMultipleAccountsInfo,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getTransferAmountFeeV2,\r\n  minExpirationTime,\r\n  solToWSol,\r\n} from \"@/common\";\r\nimport { Percent, Price, Token, TokenAmount } from \"@/module\";\r\nimport { TokenAccountRaw } from \"@/raydium/account/types\";\r\nimport { PoolInfoLayout, PositionInfoLayout, TickArrayBitmapExtensionLayout, TickArrayLayout } from \"../layout\";\r\nimport { MAX_SQRT_PRICE_X64, MAX_TICK, MIN_SQRT_PRICE_X64, MIN_TICK, NEGATIVE_ONE, Q64, ZERO } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath, SwapMath } from \"./math\";\r\nimport { getPdaExBitmapAccount, getPdaPersonalPositionAddress, getPdaTickArrayAddress } from \"./pda\";\r\nimport { PositionUtils } from \"./position\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickArrayBitmap, TickArrayBitmapExtensionUtils } from \"./tickarrayBitmap\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class PoolUtils {\r\n  public static getOutputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    inputTokenMint: PublicKey,\r\n    inputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    expectedAmountOut: BN;\r\n    remainingAccounts: PublicKey[];\r\n    executionPrice: BN;\r\n    feeAmount: BN;\r\n  } {\r\n    const zeroForOne = inputTokenMint.toBase58() === poolInfo.mintA.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    // try {\r\n    //   const preTick = this.preInitializedTickArrayStartIndex(poolInfo, !zeroForOne)\r\n    //   if (preTick.isExist) {\r\n    //     const { publicKey: address } = getPdaTickArrayAddress(\r\n    //       poolInfo.programId,\r\n    //       poolInfo.id,\r\n    //       preTick.nextStartIndex\r\n    //     );\r\n    //     allNeededAccounts.push(address)\r\n    //   }\r\n    // } catch (e) { /* empty */ }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      allTrade,\r\n      amountCalculated: outputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      inputAmount,\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return {\r\n      allTrade,\r\n      expectedAmountOut: outputAmount.mul(NEGATIVE_ONE),\r\n      remainingAccounts: allNeededAccounts,\r\n      executionPrice,\r\n      feeAmount,\r\n    };\r\n  }\r\n\r\n  public static getInputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    outputTokenMint: PublicKey,\r\n    outputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n  ): { expectedAmountIn: BN; remainingAccounts: PublicKey[]; executionPrice: BN; feeAmount: BN } {\r\n    const zeroForOne = outputTokenMint.toBase58() === poolInfo.mintB.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    try {\r\n      const preTick = this.preInitializedTickArrayStartIndex(poolInfo, zeroForOne);\r\n      if (preTick.isExist) {\r\n        const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, preTick.nextStartIndex);\r\n        allNeededAccounts.push(address);\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      amountCalculated: inputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      outputAmount.mul(NEGATIVE_ONE),\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return { expectedAmountIn: inputAmount, remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\r\n  }\r\n\r\n  public static getFirstInitializedTickArray(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ):\r\n    | { isExist: true; startIndex: number; nextAccountMeta: PublicKey }\r\n    | { isExist: false; startIndex: undefined; nextAccountMeta: undefined } {\r\n    const { isInitialized, startIndex } = PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.tickSpacing, [\r\n      poolInfo.tickCurrent,\r\n    ])\r\n      ? TickArrayBitmapExtensionUtils.checkTickArrayIsInit(\r\n        TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n        poolInfo.tickSpacing,\r\n        poolInfo.exBitmapInfo,\r\n      )\r\n      : TickUtils.checkTickArrayIsInitialized(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        poolInfo.tickCurrent,\r\n        poolInfo.tickSpacing,\r\n      );\r\n\r\n    if (isInitialized) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, startIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(\r\n      poolInfo,\r\n      TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n      zeroForOne,\r\n    );\r\n    if (isExist) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, nextStartIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex: nextStartIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined };\r\n  }\r\n\r\n  public static preInitializedTickArrayStartIndex(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    const currentOffset = Math.floor(poolInfo.tickCurrent / TickQuery.tickCount(poolInfo.tickSpacing));\r\n\r\n    const result: number[] = !zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(\r\n        poolInfo.tickArrayBitmap,\r\n        poolInfo.exBitmapInfo,\r\n        currentOffset - 1,\r\n        1,\r\n        poolInfo.tickSpacing,\r\n      )\r\n      : TickUtils.searchHightBitFromStart(\r\n        poolInfo.tickArrayBitmap,\r\n        poolInfo.exBitmapInfo,\r\n        currentOffset + 1,\r\n        1,\r\n        poolInfo.tickSpacing,\r\n      );\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    poolInfo:\r\n      | {\r\n        tickCurrent: number;\r\n        tickSpacing: number;\r\n        tickArrayBitmap: BN[];\r\n        exBitmapInfo: TickArrayBitmapExtensionType;\r\n      }\r\n      | ClmmPoolInfo,\r\n    lastTickArrayStartIndex: number,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    lastTickArrayStartIndex = TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing);\r\n\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const { isInit: startIsInit, tickIndex: startIndex } = TickArrayBitmap.nextInitializedTickArrayStartIndex(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n      );\r\n      if (startIsInit) {\r\n        return { isExist: true, nextStartIndex: startIndex };\r\n      }\r\n      lastTickArrayStartIndex = startIndex;\r\n\r\n      const { isInit, tickIndex } = TickArrayBitmapExtensionUtils.nextInitializedTickArrayFromOneBitmap(\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n        poolInfo.exBitmapInfo,\r\n      );\r\n      if (isInit) return { isExist: true, nextStartIndex: tickIndex };\r\n\r\n      lastTickArrayStartIndex = tickIndex;\r\n\r\n      if (lastTickArrayStartIndex < MIN_TICK || lastTickArrayStartIndex > MAX_TICK)\r\n        return { isExist: false, nextStartIndex: 0 };\r\n    }\r\n\r\n    // const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\r\n    //   poolInfo.tickArrayBitmap\r\n    // );\r\n    // const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\r\n    //   poolInfo.tickCurrent,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n    // const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset - 1,\r\n    //   0,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // ) : TickUtils.searchHightBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset,\r\n    //   1024,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n\r\n    // return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\r\n  }\r\n\r\n  public static async updatePoolRewardInfos({\r\n    connection,\r\n    apiPoolInfo,\r\n    chainTime,\r\n    poolLiquidity,\r\n    rewardInfos,\r\n  }: {\r\n    connection: Connection;\r\n    apiPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n    chainTime: number;\r\n    poolLiquidity: BN;\r\n    rewardInfos: ClmmPoolRewardLayoutInfo[];\r\n  }): Promise<ClmmPoolRewardInfo[]> {\r\n    const nRewardInfo: ClmmPoolRewardInfo[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      const _itemReward = rewardInfos[i];\r\n      const apiRewardProgram =\r\n        apiPoolInfo.rewardDefaultInfos[i]?.mint.programId ??\r\n        (await connection.getAccountInfo(_itemReward.tokenMint))?.owner;\r\n      if (apiRewardProgram === undefined) throw Error(\"get new reward mint info error\");\r\n\r\n      const itemReward: ClmmPoolRewardInfo = {\r\n        ..._itemReward,\r\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\r\n        remainingRewards: undefined,\r\n        tokenProgramId: new PublicKey(apiRewardProgram),\r\n      };\r\n\r\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue;\r\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\r\n        nRewardInfo.push(itemReward);\r\n        continue;\r\n      }\r\n\r\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime));\r\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime);\r\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, poolLiquidity);\r\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64);\r\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, Q64);\r\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta);\r\n      nRewardInfo.push({\r\n        ...itemReward,\r\n        rewardGrowthGlobalX64,\r\n        rewardTotalEmissioned,\r\n        lastUpdateTime: latestUpdateTime,\r\n      });\r\n    }\r\n    return nRewardInfo;\r\n  }\r\n\r\n  public static isOverflowDefaultTickarrayBitmap(tickSpacing: number, tickarrayStartIndexs: number[]): boolean {\r\n    const { maxTickBoundary, minTickBoundary } = this.tickRange(tickSpacing);\r\n\r\n    for (const tickIndex of tickarrayStartIndexs) {\r\n      const tickarrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n\r\n      if (tickarrayStartIndex >= maxTickBoundary || tickarrayStartIndex < minTickBoundary) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public static tickRange(tickSpacing: number): {\r\n    maxTickBoundary: number;\r\n    minTickBoundary: number;\r\n  } {\r\n    let maxTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let minTickBoundary = -maxTickBoundary;\r\n\r\n    if (maxTickBoundary > MAX_TICK) {\r\n      maxTickBoundary = TickQuery.getArrayStartIndex(MAX_TICK, tickSpacing) + TickQuery.tickCount(tickSpacing);\r\n    }\r\n    if (minTickBoundary < MIN_TICK) {\r\n      minTickBoundary = TickQuery.getArrayStartIndex(MIN_TICK, tickSpacing);\r\n    }\r\n    return { maxTickBoundary, minTickBoundary };\r\n  }\r\n\r\n  public static get_tick_array_offset(tickarrayStartIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickarrayStartIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n\r\n    return (tickarrayStartIndex / TickQuery.tickCount(tickSpacing)) * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  static async fetchExBitmaps({\r\n    connection,\r\n    exBitmapAddress,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    exBitmapAddress: PublicKey[];\r\n    batchRequest: boolean;\r\n  }): Promise<ReturnTypeFetchExBitmaps> {\r\n    const fetchedBitmapAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n      connection,\r\n      exBitmapAddress.map((i) => ({ pubkey: i })),\r\n      { batchRequest },\r\n    );\r\n\r\n    const returnTypeFetchExBitmaps: ReturnTypeFetchExBitmaps = {};\r\n    for (const item of fetchedBitmapAccount) {\r\n      if (item.accountInfo === null) continue;\r\n\r\n      returnTypeFetchExBitmaps[item.pubkey.toString()] = TickArrayBitmapExtensionLayout.decode(item.accountInfo.data);\r\n    }\r\n    return returnTypeFetchExBitmaps;\r\n  }\r\n\r\n  static async fetchMultiplePoolTickArrays({\r\n    connection,\r\n    poolKeys,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    poolKeys: Omit<ComputeClmmPoolInfo, \"ammConfig\">[];\r\n    batchRequest?: boolean;\r\n  }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\r\n    const tickArraysToPoolId: { [key: string]: PublicKey } = {};\r\n    const tickArrays: { pubkey: PublicKey }[] = [];\r\n    for (const itemPoolInfo of poolKeys) {\r\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n        itemPoolInfo.tickCurrent,\r\n        itemPoolInfo.tickSpacing,\r\n      );\r\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n        itemPoolInfo.tickArrayBitmap,\r\n        itemPoolInfo.exBitmapInfo,\r\n        itemPoolInfo.tickSpacing,\r\n        currentTickArrayStartIndex,\r\n        7,\r\n      );\r\n      for (const itemIndex of startIndexArray) {\r\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\r\n          itemPoolInfo.programId,\r\n          itemPoolInfo.id,\r\n          itemIndex,\r\n        );\r\n        tickArrays.push({ pubkey: tickArrayAddress });\r\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id;\r\n      }\r\n    }\r\n\r\n    const fetchedTickArrays = await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest });\r\n\r\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {};\r\n\r\n    for (const itemAccountInfo of fetchedTickArrays) {\r\n      if (!itemAccountInfo.accountInfo) continue;\r\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()];\r\n      if (!poolId) continue;\r\n      if (tickArrayCache[poolId.toString()] === undefined) tickArrayCache[poolId.toString()] = {};\r\n\r\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data);\r\n\r\n      tickArrayCache[poolId.toString()][accountLayoutData.startTickIndex] = {\r\n        ...accountLayoutData,\r\n        address: itemAccountInfo.pubkey,\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  // deprecated, new api doesn't need\r\n  static async fetchPoolsAccountPosition({\r\n    pools,\r\n    connection,\r\n    ownerInfo,\r\n    batchRequest = false,\r\n    updateOwnerRewardAndFee = true,\r\n  }: {\r\n    pools: SDKParsedConcentratedInfo[];\r\n    connection: Connection;\r\n    ownerInfo: { wallet: PublicKey; tokenAccounts: TokenAccountRaw[] };\r\n    batchRequest?: boolean;\r\n    updateOwnerRewardAndFee?: boolean;\r\n  }): Promise<SDKParsedConcentratedInfo[]> {\r\n    const programIds: PublicKey[] = [];\r\n\r\n    for (let index = 0; index < pools.length; index++) {\r\n      const accountInfo = pools[index];\r\n\r\n      if (accountInfo === null) continue;\r\n\r\n      if (!programIds.find((i) => i.equals(accountInfo.state.programId))) programIds.push(accountInfo.state.programId);\r\n    }\r\n\r\n    if (ownerInfo) {\r\n      const allMint = ownerInfo.tokenAccounts.map((i) => i.accountInfo.mint);\r\n      const allPositionKey: PublicKey[] = [];\r\n      for (const itemMint of allMint) {\r\n        for (const itemProgramId of programIds) {\r\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey);\r\n        }\r\n      }\r\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest });\r\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {};\r\n      for (const itemAccountInfo of positionAccountInfos) {\r\n        if (itemAccountInfo === null) continue;\r\n        // TODO: add check\r\n\r\n        const position = PositionInfoLayout.decode(itemAccountInfo.data);\r\n        const itemPoolId = position.poolId.toString();\r\n        const poolInfoA = pools.find((pool) => pool.state.id.toBase58() === itemPoolId);\r\n        if (poolInfoA === undefined) continue;\r\n\r\n        const poolInfo = poolInfoA.state;\r\n\r\n        const priceLower = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickLower,\r\n          baseIn: true,\r\n        });\r\n        const priceUpper = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickUpper,\r\n          baseIn: true,\r\n        });\r\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n          poolInfo.sqrtPriceX64,\r\n          priceLower.tickSqrtPriceX64,\r\n          priceUpper.tickSqrtPriceX64,\r\n          position.liquidity,\r\n          false,\r\n        );\r\n\r\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())));\r\n\r\n        poolInfoA.positionAccount = [\r\n          ...(poolInfoA.positionAccount ?? []),\r\n          {\r\n            poolId: position.poolId,\r\n            nftMint: position.nftMint,\r\n\r\n            priceLower: priceLower.price,\r\n            priceUpper: priceUpper.price,\r\n            amountA,\r\n            amountB,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper,\r\n            liquidity: position.liquidity,\r\n            feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\r\n            feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\r\n            tokenFeesOwedA: position.tokenFeesOwedA,\r\n            tokenFeesOwedB: position.tokenFeesOwedB,\r\n            rewardInfos: position.rewardInfos.map((i) => ({\r\n              ...i,\r\n              pendingReward: new BN(0),\r\n            })),\r\n\r\n            leverage,\r\n            tokenFeeAmountA: new BN(0),\r\n            tokenFeeAmountB: new BN(0),\r\n          },\r\n        ];\r\n\r\n        const tickArrayLowerAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickLower,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        const tickArrayUpperAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickUpper,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`\r\n        ] = tickArrayLowerAddress;\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`\r\n        ] = tickArrayUpperAddress;\r\n      }\r\n\r\n      if (updateOwnerRewardAndFee) {\r\n        const tickArrayKeys = Object.values(keyToTickArrayAddress);\r\n        const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest });\r\n        const tickArrayLayout = {};\r\n        for (let index = 0; index < tickArrayKeys.length; index++) {\r\n          const tickArrayData = tickArrayDatas[index];\r\n          if (tickArrayData === null) continue;\r\n          const key = tickArrayKeys[index].toString();\r\n          tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data);\r\n        }\r\n\r\n        for (const { state, positionAccount } of pools) {\r\n          if (!positionAccount) continue;\r\n          for (const itemPA of positionAccount) {\r\n            const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`;\r\n            const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`;\r\n            const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()];\r\n            const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()];\r\n            const tickLowerState: Tick =\r\n              tickArrayLower.ticks[TickUtils.getTickOffsetInArray(itemPA.tickLower, state.tickSpacing)];\r\n            const tickUpperState: Tick =\r\n              tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(itemPA.tickUpper, state.tickSpacing)];\r\n            const { tokenFeeAmountA, tokenFeeAmountB } = await PositionUtils.GetPositionFees(\r\n              state,\r\n              itemPA,\r\n              tickLowerState,\r\n              tickUpperState,\r\n            );\r\n            const rewardInfos = await PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState);\r\n            itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(new BN(0)) ? tokenFeeAmountA : new BN(0);\r\n            itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(new BN(0)) ? tokenFeeAmountB : new BN(0);\r\n            for (let i = 0; i < rewardInfos.length; i++) {\r\n              itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(new BN(0)) ? rewardInfos[i] : new BN(0);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return pools;\r\n  }\r\n\r\n  static computeAmountOut({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountIn,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountIn: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n    catchLiquidityInsufficient: boolean;\r\n  }): ReturnTypeComputeAmountOut {\r\n    let sqrtPriceLimitX64: BN;\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const [baseFeeConfig, outFeeConfig] = isBaseIn\r\n      ? [poolInfo.mintA.extensions.feeConfig, poolInfo.mintB.extensions.feeConfig]\r\n      : [poolInfo.mintB.extensions.feeConfig, poolInfo.mintA.extensions.feeConfig];\r\n\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountIn = getTransferAmountFeeV2(amountIn, baseFeeConfig, epochInfo, false);\r\n\r\n    const {\r\n      allTrade,\r\n      expectedAmountOut: _expectedAmountOut,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getOutputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountIn.amount.sub(realAmountIn.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n\r\n    const amountOut = getTransferAmountFeeV2(_expectedAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _minAmountOut = _expectedAmountOut\r\n      .mul(new BN(Math.floor((1 - slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    const minAmountOut = getTransferAmountFeeV2(_minAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime: minExpirationTime(realAmountIn.expirationTime, amountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n      remainingAccounts,\r\n      executionPriceX64: _executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountOutFormat({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    amountIn,\r\n    tokenOut: _tokenOut,\r\n    slippage,\r\n    epochInfo,\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    amountIn: BN;\r\n    tokenOut: ApiV3Token;\r\n    slippage: number;\r\n    epochInfo: EpochInfo;\r\n    catchLiquidityInsufficient?: boolean;\r\n  }): ReturnTypeComputeAmountOutFormat {\r\n    const baseIn = _tokenOut.address === poolInfo.mintB.address;\r\n    const [inputMint, outMint] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n    const [baseToken, outToken] = [\r\n      new Token({\r\n        ...inputMint,\r\n        mint: inputMint.address,\r\n        isToken2022: inputMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n      new Token({\r\n        ...outMint,\r\n        mint: outMint.address,\r\n        isToken2022: outMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n    ];\r\n\r\n    const {\r\n      allTrade,\r\n      realAmountIn: _realAmountIn,\r\n      amountOut: _amountOut,\r\n      minAmountOut: _minAmountOut,\r\n      expirationTime,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    } = PoolUtils.computeAmountOut({\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint: new PublicKey(inputMint.address),\r\n      amountIn,\r\n      slippage,\r\n      epochInfo,\r\n      catchLiquidityInsufficient,\r\n    });\r\n\r\n    const realAmountIn = {\r\n      ..._realAmountIn,\r\n      amount: new TokenAmount(baseToken, _realAmountIn.amount),\r\n      fee: _realAmountIn.fee === undefined ? undefined : new TokenAmount(baseToken, _realAmountIn.fee),\r\n    };\r\n\r\n    const amountOut = {\r\n      ..._amountOut,\r\n      amount: new TokenAmount(outToken, _amountOut.amount),\r\n      fee: _amountOut.fee === undefined ? undefined : new TokenAmount(outToken, _amountOut.fee),\r\n    };\r\n    const minAmountOut = {\r\n      ..._minAmountOut,\r\n      amount: new TokenAmount(outToken, _minAmountOut.amount),\r\n      fee: _minAmountOut.fee === undefined ? undefined : new TokenAmount(outToken, _minAmountOut.fee),\r\n    };\r\n\r\n    const _currentPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: currentPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _executionPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: executionPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _fee = new TokenAmount(baseToken, fee);\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime,\r\n      currentPrice: _currentPrice,\r\n      executionPrice: _executionPrice,\r\n      priceImpact,\r\n      fee: _fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountIn({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountOut,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountOut: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n  }): ReturnTypeComputeAmountOutBaseOut {\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const feeConfigs = {\r\n      [poolInfo.mintA.address]: poolInfo.mintA.extensions.feeConfig,\r\n      [poolInfo.mintB.address]: poolInfo.mintB.extensions.feeConfig,\r\n    };\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = !isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountOut = getTransferAmountFeeV2(amountOut, feeConfigs[baseMint.toString()], epochInfo, true);\r\n\r\n    const {\r\n      expectedAmountIn: _expectedAmountIn,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getInputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountOut.amount.sub(realAmountOut.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n    );\r\n\r\n    const inMint = isBaseIn ? poolInfo.mintB.address : poolInfo.mintA.address;\r\n\r\n    const amountIn = getTransferAmountFeeV2(_expectedAmountIn, feeConfigs[inMint], epochInfo, false);\r\n    // const amountIn = getTransferAmountFee(\r\n    //   _expectedAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _maxAmountIn = _expectedAmountIn\r\n      .mul(new BN(Math.floor((1 + slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    // const maxAmountIn = getTransferAmountFee(\r\n    //   _maxAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n    const maxAmountIn = getTransferAmountFeeV2(_maxAmountIn, feeConfigs[inMint], epochInfo, true);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      amountIn,\r\n      maxAmountIn,\r\n      realAmountOut,\r\n      expirationTime: minExpirationTime(amountIn.expirationTime, realAmountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n\r\n      remainingAccounts,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeMultiplier({\r\n    poolInfo,\r\n    aprType,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprInfo = poolInfo[aprType];\r\n\r\n    const priceLower = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickLowerIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n    const priceUpper = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickUpperIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n\r\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin);\r\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax);\r\n\r\n    const sub = _maxPrice - _minPrice;\r\n\r\n    const userRange = priceUpper - priceLower;\r\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin;\r\n\r\n    let p: number;\r\n\r\n    if (sub <= 0) p = 0;\r\n    else if (userRange === sub) p = tradeRange / sub;\r\n    else if (tradeRange === sub) p = sub / userRange;\r\n    else p = (sub / tradeRange) * (sub / userRange);\r\n\r\n    return {\r\n      feeApr: aprInfo.feeApr * p,\r\n      rewardsApr: [(aprInfo.rewardApr[0] ?? 0) * p, (aprInfo.rewardApr[1] ?? 0) * p, (aprInfo.rewardApr[2] ?? 0) * p],\r\n      apr: aprInfo.apr * p,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeDelta({\r\n    poolInfo,\r\n    poolLiquidity,\r\n    aprType,\r\n    mintPrice,\r\n    liquidity,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n    chainTime,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolLiquidity: BN;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    mintPrice: { [mint: string]: { value: number } };\r\n\r\n    liquidity: BN;\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n\r\n    chainTime: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprTypeDay = aprType === \"day\" ? 1 : aprType === \"week\" ? 7 : aprType === \"month\" ? 30 : 0;\r\n    const aprInfo = poolInfo[aprType];\r\n    const mintPriceA = mintPrice[solToWSol(poolInfo.mintA.address).toString()];\r\n    const mintPriceB = mintPrice[solToWSol(poolInfo.mintB.address).toString()];\r\n    const mintDecimalsA = poolInfo.mintA.decimals;\r\n    const mintDecimalsB = poolInfo.mintB.decimals;\r\n\r\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 };\r\n\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex);\r\n\r\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        poolLiquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const poolTvl = new Decimal(poolLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n    const userTvl = new Decimal(userLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n\r\n    const p = new Decimal(1).div(poolTvl.add(userTvl));\r\n\r\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\r\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\r\n\r\n    const SECONDS_PER_YEAR = 3600 * 24 * 365;\r\n\r\n    const rewardsApr = poolInfo.rewardDefaultInfos.map((i) => {\r\n      const iDecimal = i.mint.decimals;\r\n      const iPrice = mintPrice[i.mint.address];\r\n\r\n      if (\r\n        chainTime < ((i as any).startTime ?? 0) ||\r\n        chainTime > ((i as any).endTime ?? 0) ||\r\n        !i.perSecond ||\r\n        !iPrice ||\r\n        iDecimal === undefined\r\n      )\r\n        return 0;\r\n\r\n      return new Decimal(iPrice.value)\r\n        .mul(new Decimal(i.perSecond).mul(SECONDS_PER_YEAR))\r\n        .div(new Decimal(10).pow(iDecimal))\r\n        .mul(p)\r\n        .mul(100)\r\n        .toNumber();\r\n    });\r\n\r\n    return {\r\n      feeApr,\r\n      rewardsApr,\r\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0),\r\n    };\r\n  }\r\n\r\n  static async getLiquidityAmountOutFromAmountIn({\r\n    poolInfo,\r\n    inputA,\r\n    tickLower,\r\n    tickUpper,\r\n    amount,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountHasFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    inputA: boolean;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n    epochInfo: EpochInfo;\r\n    amountHasFee: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    // const coefficient = add ? 1 - slippage : 1 + slippage;\r\n    const addFeeAmount = getTransferAmountFeeV2(\r\n      amount,\r\n      poolInfo[inputA ? \"mintA\" : \"mintB\"].extensions?.feeConfig,\r\n      epochInfo,\r\n      !amountHasFee,\r\n    );\r\n    const _amount = new BN(\r\n      new Decimal(addFeeAmount.amount.sub(addFeeAmount.fee ?? ZERO).toString()).toFixed(0) // .mul(coefficient).toFixed(0),\r\n    );\r\n\r\n    let liquidity: BN;\r\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\r\n      liquidity = inputA\r\n        ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add)\r\n        : new BN(0);\r\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\r\n      liquidity = inputA ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = inputA\r\n        ? new BN(0)\r\n        : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\r\n    }\r\n\r\n    const amountFromLiquidity = await PoolUtils.getAmountsFromLiquidity({\r\n      epochInfo,\r\n      poolInfo,\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      slippage,\r\n      add,\r\n    });\r\n    return {\r\n      liquidity,\r\n      amountA: inputA ? addFeeAmount : amountFromLiquidity.amountA,\r\n      amountB: inputA ? amountFromLiquidity.amountB : addFeeAmount,\r\n      amountSlippageA: inputA ? addFeeAmount : amountFromLiquidity.amountSlippageA,\r\n      amountSlippageB: inputA ? amountFromLiquidity.amountSlippageB : addFeeAmount,\r\n      expirationTime: amountFromLiquidity.expirationTime,\r\n    }\r\n  }\r\n\r\n  static async getAmountsFromLiquidity({\r\n    epochInfo,\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n  }: {\r\n    epochInfo: EpochInfo;\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(\r\n      SqrtPriceMath.priceToSqrtPriceX64(new Decimal(poolInfo.price), poolInfo.mintA.decimals, poolInfo.mintB.decimals),\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      add,\r\n    );\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        amounts.amountA.muln(coefficientRe),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        amounts.amountB.muln(coefficientRe),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n\r\n  static async fetchComputeMultipleClmmInfo({\r\n    connection,\r\n    poolList,\r\n    rpcDataMap = {},\r\n  }: {\r\n    rpcDataMap?: Record<string, ReturnType<typeof PoolInfoLayout.decode>>;\r\n    connection: Connection;\r\n    poolList: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">[];\r\n  }): Promise<Record<string, ComputeClmmPoolInfo>> {\r\n    const fetchRpcList = poolList.filter((p) => !rpcDataMap[p.id]).map((p) => new PublicKey(p.id));\r\n    const rpcRes = await getMultipleAccountsInfo(connection, fetchRpcList);\r\n    rpcRes.forEach((r, idx) => {\r\n      if (!r) return;\r\n      rpcDataMap[fetchRpcList[idx].toBase58()] = PoolInfoLayout.decode(r.data);\r\n    });\r\n\r\n    const pdaList = poolList.map(\r\n      (poolInfo) => getPdaExBitmapAccount(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n    );\r\n\r\n    const exBitData = await PoolUtils.fetchExBitmaps({\r\n      connection,\r\n      exBitmapAddress: pdaList,\r\n      batchRequest: false,\r\n    });\r\n\r\n    return poolList.reduce(\r\n      (acc, cur) => ({\r\n        ...acc,\r\n        [cur.id]: {\r\n          ...rpcDataMap[cur.id],\r\n          id: new PublicKey(cur.id),\r\n          version: 6,\r\n          programId: new PublicKey(cur.programId),\r\n          mintA: cur.mintA,\r\n          mintB: cur.mintB,\r\n          ammConfig: {\r\n            ...cur.config,\r\n            id: new PublicKey(cur.config.id),\r\n            fundOwner: \"\",\r\n          },\r\n          currentPrice: new Decimal(cur.price),\r\n          exBitmapAccount: getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey,\r\n          exBitmapInfo:\r\n            exBitData[getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey.toBase58()],\r\n          startTime: rpcDataMap[cur.id].startTime.toNumber(),\r\n          rewardInfos: rpcDataMap[cur.id].rewardInfos,\r\n        },\r\n      }),\r\n      {} as Record<string, ComputeClmmPoolInfo>,\r\n    );\r\n  }\r\n\r\n  static async fetchComputeClmmInfo({\r\n    connection,\r\n    poolInfo,\r\n    rpcData,\r\n  }: {\r\n    connection: Connection;\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">;\r\n    rpcData?: ReturnType<typeof PoolInfoLayout.decode>;\r\n  }): Promise<ComputeClmmPoolInfo> {\r\n    return (\r\n      await this.fetchComputeMultipleClmmInfo({\r\n        connection,\r\n        rpcDataMap: rpcData ? { [poolInfo.id]: rpcData } : undefined,\r\n        poolList: [poolInfo],\r\n      })\r\n    )[poolInfo.id];\r\n  }\r\n}\r\n\r\nexport function getLiquidityFromAmounts({\r\n  poolInfo,\r\n  tickLower,\r\n  tickUpper,\r\n  amountA,\r\n  amountB,\r\n  slippage,\r\n  add,\r\n  epochInfo,\r\n  amountHasFee,\r\n}: {\r\n  poolInfo: ApiV3PoolInfoConcentratedItem;\r\n  tickLower: number;\r\n  tickUpper: number;\r\n  amountA: BN;\r\n  amountB: BN;\r\n  slippage: number;\r\n  add: boolean;\r\n  epochInfo: EpochInfo;\r\n  amountHasFee: boolean;\r\n}): ReturnTypeGetLiquidityAmountOut {\r\n  const [_tickLower, _tickUpper, _amountA, _amountB] =\r\n    tickLower < tickUpper ? [tickLower, tickUpper, amountA, amountB] : [tickUpper, tickLower, amountB, amountA];\r\n  const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n    new Decimal(poolInfo.price),\r\n    poolInfo.mintA.decimals,\r\n    poolInfo.mintB.decimals,\r\n  );\r\n  const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(_tickLower);\r\n  const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(_tickUpper);\r\n\r\n  const [amountFeeA, amountFeeB] = [\r\n    getTransferAmountFeeV2(_amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n    getTransferAmountFeeV2(_amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n  ];\r\n\r\n  const liquidity = LiquidityMath.getLiquidityFromTokenAmounts(\r\n    sqrtPriceX64,\r\n    sqrtPriceX64A,\r\n    sqrtPriceX64B,\r\n    amountFeeA.amount.sub(amountFeeA.fee ?? ZERO),\r\n    amountFeeB.amount.sub(amountFeeB.fee ?? ZERO),\r\n  );\r\n\r\n  return LiquidityMath.getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee: !amountHasFee,\r\n  });\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport function clmmComputeInfoToApiInfo(pool: ComputeClmmPoolInfo): ApiV3PoolInfoConcentratedItem {\r\n  return {\r\n    ...pool,\r\n    type: \"Concentrated\",\r\n    programId: pool.programId.toString(),\r\n    id: pool.id.toString(),\r\n    rewardDefaultInfos: [],\r\n    rewardDefaultPoolInfos: \"Clmm\",\r\n    price: pool.currentPrice.toNumber(),\r\n    mintAmountA: 0,\r\n    mintAmountB: 0,\r\n    feeRate: pool.ammConfig.tradeFeeRate,\r\n    openTime: pool.startTime.toString(),\r\n    tvl: 0,\r\n\r\n    day: mockRewardData,\r\n    week: mockRewardData,\r\n    month: mockRewardData,\r\n    pooltype: [],\r\n\r\n    farmUpcomingCount: 0,\r\n    farmOngoingCount: 0,\r\n    farmFinishedCount: 0,\r\n    burnPercent: 0,\r\n    config: {\r\n      ...pool.ammConfig,\r\n      id: pool.ammConfig.id.toString(),\r\n      defaultRange: 0,\r\n      defaultRangePoint: [],\r\n    },\r\n  };\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common\";\r\nimport { ClmmPositionLayout } from \"../layout\";\r\nimport { ClmmPoolInfo, ClmmPoolPersonalPosition, ClmmPoolRewardInfo, GetAmountParams, ReturnTypeGetLiquidityAmountOut } from \"../type\";\r\nimport { Q64 } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath } from \"./math\";\r\nimport { Tick } from \"./tick\";\r\n\r\nexport class PositionUtils {\r\n  static getfeeGrowthInside(\r\n    poolState: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { feeGrowthInsideX64A: BN; feeGrowthInsideBX64: BN } {\r\n    let feeGrowthBelowX64A = new BN(0);\r\n    let feeGrowthBelowX64B = new BN(0);\r\n    if (poolState.tickCurrent >= tickLowerState.tick) {\r\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\r\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(tickLowerState.feeGrowthOutsideX64A);\r\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(tickLowerState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    let feeGrowthAboveX64A = new BN(0);\r\n    let feeGrowthAboveX64B = new BN(0);\r\n    if (poolState.tickCurrent < tickUpperState.tick) {\r\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\r\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(tickUpperState.feeGrowthOutsideX64A);\r\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(tickUpperState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\r\n      feeGrowthAboveX64A,\r\n    );\r\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\r\n      feeGrowthAboveX64B,\r\n    );\r\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\r\n  }\r\n\r\n  static GetPositionFees(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionFeesV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionRewardsV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64B\"> & {\r\n      rewardInfos: { rewardGrowthGlobalX64: BN }[];\r\n    },\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInsideV2(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static GetPositionRewards(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInside(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static getRewardGrowthInside(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: ClmmPoolRewardInfo[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getRewardGrowthInsideV2(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: Pick<ClmmPoolRewardInfo, \"rewardGrowthGlobalX64\">[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getAmountsFromLiquidity({\r\n    poolInfo,\r\n    ownerPosition,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n  }: GetAmountParams): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { getMultipleAccountsInfo } from \"../../../common\";\r\nimport { TickArrayLayout } from \"../layout\";\r\n\r\nimport { TickArrayBitmapExtensionType } from \"../type\";\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { Tick, TICK_ARRAY_SIZE, TickArray, TickUtils } from \"./tick\";\r\n\r\nexport const FETCH_TICKARRAY_COUNT = 15;\r\n\r\nexport declare type PoolVars = {\r\n  key: PublicKey;\r\n  tokenA: PublicKey;\r\n  tokenB: PublicKey;\r\n  fee: number;\r\n};\r\n\r\nexport class TickQuery {\r\n  public static async getTickArrays(\r\n    connection: Connection,\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickCurrent: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapArray: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n  ): Promise<{ [key: string]: TickArray }> {\r\n    const tickArraysToFetch: PublicKey[] = [];\r\n    const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickCurrent, tickSpacing);\r\n\r\n    const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n      tickArrayBitmapArray,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n      currentTickArrayStartIndex,\r\n      Math.floor(FETCH_TICKARRAY_COUNT / 2),\r\n    );\r\n    for (let i = 0; i < startIndexArray.length; i++) {\r\n      const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndexArray[i]);\r\n      tickArraysToFetch.push(tickArrayAddress);\r\n    }\r\n\r\n    const fetchedTickArrays = (await getMultipleAccountsInfo(connection, tickArraysToFetch)).map((i) =>\r\n      i !== null ? TickArrayLayout.decode(i.data) : null,\r\n    );\r\n\r\n    const tickArrayCache: { [key: string]: TickArray } = {};\r\n    for (let i = 0; i < tickArraysToFetch.length; i++) {\r\n      const _info = fetchedTickArrays[i];\r\n      if (_info === null) continue;\r\n\r\n      tickArrayCache[_info.startTickIndex] = {\r\n        ..._info,\r\n        address: tickArraysToFetch[i],\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  public static nextInitializedTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    nextTick: Tick;\r\n    tickArrayAddress: PublicKey | undefined;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    let {\r\n      initializedTick: nextTick,\r\n      tickArrayAddress,\r\n      tickArrayStartTickIndex,\r\n    } = this.nextInitializedTickInOneArray(programId, poolId, tickArrayCache, tickIndex, tickSpacing, zeroForOne);\r\n    while (nextTick == undefined || nextTick.liquidityGross.lten(0)) {\r\n      tickArrayStartTickIndex = TickUtils.getNextTickArrayStartIndex(tickArrayStartTickIndex, tickSpacing, zeroForOne);\r\n      if (this.checkIsValidStartIndex(tickArrayStartTickIndex, tickSpacing)) {\r\n        throw new Error(\"No enough initialized tickArray\");\r\n      }\r\n      const cachedTickArray = tickArrayCache[tickArrayStartTickIndex];\r\n\r\n      if (cachedTickArray === undefined) continue;\r\n\r\n      const {\r\n        nextTick: _nextTick,\r\n        tickArrayAddress: _tickArrayAddress,\r\n        tickArrayStartTickIndex: _tickArrayStartTickIndex,\r\n      } = this.firstInitializedTickInOneArray(programId, poolId, cachedTickArray, zeroForOne);\r\n      [nextTick, tickArrayAddress, tickArrayStartTickIndex] = [_nextTick, _tickArrayAddress, _tickArrayStartTickIndex];\r\n    }\r\n    if (nextTick == undefined) {\r\n      throw new Error(\"No invaild tickArray cache\");\r\n    }\r\n    return { nextTick, tickArrayAddress, tickArrayStartTickIndex };\r\n  }\r\n\r\n  public static nextInitializedTickArray(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmap: BN[],\r\n    exBitmapInfo: TickArrayBitmapExtensionType,\r\n  ): {\r\n    isExist: boolean;\r\n    nextStartIndex: number;\r\n  } {\r\n    const currentOffset = Math.floor(tickIndex / TickQuery.tickCount(tickSpacing));\r\n    const result: number[] = zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset - 1, 1, tickSpacing)\r\n      : TickUtils.searchHightBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset + 1, 1, tickSpacing);\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static firstInitializedTickInOneArray(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArray: TickArray,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    nextTick: Tick | undefined;\r\n    tickArrayAddress: PublicKey;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    let nextInitializedTick: Tick | undefined = undefined;\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        const tickInArray = tickArray.ticks[i];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        const tickInArray = tickArray.ticks[i];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, tickArray.startTickIndex);\r\n    return { nextTick: nextInitializedTick, tickArrayAddress, tickArrayStartTickIndex: tickArray.startTickIndex };\r\n  }\r\n\r\n  public static nextInitializedTickInOneArray(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    initializedTick: Tick | undefined;\r\n    tickArrayAddress: PublicKey | undefined;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    let tickPositionInArray = Math.floor((tickIndex - startIndex) / tickSpacing);\r\n    const cachedTickArray = tickArrayCache[startIndex];\r\n    if (cachedTickArray == undefined) {\r\n      return {\r\n        initializedTick: undefined,\r\n        tickArrayAddress: undefined,\r\n        tickArrayStartTickIndex: startIndex,\r\n      };\r\n    }\r\n    let nextInitializedTick: Tick | undefined = undefined;\r\n    if (zeroForOne) {\r\n      while (tickPositionInArray >= 0) {\r\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        tickPositionInArray = tickPositionInArray - 1;\r\n      }\r\n    } else {\r\n      tickPositionInArray = tickPositionInArray + 1;\r\n      while (tickPositionInArray < TICK_ARRAY_SIZE) {\r\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        tickPositionInArray = tickPositionInArray + 1;\r\n      }\r\n    }\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return {\r\n      initializedTick: nextInitializedTick,\r\n      tickArrayAddress,\r\n      tickArrayStartTickIndex: cachedTickArray.startTickIndex,\r\n    };\r\n  }\r\n\r\n  public static getArrayStartIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = this.tickCount(tickSpacing);\r\n    const start = Math.floor(tickIndex / ticksInArray);\r\n\r\n    return start * ticksInArray;\r\n  }\r\n\r\n  public static checkIsValidStartIndex(tickIndex: number, tickSpacing: number): boolean {\r\n    if (TickUtils.checkIsOutOfBoundary(tickIndex)) {\r\n      if (tickIndex > MAX_TICK) {\r\n        return false;\r\n      }\r\n      const minStartIndex = TickUtils.getTickArrayStartIndexByTick(MIN_TICK, tickSpacing);\r\n      return tickIndex == minStartIndex;\r\n    }\r\n    return tickIndex % this.tickCount(tickSpacing) == 0;\r\n  }\r\n\r\n  public static tickCount(tickSpacing: number): number {\r\n    return TICK_ARRAY_SIZE * tickSpacing;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { TickArrayBitmapExtensionType } from \"../type\";\r\n\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, TICK_ARRAY_SIZE, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { isZero, leadingZeros, leastSignificantBit, mostSignificantBit, trailingZeros } from \"./util\";\r\n\r\nexport const EXTENSION_TICKARRAY_BITMAP_SIZE = 14;\r\n\r\nexport class TickArrayBitmap {\r\n  public static maxTickInTickarrayBitmap(tickSpacing: number): number {\r\n    return tickSpacing * TICK_ARRAY_SIZE * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  public static getBitmapTickBoundary(\r\n    tickarrayStartIndex: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    minValue: number;\r\n    maxValue: number;\r\n  } {\r\n    const ticksInOneBitmap = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    let m = Math.floor(Math.abs(tickarrayStartIndex) / ticksInOneBitmap);\r\n    if (tickarrayStartIndex < 0 && Math.abs(tickarrayStartIndex) % ticksInOneBitmap != 0) m += 1;\r\n\r\n    const minValue = ticksInOneBitmap * m;\r\n\r\n    return tickarrayStartIndex < 0\r\n      ? { minValue: -minValue, maxValue: -minValue + ticksInOneBitmap }\r\n      : { minValue, maxValue: minValue + ticksInOneBitmap };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    bitMap: BN,\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): { isInit: boolean; tickIndex: number } {\r\n    if (!TickQuery.checkIsValidStartIndex(lastTickArrayStartIndex, tickSpacing))\r\n      throw Error(\"nextInitializedTickArrayStartIndex check error\");\r\n\r\n    const tickBoundary = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - TickQuery.tickCount(tickSpacing)\r\n      : lastTickArrayStartIndex + TickQuery.tickCount(tickSpacing);\r\n\r\n    if (nextTickArrayStartIndex < -tickBoundary || nextTickArrayStartIndex >= tickBoundary) {\r\n      return { isInit: false, tickIndex: lastTickArrayStartIndex };\r\n    }\r\n\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    let compressed = nextTickArrayStartIndex / multiplier + 512;\r\n\r\n    if (nextTickArrayStartIndex < 0 && nextTickArrayStartIndex % multiplier != 0) {\r\n      compressed--;\r\n    }\r\n\r\n    const bitPos = Math.abs(compressed);\r\n\r\n    if (zeroForOne) {\r\n      const offsetBitMap = bitMap.shln(1024 - bitPos - 1);\r\n      const nextBit = mostSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos - nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: -tickBoundary };\r\n      }\r\n    } else {\r\n      const offsetBitMap = bitMap.shrn(bitPos);\r\n      const nextBit = leastSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos + nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: tickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class TickArrayBitmapExtensionUtils {\r\n  public static getBitmapOffset(tickIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n    this.checkExtensionBoundary(tickIndex, tickSpacing);\r\n\r\n    const ticksInOneBitmap = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let offset = Math.floor(Math.abs(tickIndex) / ticksInOneBitmap) - 1;\r\n\r\n    if (tickIndex < 0 && Math.abs(tickIndex) % ticksInOneBitmap === 0) offset--;\r\n    return offset;\r\n  }\r\n\r\n  public static getBitmap(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): { offset: number; tickarrayBitmap: BN[] } {\r\n    const offset = this.getBitmapOffset(tickIndex, tickSpacing);\r\n    if (tickIndex < 0) {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.negativeTickArrayBitmap[offset] };\r\n    } else {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.positiveTickArrayBitmap[offset] };\r\n    }\r\n  }\r\n\r\n  public static checkExtensionBoundary(tickIndex: number, tickSpacing: number) {\r\n    const { positiveTickBoundary, negativeTickBoundary } = this.extensionTickBoundary(tickSpacing);\r\n\r\n    if (tickIndex >= negativeTickBoundary && tickIndex < positiveTickBoundary) {\r\n      throw Error(\"checkExtensionBoundary -> InvalidTickArrayBoundary\");\r\n    }\r\n  }\r\n\r\n  public static extensionTickBoundary(tickSpacing: number): {\r\n    positiveTickBoundary: number;\r\n    negativeTickBoundary: number;\r\n  } {\r\n    const positiveTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n\r\n    const negativeTickBoundary = -positiveTickBoundary;\r\n\r\n    if (MAX_TICK <= positiveTickBoundary)\r\n      throw Error(`extensionTickBoundary check error: ${MAX_TICK}, ${positiveTickBoundary}`);\r\n    if (negativeTickBoundary <= MIN_TICK)\r\n      throw Error(`extensionTickBoundary check error: ${negativeTickBoundary}, ${MIN_TICK}`);\r\n\r\n    return { positiveTickBoundary, negativeTickBoundary };\r\n  }\r\n\r\n  public static checkTickArrayIsInit(\r\n    tickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): { isInitialized: boolean; startIndex: number } {\r\n    const { tickarrayBitmap } = this.getBitmap(tickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(tickArrayStartIndex, tickSpacing);\r\n\r\n    return {\r\n      isInitialized: TickUtils.mergeTickArrayBitmap(tickarrayBitmap).testn(tickArrayOffsetInBitmap),\r\n      startIndex: tickArrayStartIndex,\r\n    };\r\n  }\r\n\r\n  public static nextInitializedTickArrayFromOneBitmap(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const multiplier = TickQuery.tickCount(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - multiplier\r\n      : lastTickArrayStartIndex + multiplier;\r\n    const { tickarrayBitmap } = this.getBitmap(nextTickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    return this.nextInitializedTickArrayInBitmap(tickarrayBitmap, nextTickArrayStartIndex, tickSpacing, zeroForOne);\r\n  }\r\n\r\n  public static nextInitializedTickArrayInBitmap(\r\n    tickarrayBitmap: BN[],\r\n    nextTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const { minValue: bitmapMinTickBoundary, maxValue: bitmapMaxTickBoundary } = TickArrayBitmap.getBitmapTickBoundary(\r\n      nextTickArrayStartIndex,\r\n      tickSpacing,\r\n    );\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(nextTickArrayStartIndex, tickSpacing);\r\n    if (zeroForOne) {\r\n      // tick from upper to lower\r\n      // find from highter bits to lower bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shln(\r\n        TICK_ARRAY_BITMAP_SIZE - 1 - tickArrayOffsetInBitmap,\r\n      );\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : leadingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex - nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMinTickBoundary };\r\n      }\r\n    } else {\r\n      // tick from lower to upper\r\n      // find from lower bits to highter bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shrn(tickArrayOffsetInBitmap);\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : trailingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex + nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMaxTickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n\r\n  public static tickArrayOffsetInBitmap(tickArrayStartIndex: number, tickSpacing: number): number {\r\n    const m = Math.abs(tickArrayStartIndex) % TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let tickArrayOffsetInBitmap = Math.floor(m / TickQuery.tickCount(tickSpacing));\r\n    if (tickArrayStartIndex < 0 && m != 0) {\r\n      tickArrayOffsetInBitmap = TICK_ARRAY_BITMAP_SIZE - tickArrayOffsetInBitmap;\r\n    }\r\n    return tickArrayOffsetInBitmap;\r\n  }\r\n}\r\n","import { blob, bool, i128, i64, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\r\nimport { EXTENSION_TICKARRAY_BITMAP_SIZE } from \"./utils/tickarrayBitmap\";\r\n\r\nexport const ClmmConfigLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  u16(\"index\"),\r\n  publicKey(\"\"),\r\n  u32(\"protocolFeeRate\"),\r\n  u32(\"tradeFeeRate\"),\r\n  u16(\"tickSpacing\"),\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const ObservationLayout = struct([u32(\"blockTimestamp\"), i64(\"tickCumulative\"), seq(u64(), 4)]);\r\nexport const ObservationInfoLayout = struct([\r\n  blob(8),\r\n  bool(\"initialized\"),\r\n  u64(\"recentEpoch\"),\r\n  u16(\"observationIndex\"),\r\n  publicKey(\"poolId\"),\r\n  seq(ObservationLayout, 100, \"observations\"),\r\n  seq(u64(), 4),\r\n]);\r\n\r\nexport const RewardInfo = struct([\r\n  u8(\"rewardState\"),\r\n  u64(\"openTime\"),\r\n  u64(\"endTime\"),\r\n  u64(\"lastUpdateTime\"),\r\n  u128(\"emissionsPerSecondX64\"),\r\n  u64(\"rewardTotalEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  publicKey(\"tokenMint\"),\r\n  publicKey(\"tokenVault\"),\r\n  publicKey(\"creator\"),\r\n  u128(\"rewardGrowthGlobalX64\"),\r\n]);\r\nexport const PoolInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"ammConfig\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n  publicKey(\"observationId\"),\r\n  u8(\"mintDecimalsA\"),\r\n  u8(\"mintDecimalsB\"),\r\n  u16(\"tickSpacing\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"sqrtPriceX64\"),\r\n  s32(\"tickCurrent\"),\r\n  u32(),\r\n  u128(\"feeGrowthGlobalX64A\"),\r\n  u128(\"feeGrowthGlobalX64B\"),\r\n  u64(\"protocolFeesTokenA\"),\r\n  u64(\"protocolFeesTokenB\"),\r\n\r\n  u128(\"swapInAmountTokenA\"),\r\n  u128(\"swapOutAmountTokenB\"),\r\n  u128(\"swapInAmountTokenB\"),\r\n  u128(\"swapOutAmountTokenA\"),\r\n\r\n  u8(\"status\"),\r\n\r\n  seq(u8(), 7, \"\"),\r\n\r\n  seq(RewardInfo, 3, \"rewardInfos\"),\r\n  seq(u64(), 16, \"tickArrayBitmap\"),\r\n\r\n  u64(\"totalFeesTokenA\"),\r\n  u64(\"totalFeesClaimedTokenA\"),\r\n  u64(\"totalFeesTokenB\"),\r\n  u64(\"totalFeesClaimedTokenB\"),\r\n\r\n  u64(\"fundFeesTokenA\"),\r\n  u64(\"fundFeesTokenB\"),\r\n\r\n  u64(\"startTime\"),\r\n\r\n  seq(u64(), 15 * 4 - 3, \"padding\"),\r\n]);\r\n\r\nexport const PositionRewardInfoLayout = struct([u128(\"growthInsideLastX64\"), u64(\"rewardAmountOwed\")]);\r\nexport const PositionInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"nftMint\"),\r\n  publicKey(\"poolId\"),\r\n\r\n  s32(\"tickLower\"),\r\n  s32(\"tickUpper\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n\r\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport type ClmmPositionLayout = ReturnType<typeof PositionInfoLayout.decode>;\r\n\r\nexport const ProtocolPositionLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"poolId\"),\r\n  s32(\"tickLowerIndex\"),\r\n  s32(\"tickUpperIndex\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n  seq(u128(), 3, \"rewardGrowthInside\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const TickLayout = struct([\r\n  s32(\"tick\"),\r\n  i128(\"liquidityNet\"),\r\n  u128(\"liquidityGross\"),\r\n  u128(\"feeGrowthOutsideX64A\"),\r\n  u128(\"feeGrowthOutsideX64B\"),\r\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\r\n\r\n  seq(u32(), 13, \"\"),\r\n]);\r\n\r\nexport const TickArrayLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  s32(\"startTickIndex\"),\r\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\r\n  u8(\"initializedTickCount\"),\r\n\r\n  seq(u8(), 115, \"\"),\r\n]);\r\n\r\nexport const OperationLayout = struct([blob(329), seq(publicKey(), 100, \"whitelistMints\")]);\r\n\r\nexport const TickArrayBitmapExtensionLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"positiveTickArrayBitmap\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"negativeTickArrayBitmap\"),\r\n]);\r\n\r\nexport const LockPositionLayout = struct([\r\n  u64(),\r\n  u8(\"bump\"),\r\n  publicKey(\"owner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  seq(u64(), 8),\r\n]);\r\n\r\nexport const LockClPositionLayoutV2 = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"lockOwner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  publicKey(\"lockNftMint\"),\r\n  u64(\"recentEpoch\"),\r\n  seq(u64(), 8),\r\n]);\r\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const SPL_MINT_LAYOUT = struct([\r\n  u32(\"mintAuthorityOption\"),\r\n  publicKey(\"mintAuthority\"),\r\n  u64(\"supply\"),\r\n  u8(\"decimals\"),\r\n  u8(\"isInitialized\"),\r\n  u32(\"freezeAuthorityOption\"),\r\n  publicKey(\"freezeAuthority\"),\r\n]);\r\n\r\nexport type SplMintLayout = typeof SPL_MINT_LAYOUT;\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { MintLayout, RawMint, TOKEN_PROGRAM_ID, TransferFeeConfigLayout } from \"@solana/spl-token\";\r\nimport { BigNumberish } from \"@/common/bignumber\";\r\nimport { Token, TokenAmount } from \"../../module\";\r\nimport { SOL_INFO, TOKEN_WSOL } from \"./constant\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nimport { ApiV3Token } from \"../../api\";\r\nimport { solToWSol } from \"@/common\";\r\n\r\nexport const parseTokenInfo = async ({\r\n  connection,\r\n  mint,\r\n}: {\r\n  connection: Connection;\r\n  mint: PublicKey | string;\r\n}): Promise<RawMint | undefined> => {\r\n  const accountData = await connection.getAccountInfo(new PublicKey(mint));\r\n  if (!accountData || accountData.data.length !== MintLayout.span) return;\r\n  const tokenInfo = MintLayout.decode(accountData.data);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n  return tokenInfo;\r\n};\r\n\r\nexport const toTokenInfo = ({\r\n  mint,\r\n  decimals,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  logoURI = \"\",\r\n  priority = 3,\r\n}: {\r\n  mint: PublicKey;\r\n  decimals: number;\r\n  programId?: PublicKey | string;\r\n  priority?: number;\r\n  logoURI?: string;\r\n}): TokenInfo => {\r\n  const pubStr = mint.toBase58().substring(0, 6);\r\n  return {\r\n    address: mint.toBase58(),\r\n    decimals,\r\n    symbol: pubStr,\r\n    logoURI,\r\n    extensions: {},\r\n    chainId: 101,\r\n    programId: programId.toString(),\r\n    name: pubStr,\r\n    tags: [],\r\n    priority,\r\n  };\r\n};\r\n\r\nexport const toToken = (props: Omit<TokenInfo, \"priority\">): Token =>\r\n  new Token({\r\n    mint: props.address,\r\n    decimals: props.decimals,\r\n    symbol: props.symbol,\r\n    name: props.name,\r\n  });\r\n\r\nexport const toTokenAmount = ({\r\n  amount,\r\n  isRaw,\r\n  name,\r\n  ...props\r\n}: Omit<TokenInfo, \"priority\"> & {\r\n  amount: BigNumberish;\r\n  isRaw?: boolean;\r\n  name?: string;\r\n}): TokenAmount =>\r\n  new TokenAmount(\r\n    new Token({\r\n      mint: solToWSol(props.address).toBase58(),\r\n      decimals: props.decimals,\r\n      symbol: props.symbol,\r\n      name,\r\n    }),\r\n    amount,\r\n    isRaw,\r\n    name,\r\n  );\r\n\r\nexport function solToWSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === SOL_INFO.address) return TOKEN_WSOL as T;\r\n  return token;\r\n}\r\n\r\nexport function wSolToSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === TOKEN_WSOL.address) return SOL_INFO as T;\r\n  return token;\r\n}\r\n\r\nexport const toApiV3Token = ({\r\n  address,\r\n  programId,\r\n  decimals,\r\n  ...props\r\n}: {\r\n  address: string;\r\n  programId: string;\r\n  decimals: number;\r\n} & Partial<ApiV3Token>): ApiV3Token => ({\r\n  chainId: 101,\r\n  address: solToWSol(address).toBase58(),\r\n  programId,\r\n  logoURI: \"\",\r\n  symbol: \"\",\r\n  name: \"\",\r\n  decimals,\r\n  tags: [],\r\n  extensions: props.extensions || {},\r\n  ...props,\r\n});\r\n\r\nexport const toFeeConfig = (\r\n  config?: ReturnType<typeof TransferFeeConfigLayout.decode> | undefined | null,\r\n): ApiV3Token[\"extensions\"][\"feeConfig\"] | undefined =>\r\n  config\r\n    ? {\r\n        ...config,\r\n        transferFeeConfigAuthority: config.transferFeeConfigAuthority.toBase58(),\r\n        withdrawWithheldAuthority: config.withdrawWithheldAuthority.toBase58(),\r\n        withheldAmount: config.withheldAmount.toString(),\r\n        olderTransferFee: {\r\n          ...config.olderTransferFee,\r\n          epoch: config.olderTransferFee.epoch.toString(),\r\n          maximumFee: config.olderTransferFee.maximumFee.toString(),\r\n        },\r\n        newerTransferFee: {\r\n          ...config.newerTransferFee,\r\n          epoch: config.newerTransferFee.epoch.toString(),\r\n          maximumFee: config.newerTransferFee.maximumFee.toString(),\r\n        },\r\n      }\r\n    : undefined;\r\n","import BN from \"bn.js\";\r\nimport { SerumVersion } from \"../serum\";\r\n\r\nexport const LIQUIDITY_FEES_NUMERATOR = new BN(25);\r\nexport const LIQUIDITY_FEES_DENOMINATOR = new BN(10000);\r\n\r\n// liquidity version => serum version\r\nexport const LIQUIDITY_VERSION_TO_SERUM_VERSION: {\r\n  [key in 4 | 5]?: SerumVersion;\r\n} = {\r\n  4: 3,\r\n  5: 3,\r\n};\r\n","import { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nimport { AmmV4Keys, AmmV5Keys } from \"@/api/type\";\r\nimport { BN_ONE, BN_ZERO, parseBigNumberish } from \"@/common\";\r\nimport { createLogger } from \"@/common/logger\";\r\nimport { accountMeta, RENT_PROGRAM_ID } from \"@/common/pubKey\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { struct, u64, u8 } from \"@/marshmallow\";\r\n\r\nimport BN from \"bn.js\";\r\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\r\nimport { InstructionReturn } from \"../type\";\r\nimport {\r\n  addLiquidityLayout,\r\n  fixedSwapInLayout,\r\n  fixedSwapOutLayout,\r\n  initPoolLayout,\r\n  removeLiquidityLayout,\r\n} from \"./layout\";\r\nimport { MODEL_DATA_PUBKEY } from \"./stable\";\r\nimport {\r\n  InitPoolInstructionParamsV4,\r\n  LiquidityAddInstructionParams,\r\n  RemoveLiquidityInstruction,\r\n  SwapFixedInInstructionParamsV4,\r\n  SwapFixedOutInstructionParamsV4,\r\n  SwapInstructionParams,\r\n} from \"./type\";\r\n\r\nconst logger = createLogger(\"Raydium_liquidity_instruction\");\r\nexport function makeAddLiquidityInstruction(params: LiquidityAddInstructionParams): TransactionInstruction {\r\n  const { poolInfo, poolKeys, userKeys, baseAmountIn, quoteAmountIn, fixedSide, otherAmountMin } = params;\r\n\r\n  const data = Buffer.alloc(addLiquidityLayout.span);\r\n  addLiquidityLayout.encode(\r\n    {\r\n      instruction: 3,\r\n      baseAmountIn: parseBigNumberish(baseAmountIn),\r\n      quoteAmountIn: parseBigNumberish(quoteAmountIn),\r\n      otherAmountMin: parseBigNumberish(otherAmountMin),\r\n      fixedSide: fixedSide === \"base\" ? BN_ZERO : BN_ONE,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.id) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.targetOrders) }),\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.lpMint.address) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B) }),\r\n  ];\r\n\r\n  if (poolInfo.pooltype.includes(\"StablePool\")) {\r\n    keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\r\n  }\r\n\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.marketId), isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.baseTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.quoteTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: new PublicKey(poolInfo.programId),\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function removeLiquidityInstruction(params: RemoveLiquidityInstruction): TransactionInstruction {\r\n  const { poolInfo, poolKeys: poolKeyProps, userKeys, lpAmount, baseAmountMin, quoteAmountMin } = params;\r\n  const poolKeys = jsonInfo2PoolKeys(poolKeyProps);\r\n\r\n  let version = 4;\r\n  if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\r\n\r\n  if (version === 4 || version === 5) {\r\n    const data = Buffer.alloc(removeLiquidityLayout.span);\r\n    removeLiquidityLayout.encode(\r\n      {\r\n        instruction: 4,\r\n        lpAmount: parseBigNumberish(lpAmount),\r\n        baseAmountMin: parseBigNumberish(baseAmountMin),\r\n        quoteAmountMin: parseBigNumberish(quoteAmountMin),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const keys = [\r\n      // system\r\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n      // amm\r\n      accountMeta({ pubkey: poolKeys.id }),\r\n      accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n      accountMeta({ pubkey: poolKeys.openOrders }),\r\n      accountMeta({ pubkey: poolKeys.targetOrders }),\r\n      accountMeta({ pubkey: poolKeys.mintLp.address }),\r\n      accountMeta({ pubkey: poolKeys.vault.A }),\r\n      accountMeta({ pubkey: poolKeys.vault.B }),\r\n    ];\r\n\r\n    if (version === 5) {\r\n      keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\r\n    } else {\r\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\r\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\r\n    }\r\n\r\n    keys.push(\r\n      // serum\r\n      accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n      accountMeta({ pubkey: poolKeys.marketId }),\r\n      accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n      accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n      accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n      // user\r\n      accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.baseTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.quoteTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n      // serum orderbook\r\n      accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n      accountMeta({ pubkey: poolKeys.marketBids }),\r\n      accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    );\r\n\r\n    return new TransactionInstruction({\r\n      programId: poolKeys.programId,\r\n      keys,\r\n      data,\r\n    });\r\n  }\r\n\r\n  // logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\r\n  return new TransactionInstruction({ programId: poolKeys.programId, keys: [] }); // won't reach\r\n}\r\n\r\nexport function createPoolV4InstructionV2({\r\n  programId,\r\n  ammId,\r\n  ammAuthority,\r\n  ammOpenOrders,\r\n  lpMint,\r\n  coinMint,\r\n  pcMint,\r\n  coinVault,\r\n  pcVault,\r\n  withdrawQueue,\r\n  ammTargetOrders,\r\n  poolTempLp,\r\n  marketProgramId,\r\n  marketId,\r\n  userWallet,\r\n  userCoinVault,\r\n  userPcVault,\r\n  userLpVault,\r\n  nonce,\r\n  openTime,\r\n  coinAmount,\r\n  pcAmount,\r\n  ammConfigId,\r\n  feeDestinationId,\r\n}: {\r\n  programId: PublicKey;\r\n  ammId: PublicKey;\r\n  ammAuthority: PublicKey;\r\n  ammOpenOrders: PublicKey;\r\n  lpMint: PublicKey;\r\n  coinMint: PublicKey;\r\n  pcMint: PublicKey;\r\n  coinVault: PublicKey;\r\n  pcVault: PublicKey;\r\n  withdrawQueue: PublicKey;\r\n  ammTargetOrders: PublicKey;\r\n  poolTempLp: PublicKey;\r\n  marketProgramId: PublicKey;\r\n  marketId: PublicKey;\r\n  userWallet: PublicKey;\r\n  userCoinVault: PublicKey;\r\n  userPcVault: PublicKey;\r\n  userLpVault: PublicKey;\r\n  ammConfigId: PublicKey;\r\n  feeDestinationId: PublicKey;\r\n\r\n  nonce: number;\r\n  openTime: BN;\r\n  coinAmount: BN;\r\n  pcAmount: BN;\r\n}): InstructionReturn {\r\n  const dataLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"openTime\"), u64(\"pcAmount\"), u64(\"coinAmount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ammId, isSigner: false, isWritable: true },\r\n    { pubkey: ammAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: ammOpenOrders, isSigner: false, isWritable: true },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: coinMint, isSigner: false, isWritable: false },\r\n    { pubkey: pcMint, isSigner: false, isWritable: false },\r\n    { pubkey: coinVault, isSigner: false, isWritable: true },\r\n    { pubkey: pcVault, isSigner: false, isWritable: true }, //12\r\n    { pubkey: ammTargetOrders, isSigner: false, isWritable: true }, //13\r\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n    { pubkey: feeDestinationId, isSigner: false, isWritable: true },\r\n    { pubkey: marketProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: marketId, isSigner: false, isWritable: false },\r\n    { pubkey: userWallet, isSigner: true, isWritable: true },\r\n    { pubkey: userCoinVault, isSigner: false, isWritable: true },\r\n    { pubkey: userPcVault, isSigner: false, isWritable: true },\r\n    { pubkey: userLpVault, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ instruction: 1, nonce, openTime, coinAmount, pcAmount }, data);\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data,\r\n    }),\r\n    instructionType: InstructionType.AmmV4CreatePool,\r\n  };\r\n}\r\n\r\nexport function simulatePoolInfoInstruction(poolKeys: AmmV4Keys | AmmV5Keys): TransactionInstruction {\r\n  const simulatePoolLayout = struct([u8(\"instruction\"), u8(\"simulateType\")]);\r\n  const data = Buffer.alloc(simulatePoolLayout.span);\r\n  simulatePoolLayout.encode(\r\n    {\r\n      instruction: 12,\r\n      simulateType: 0,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    programId: new PublicKey(poolKeys.programId),\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSwapFixedInInstruction(\r\n  { poolKeys: propPoolKeys, userKeys, amountIn, minAmountOut }: SwapFixedInInstructionParamsV4,\r\n  version: number,\r\n): TransactionInstruction {\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n  const data = Buffer.alloc(fixedSwapInLayout.span);\r\n  fixedSwapInLayout.encode(\r\n    {\r\n      instruction: 9,\r\n      amountIn: parseBigNumberish(amountIn),\r\n      minAmountOut: parseBigNumberish(minAmountOut),\r\n    },\r\n    data,\r\n  );\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n  ];\r\n\r\n  if (version === 4) keys.push(accountMeta({ pubkey: poolKeys.targetOrders }));\r\n  keys.push(accountMeta({ pubkey: poolKeys.vault.A }), accountMeta({ pubkey: poolKeys.vault.B }));\r\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId }),\r\n    accountMeta({ pubkey: poolKeys.marketBids }),\r\n    accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSwapFixedOutInstruction(\r\n  { poolKeys: propPoolKeys, userKeys, maxAmountIn, amountOut }: SwapFixedOutInstructionParamsV4,\r\n  version: number,\r\n): TransactionInstruction {\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n  const data = Buffer.alloc(fixedSwapOutLayout.span);\r\n  fixedSwapOutLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      maxAmountIn: parseBigNumberish(maxAmountIn),\r\n      amountOut: parseBigNumberish(amountOut),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n    accountMeta({ pubkey: poolKeys.targetOrders }),\r\n    accountMeta({ pubkey: poolKeys.vault.A }),\r\n    accountMeta({ pubkey: poolKeys.vault.B }),\r\n  ];\r\n\r\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\r\n\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId }),\r\n    accountMeta({ pubkey: poolKeys.marketBids }),\r\n    accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeAMMSwapInstruction(params: SwapInstructionParams): TransactionInstruction {\r\n  const { poolKeys, version, userKeys, amountIn, amountOut, fixedSide } = params;\r\n  if (version === 4 || version === 5) {\r\n    const props = { poolKeys, userKeys };\r\n    if (fixedSide === \"in\") {\r\n      return makeSwapFixedInInstruction(\r\n        {\r\n          ...props,\r\n          amountIn,\r\n          minAmountOut: amountOut,\r\n        },\r\n        version,\r\n      );\r\n    } else if (fixedSide === \"out\") {\r\n      return makeSwapFixedOutInstruction(\r\n        {\r\n          ...props,\r\n          maxAmountIn: amountIn,\r\n          amountOut,\r\n        },\r\n        version,\r\n      );\r\n    }\r\n    logger.logWithError(\"invalid params\", \"params\", params);\r\n  }\r\n\r\n  logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\r\n  throw new Error(\"invalid version\");\r\n}\r\n\r\nexport function makeInitPoolInstructionV4({\r\n  poolKeys: propPoolKeys,\r\n  userKeys,\r\n  startTime,\r\n}: InitPoolInstructionParamsV4): TransactionInstruction {\r\n  const data = Buffer.alloc(initPoolLayout.span);\r\n  initPoolLayout.encode(\r\n    {\r\n      instruction: 0,\r\n      // nonce: poolKeys.nonce, // to do fix\r\n      nonce: 5,\r\n      startTime: parseBigNumberish(startTime),\r\n    },\r\n    data,\r\n  );\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n\r\n  const keys = [\r\n    // system\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n    accountMeta({ pubkey: poolKeys.mintLp.address }),\r\n    accountMeta({ pubkey: poolKeys.mintA.address, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.mintB.address, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.vault.A, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.vault.B, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.targetOrders }),\r\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n    accountMeta({ pubkey: poolKeys.id, isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.payer, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSimulatePoolInfoInstruction({ poolKeys }: { poolKeys: AmmV4Keys | AmmV5Keys }): {\r\n  instruction: TransactionInstruction;\r\n} {\r\n  const LAYOUT = struct([u8(\"instruction\"), u8(\"simulateType\")]);\r\n  const data = Buffer.alloc(LAYOUT.span);\r\n  LAYOUT.encode(\r\n    {\r\n      instruction: 12,\r\n      simulateType: 0,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      programId: new PublicKey(poolKeys.programId),\r\n      keys,\r\n      data,\r\n    }),\r\n  };\r\n}\r\n","import { GetStructureSchema, publicKey, seq, struct, u128, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const fixedSwapInLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"minAmountOut\")]);\r\nexport const fixedSwapOutLayout = struct([u8(\"instruction\"), u64(\"maxAmountIn\"), u64(\"amountOut\")]);\r\n\r\nexport const createPoolV4Layout = struct([u8(\"instruction\"), u8(\"nonce\")]);\r\nexport const initPoolLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"startTime\")]);\r\n/* ================= state layouts ================= */\r\nexport const liquidityStateV4Layout = struct([\r\n  u64(\"status\"),\r\n  u64(\"nonce\"),\r\n  u64(\"maxOrder\"),\r\n  u64(\"depth\"),\r\n  u64(\"baseDecimal\"),\r\n  u64(\"quoteDecimal\"),\r\n  u64(\"state\"),\r\n  u64(\"resetFlag\"),\r\n  u64(\"minSize\"),\r\n  u64(\"volMaxCutRatio\"),\r\n  u64(\"amountWaveRatio\"),\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n  u64(\"minPriceMultiplier\"),\r\n  u64(\"maxPriceMultiplier\"),\r\n  u64(\"systemDecimalValue\"),\r\n  u64(\"minSeparateNumerator\"),\r\n  u64(\"minSeparateDenominator\"),\r\n  u64(\"tradeFeeNumerator\"),\r\n  u64(\"tradeFeeDenominator\"),\r\n  u64(\"pnlNumerator\"),\r\n  u64(\"pnlDenominator\"),\r\n  u64(\"swapFeeNumerator\"),\r\n  u64(\"swapFeeDenominator\"),\r\n  u64(\"baseNeedTakePnl\"),\r\n  u64(\"quoteNeedTakePnl\"),\r\n  u64(\"quoteTotalPnl\"),\r\n  u64(\"baseTotalPnl\"),\r\n  u64(\"poolOpenTime\"),\r\n  u64(\"punishPcAmount\"),\r\n  u64(\"punishCoinAmount\"),\r\n  u64(\"orderbookToInitTime\"),\r\n  // u128('poolTotalDepositPc'),\r\n  // u128('poolTotalDepositCoin'),\r\n  u128(\"swapBaseInAmount\"),\r\n  u128(\"swapQuoteOutAmount\"),\r\n  u64(\"swapBase2QuoteFee\"),\r\n  u128(\"swapQuoteInAmount\"),\r\n  u128(\"swapBaseOutAmount\"),\r\n  u64(\"swapQuote2BaseFee\"),\r\n  // amm vault\r\n  publicKey(\"baseVault\"),\r\n  publicKey(\"quoteVault\"),\r\n  // mint\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n  publicKey(\"lpMint\"),\r\n  // market\r\n  publicKey(\"openOrders\"),\r\n  publicKey(\"marketId\"),\r\n  publicKey(\"marketProgramId\"),\r\n  publicKey(\"targetOrders\"),\r\n  publicKey(\"withdrawQueue\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"owner\"),\r\n  // true circulating supply without lock up\r\n  u64(\"lpReserve\"),\r\n  seq(u64(), 3, \"padding\"),\r\n]);\r\n\r\nexport type LiquidityStateLayoutV4 = typeof liquidityStateV4Layout;\r\nexport type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;\r\n\r\nexport const liquidityStateV5Layout = struct([\r\n  u64(\"accountType\"),\r\n  u64(\"status\"),\r\n  u64(\"nonce\"),\r\n  u64(\"maxOrder\"),\r\n  u64(\"depth\"),\r\n  u64(\"baseDecimal\"),\r\n  u64(\"quoteDecimal\"),\r\n  u64(\"state\"),\r\n  u64(\"resetFlag\"),\r\n  u64(\"minSize\"),\r\n  u64(\"volMaxCutRatio\"),\r\n  u64(\"amountWaveRatio\"),\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n  u64(\"minPriceMultiplier\"),\r\n  u64(\"maxPriceMultiplier\"),\r\n  u64(\"systemDecimalsValue\"),\r\n  u64(\"abortTradeFactor\"),\r\n  u64(\"priceTickMultiplier\"),\r\n  u64(\"priceTick\"),\r\n  // Fees\r\n  u64(\"minSeparateNumerator\"),\r\n  u64(\"minSeparateDenominator\"),\r\n  u64(\"tradeFeeNumerator\"),\r\n  u64(\"tradeFeeDenominator\"),\r\n  u64(\"pnlNumerator\"),\r\n  u64(\"pnlDenominator\"),\r\n  u64(\"swapFeeNumerator\"),\r\n  u64(\"swapFeeDenominator\"),\r\n  // OutPutData\r\n  u64(\"baseNeedTakePnl\"),\r\n  u64(\"quoteNeedTakePnl\"),\r\n  u64(\"quoteTotalPnl\"),\r\n  u64(\"baseTotalPnl\"),\r\n  u64(\"poolOpenTime\"),\r\n  u64(\"punishPcAmount\"),\r\n  u64(\"punishCoinAmount\"),\r\n  u64(\"orderbookToInitTime\"),\r\n  u128(\"swapBaseInAmount\"),\r\n  u128(\"swapQuoteOutAmount\"),\r\n  u128(\"swapQuoteInAmount\"),\r\n  u128(\"swapBaseOutAmount\"),\r\n  u64(\"swapQuote2BaseFee\"),\r\n  u64(\"swapBase2QuoteFee\"),\r\n\r\n  publicKey(\"baseVault\"),\r\n  publicKey(\"quoteVault\"),\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n  publicKey(\"lpMint\"),\r\n\r\n  publicKey(\"modelDataAccount\"),\r\n  publicKey(\"openOrders\"),\r\n  publicKey(\"marketId\"),\r\n  publicKey(\"marketProgramId\"),\r\n  publicKey(\"targetOrders\"),\r\n  publicKey(\"owner\"),\r\n  seq(u64(), 64, \"padding\"),\r\n]);\r\n\r\nexport const addLiquidityLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"baseAmountIn\"),\r\n  u64(\"quoteAmountIn\"),\r\n  u64(\"fixedSide\"),\r\n  u64(\"otherAmountMin\"),\r\n]);\r\n\r\nexport const removeLiquidityLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"lpAmount\"),\r\n  u64(\"baseAmountMin\"),\r\n  u64(\"quoteAmountMin\"),\r\n]);\r\n\r\nexport type LiquidityStateLayoutV5 = typeof liquidityStateV5Layout;\r\nexport type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;\r\n\r\nexport type LiquidityState = LiquidityStateV4 | LiquidityStateV5;\r\nexport type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;\r\n\r\n/* ================= index ================= */\r\n// version => liquidity state layout\r\nexport const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {\r\n  [version: number]: LiquidityStateLayout;\r\n} = {\r\n  4: liquidityStateV4Layout,\r\n  5: liquidityStateV5Layout,\r\n};\r\nexport const createPoolFeeLayout = struct([u64(\"fee\")]);\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { seq, struct, u64 } from \"../../marshmallow\";\r\n\r\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nconst ELEMENT_SIZE = 50000;\r\n\r\nexport const DataElement = struct([u64(\"x\"), u64(\"y\"), u64(\"price\")]);\r\n\r\nexport const modelDataInfoLayout = struct([\r\n  u64(\"accountType\"),\r\n  u64(\"status\"),\r\n  u64(\"multiplier\"),\r\n  u64(\"validDataCount\"),\r\n  seq(DataElement, ELEMENT_SIZE, \"DataElement\"),\r\n]);\r\n\r\nexport interface StableModelLayout {\r\n  accountType: number;\r\n  status: number;\r\n  multiplier: number;\r\n  validDataCount: number;\r\n  DataElement: { x: number; y: number; price: number }[];\r\n}\r\n\r\nfunction estimateRangeByXyReal(_xReal: number, _yReal: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction estimateRangeByX(_x: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction estimateRangeByY(_y: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction getMininumRangeByXyReal(\r\n  layoutData: StableModelLayout,\r\n  xReal: number,\r\n  yReal: number,\r\n): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByXyReal(xReal, yReal);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = (xReal * layoutData.multiplier) / yReal;\r\n  while (minRangeIdx <= maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n    if (mid === 0 || mid >= ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n    const cur = (layoutData.DataElement[mid].x * layoutData.multiplier) / layoutData.DataElement[mid].y;\r\n    const left = (layoutData.DataElement[mid - 1].x * layoutData.multiplier) / layoutData.DataElement[mid - 1].y;\r\n    const right = (layoutData.DataElement[mid + 1].x * layoutData.multiplier) / layoutData.DataElement[mid + 1].y;\r\n\r\n    if (target === cur) {\r\n      return [mid, mid, true];\r\n    } else if (target === left) {\r\n      return [mid - 1, mid - 1, true];\r\n    } else if (target === right) {\r\n      return [mid + 1, mid + 1, true];\r\n    } else if (target < left) {\r\n      maxRangeIdx = mid - 1;\r\n    } else if (target > left && target < cur) {\r\n      return [mid - 1, mid, true];\r\n    } else if (target > cur && target < right) {\r\n      return [mid, mid + 1, true];\r\n    } else {\r\n      minRangeIdx = mid + 1;\r\n    }\r\n  }\r\n  return [mid, mid, false];\r\n}\r\nfunction getRatio(layoutData: StableModelLayout, xReal: number, yReal: number): number {\r\n  const [minRangeIdx, maxRangeIdx, find] = getMininumRangeByXyReal(layoutData, xReal, yReal);\r\n\r\n  if (!find) {\r\n    return 0;\r\n  }\r\n\r\n  if (minRangeIdx === maxRangeIdx) {\r\n    const x = layoutData.DataElement[minRangeIdx].x;\r\n    const ratio = (xReal * layoutData.multiplier) / x;\r\n    return ratio;\r\n  } else {\r\n    const x1 = layoutData.DataElement[minRangeIdx].x;\r\n    const y1 = layoutData.DataElement[minRangeIdx].y;\r\n    const x2 = layoutData.DataElement[maxRangeIdx].x;\r\n    const y2 = layoutData.DataElement[maxRangeIdx].y;\r\n\r\n    const xDenominator = yReal * (x2 * y1 - x1 * y2);\r\n    const xNumerator1 = x1 * xDenominator;\r\n    const xNumerator2 = (x2 - x1) * (xReal * y1 - x1 * yReal) * y2;\r\n\r\n    const xNumerator = xNumerator1 + xNumerator2;\r\n    const ratio = (xReal * layoutData.multiplier * xDenominator) / xNumerator;\r\n    return ratio;\r\n  }\r\n}\r\n\r\nfunction realToTable(layoutData: StableModelLayout, realValue: number, ratio: number): number {\r\n  return (realValue * layoutData.multiplier) / ratio;\r\n}\r\n\r\nfunction tableToReal(layoutData: StableModelLayout, tableValue: number, ratio: number): number {\r\n  return (tableValue * ratio) / layoutData.multiplier;\r\n}\r\n\r\nfunction getMinimumRangeByX(layoutData: StableModelLayout, x: number): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByX(x);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = x;\r\n  while (minRangeIdx < maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n\r\n    if (mid <= 0 || mid > ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n    const cur = layoutData.DataElement[mid].x;\r\n    const left = layoutData.DataElement[mid - 1].x;\r\n    const right = layoutData.DataElement[mid + 1].x;\r\n\r\n    if (target === cur) return [mid, mid, true];\r\n    else if (target === left) return [mid - 1, mid - 1, true];\r\n    else if (target === right) return [mid + 1, mid + 1, true];\r\n    else if (target < left) maxRangeIdx = mid - 1;\r\n    else if (target > left && target < cur) return [mid - 1, mid, true];\r\n    else if (target > cur && target < right) return [mid, mid + 1, true];\r\n    else minRangeIdx = mid + 1;\r\n  }\r\n  return [mid, mid, false];\r\n}\r\n\r\nfunction getMinimumRangeByY(layoutData: StableModelLayout, y: number): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByY(y);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = y;\r\n  while (minRangeIdx <= maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n    if (mid <= 0 || mid >= ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n\r\n    const cur = layoutData.DataElement[mid].y;\r\n    const left = layoutData.DataElement[mid - 1].y;\r\n    const right = layoutData.DataElement[mid + 1].y;\r\n    if (target === cur) return [mid, mid, true];\r\n    else if (target === left) return [mid - 1, mid - 1, true];\r\n    else if (target === right) return [mid + 1, mid + 1, true];\r\n    else if (target < right) {\r\n      minRangeIdx = mid + 1;\r\n    } else if (target < left && target > cur) return [mid - 1, mid, true];\r\n    else if (target < cur && target > right) return [mid, mid + 1, true];\r\n    else maxRangeIdx = mid - 1;\r\n  }\r\n  return [mid, mid, false];\r\n}\r\n\r\nfunction getDataByX(\r\n  layoutData: StableModelLayout,\r\n  x: number,\r\n  dx: number,\r\n  priceUp: boolean,\r\n): [number, number, boolean, boolean] {\r\n  const xWithDx = priceUp ? x + dx : x - dx;\r\n  const [minIdx, maxIdx, find] = getMinimumRangeByX(layoutData, xWithDx);\r\n  if (!find) return [0, 0, false, find];\r\n\r\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].y, false, find];\r\n  else {\r\n    const x1 = layoutData.DataElement[minIdx].x;\r\n    const x2 = layoutData.DataElement[maxIdx].x;\r\n    const p1 = layoutData.DataElement[minIdx].price;\r\n    const p2 = layoutData.DataElement[maxIdx].price;\r\n    const y1 = layoutData.DataElement[minIdx].y;\r\n    const y2 = layoutData.DataElement[maxIdx].y;\r\n\r\n    if (x >= x1 && x <= x2) {\r\n      if (priceUp) return [p2, y2, true, find];\r\n      else return [p1, y1, true, find];\r\n    } else {\r\n      let p, y;\r\n      if (priceUp) {\r\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\r\n        y = y1 - ((xWithDx - x1) * layoutData.multiplier) / p2;\r\n      } else {\r\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\r\n        y = y2 + ((x2 - xWithDx) * layoutData.multiplier) / p1;\r\n      }\r\n      return [p, y, false, find];\r\n    }\r\n  }\r\n}\r\n\r\nfunction getDataByY(\r\n  layoutData: StableModelLayout,\r\n  y: number,\r\n  dy: number,\r\n  priceUp: boolean,\r\n): [number, number, boolean, boolean] {\r\n  const yWithDy = priceUp ? y - dy : y + dy;\r\n  const [minIdx, maxIdx, find] = getMinimumRangeByY(layoutData, yWithDy);\r\n  if (!find) return [0, 0, false, find];\r\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].x, false, find];\r\n  else {\r\n    const x1 = layoutData.DataElement[minIdx].x;\r\n    const x2 = layoutData.DataElement[maxIdx].x;\r\n    const p1 = layoutData.DataElement[minIdx].price;\r\n    const p2 = layoutData.DataElement[maxIdx].price;\r\n    const y1 = layoutData.DataElement[minIdx].y;\r\n    const y2 = layoutData.DataElement[maxIdx].y;\r\n\r\n    if (y >= y2 && y <= y1) {\r\n      return priceUp ? [p2, x2, true, find] : [p1, x1, true, find];\r\n    } else {\r\n      let p, x;\r\n      if (priceUp) {\r\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\r\n        x = x1 + (p2 * (y1 - yWithDy)) / layoutData.multiplier;\r\n      } else {\r\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\r\n        x = x2 - (p1 * (yWithDy - y2)) / layoutData.multiplier;\r\n      }\r\n      return [p, x, false, find];\r\n    }\r\n  }\r\n}\r\n\r\nfunction getMidPrice(layoutData: StableModelLayout, x: number): number {\r\n  const ret = getDataByX(layoutData, x, 0, false);\r\n  if (ret[3]) return ret[0];\r\n  else return 0;\r\n}\r\n\r\nexport function getDyByDxBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dxReal: number): number {\r\n  const ratio = getRatio(layoutData, xReal, yReal);\r\n  const x = realToTable(layoutData, xReal, ratio);\r\n  const y = realToTable(layoutData, yReal, ratio);\r\n  const dx = realToTable(layoutData, dxReal, ratio);\r\n  const priceUp = true;\r\n  const [p, y2, lessTrade, find] = getDataByX(layoutData, x, dx, priceUp);\r\n  if (!find) return 0;\r\n  if (lessTrade) {\r\n    const dyReal = (dxReal * layoutData.multiplier) / p;\r\n    return dyReal;\r\n  } else {\r\n    const dy = y - y2;\r\n    const dyReal = tableToReal(layoutData, dy, ratio);\r\n    return dyReal;\r\n  }\r\n}\r\n\r\nexport function getDxByDyBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dyReal: number): number {\r\n  const ratio = getRatio(layoutData, xReal, yReal);\r\n  const x = realToTable(layoutData, xReal, ratio);\r\n  const y = realToTable(layoutData, yReal, ratio);\r\n  const dy = realToTable(layoutData, dyReal, ratio);\r\n  const priceUp = false;\r\n  const [p, x2, lessTrade, find] = getDataByY(layoutData, y, dy, priceUp);\r\n  if (!find) return 0;\r\n  if (lessTrade) {\r\n    const dxReal = (dyReal * p) / layoutData.multiplier;\r\n    return dxReal;\r\n  } else {\r\n    const dx = x - x2;\r\n    const dxReal = tableToReal(layoutData, dx, ratio);\r\n    return dxReal;\r\n  }\r\n}\r\n\r\nexport function formatLayout(buffer: Buffer): StableModelLayout {\r\n  const layoutInfo = modelDataInfoLayout.decode(buffer);\r\n  return {\r\n    accountType: layoutInfo.accountType.toNumber(),\r\n    status: layoutInfo.status.toNumber(),\r\n    multiplier: layoutInfo.multiplier.toNumber(),\r\n    validDataCount: layoutInfo.validDataCount.toNumber(),\r\n    DataElement: layoutInfo.DataElement.map((item: any) => ({\r\n      x: item.x.toNumber(),\r\n      y: item.y.toNumber(),\r\n      price: item.price.toNumber(),\r\n    })),\r\n  };\r\n}\r\n\r\nexport function getStablePrice(\r\n  layoutData: StableModelLayout,\r\n  coinReal: number,\r\n  pcReal: number,\r\n  baseCoin: boolean,\r\n): number {\r\n  const price =\r\n    getMidPrice(layoutData, realToTable(layoutData, coinReal, getRatio(layoutData, coinReal, pcReal))) /\r\n    layoutData.multiplier;\r\n  return baseCoin ? price : 1 / price;\r\n}\r\n\r\nexport class StableLayout {\r\n  private readonly connection: Connection;\r\n  private _layoutData: StableModelLayout = {\r\n    accountType: 0,\r\n    status: 0,\r\n    multiplier: 0,\r\n    validDataCount: 0,\r\n    DataElement: [],\r\n  };\r\n\r\n  constructor({ connection }: { connection: Connection }) {\r\n    this.connection = connection;\r\n  }\r\n\r\n  get stableModelData(): StableModelLayout {\r\n    return this._layoutData;\r\n  }\r\n\r\n  public async initStableModelLayout(): Promise<void> {\r\n    if (this._layoutData.validDataCount === 0) {\r\n      if (this.connection) {\r\n        const acc = await this.connection.getAccountInfo(MODEL_DATA_PUBKEY);\r\n        if (acc) this._layoutData = formatLayout(acc?.data);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { AmmV4Keys, AmmV5Keys } from \"../../api/type\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport {\r\n  findProgramAddress,\r\n  parseSimulateLogToJson,\r\n  parseSimulateValue,\r\n  simulateMultipleInstruction,\r\n} from \"@/common/txTool/txUtils\";\r\nimport { toApiV3Token } from \"../../raydium/token/utils\";\r\nimport { makeSimulatePoolInfoInstruction } from \"./instruction\";\r\nimport { getSerumAssociatedAuthority } from \"./serum\";\r\nimport { StableLayout } from \"./stable\";\r\nimport { AmmRpcData, ComputeAmountOutParam, LiquidityPoolKeys } from \"./type\";\r\nimport { liquidityStateV4Layout } from \"./layout\";\r\nimport { splAccountLayout } from \"../account\";\r\nimport { SPL_MINT_LAYOUT } from \"../token\";\r\n\r\ntype AssociatedName =\r\n  | \"amm_associated_seed\"\r\n  | \"lp_mint_associated_seed\"\r\n  | \"coin_vault_associated_seed\"\r\n  | \"pc_vault_associated_seed\"\r\n  | \"lp_mint_associated_seed\"\r\n  | \"temp_lp_token_associated_seed\"\r\n  | \"open_order_associated_seed\"\r\n  | \"target_associated_seed\"\r\n  | \"withdraw_associated_seed\";\r\n\r\ninterface GetAssociatedParam {\r\n  name: AssociatedName;\r\n  programId: PublicKey;\r\n  marketId: PublicKey;\r\n}\r\n\r\nexport function getAssociatedConfigId({ programId }: { programId: PublicKey }): PublicKey {\r\n  const { publicKey } = findProgramAddress([Buffer.from(\"amm_config_account_seed\", \"utf-8\")], programId);\r\n  return publicKey;\r\n}\r\n\r\nexport function getLiquidityAssociatedId({ name, programId, marketId }: GetAssociatedParam): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(name, \"utf-8\")],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getAssociatedOpenOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\r\n  const { publicKey } = findProgramAddress(\r\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"open_order_associated_seed\", \"utf-8\")],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getLiquidityAssociatedAuthority({ programId }: { programId: PublicKey }): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], programId);\r\n}\r\n\r\nexport function getAssociatedPoolKeys({\r\n  version,\r\n  marketVersion,\r\n  marketId,\r\n  baseMint,\r\n  quoteMint,\r\n  baseDecimals,\r\n  quoteDecimals,\r\n  programId,\r\n  marketProgramId,\r\n}: {\r\n  version: 4 | 5;\r\n  marketVersion: 3;\r\n  marketId: PublicKey;\r\n  baseMint: PublicKey;\r\n  quoteMint: PublicKey;\r\n  baseDecimals: number;\r\n  quoteDecimals: number;\r\n  programId: PublicKey;\r\n  marketProgramId: PublicKey;\r\n}): LiquidityPoolKeys {\r\n  const id = getLiquidityAssociatedId({ name: \"amm_associated_seed\", programId, marketId });\r\n  const lpMint = getLiquidityAssociatedId({ name: \"lp_mint_associated_seed\", programId, marketId });\r\n  const { publicKey: authority, nonce } = getLiquidityAssociatedAuthority({ programId });\r\n  const baseVault = getLiquidityAssociatedId({ name: \"coin_vault_associated_seed\", programId, marketId });\r\n  const quoteVault = getLiquidityAssociatedId({ name: \"pc_vault_associated_seed\", programId, marketId });\r\n  const lpVault = getLiquidityAssociatedId({ name: \"temp_lp_token_associated_seed\", programId, marketId });\r\n  const openOrders = getAssociatedOpenOrders({ programId, marketId });\r\n  const targetOrders = getLiquidityAssociatedId({ name: \"target_associated_seed\", programId, marketId });\r\n  const withdrawQueue = getLiquidityAssociatedId({ name: \"withdraw_associated_seed\", programId, marketId });\r\n\r\n  const { publicKey: marketAuthority } = getSerumAssociatedAuthority({\r\n    programId: marketProgramId,\r\n    marketId,\r\n  });\r\n\r\n  return {\r\n    // base\r\n    id,\r\n    baseMint,\r\n    quoteMint,\r\n    lpMint,\r\n    baseDecimals,\r\n    quoteDecimals,\r\n    lpDecimals: baseDecimals,\r\n    // version\r\n    version,\r\n    programId,\r\n    // keys\r\n    authority,\r\n    nonce,\r\n    baseVault,\r\n    quoteVault,\r\n    lpVault,\r\n    openOrders,\r\n    targetOrders,\r\n    withdrawQueue,\r\n    // market version\r\n    marketVersion,\r\n    marketProgramId,\r\n    // market keys\r\n    marketId,\r\n    marketAuthority,\r\n    lookupTableAccount: PublicKey.default,\r\n    configId: getAssociatedConfigId({ programId }),\r\n  };\r\n}\r\n\r\nlet stableLayout: StableLayout | undefined;\r\n\r\nexport async function fetchMultipleInfo({\r\n  connection,\r\n  poolKeysList,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  poolKeysList: (AmmV4Keys | AmmV5Keys)[];\r\n  config: any;\r\n}): Promise<\r\n  {\r\n    status: BN;\r\n    baseDecimals: number;\r\n    quoteDecimals: number;\r\n    lpDecimals: number;\r\n    baseReserve: BN;\r\n    quoteReserve: BN;\r\n    lpSupply: BN;\r\n    startTime: BN;\r\n  }[]\r\n> {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const loadStable = poolKeysList.find((i) => i.modelDataAccount);\r\n  if (loadStable) {\r\n    if (!stableLayout) {\r\n      stableLayout = new StableLayout({ connection });\r\n      await stableLayout.initStableModelLayout();\r\n    }\r\n  }\r\n  return await Promise.all(\r\n    poolKeysList.map(async (itemPoolKey) => {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      if (itemPoolKey.modelDataAccount) {\r\n        const instructions = makeSimulatePoolInfoInstruction({ poolKeys: itemPoolKey });\r\n        const logs = await simulateMultipleInstruction(connection, [instructions.instruction], \"GetPoolData\");\r\n        const poolsInfo = logs.map((log) => {\r\n          const json = parseSimulateLogToJson(log, \"GetPoolData\");\r\n          const status = new BN(parseSimulateValue(json, \"status\"));\r\n          const baseDecimals = Number(parseSimulateValue(json, \"coin_decimals\"));\r\n          const quoteDecimals = Number(parseSimulateValue(json, \"pc_decimals\"));\r\n          const lpDecimals = Number(parseSimulateValue(json, \"lp_decimals\"));\r\n          const baseReserve = new BN(parseSimulateValue(json, \"pool_coin_amount\"));\r\n          const quoteReserve = new BN(parseSimulateValue(json, \"pool_pc_amount\"));\r\n          const lpSupply = new BN(parseSimulateValue(json, \"pool_lp_supply\"));\r\n          // TODO fix it when split stable\r\n          let startTime = \"0\";\r\n          try {\r\n            startTime = parseSimulateValue(json, \"pool_open_time\");\r\n          } catch (error) {\r\n            //\r\n          }\r\n          return {\r\n            status,\r\n            baseDecimals,\r\n            quoteDecimals,\r\n            lpDecimals,\r\n            baseReserve,\r\n            quoteReserve,\r\n            lpSupply,\r\n            startTime: new BN(startTime),\r\n          };\r\n        })[0];\r\n        return poolsInfo;\r\n      } else {\r\n        const [poolAcc, vaultAccA, vaultAccB, mintAccLp] = await connection.getMultipleAccountsInfo([\r\n          new PublicKey(itemPoolKey.id),\r\n          new PublicKey(itemPoolKey.vault.A),\r\n          new PublicKey(itemPoolKey.vault.B),\r\n          new PublicKey(itemPoolKey.mintLp.address),\r\n        ]);\r\n        if (poolAcc === null) throw Error(\"fetch pool error\");\r\n        if (vaultAccA === null) throw Error(\"fetch vaultAccA error\");\r\n        if (vaultAccB === null) throw Error(\"fetch vaultAccB error\");\r\n        if (mintAccLp === null) throw Error(\"fetch mintAccLp error\");\r\n        const poolInfo = liquidityStateV4Layout.decode(poolAcc.data);\r\n        const vaultInfoA = splAccountLayout.decode(vaultAccA.data);\r\n        const vaultInfoB = splAccountLayout.decode(vaultAccB.data);\r\n        const lpInfo = SPL_MINT_LAYOUT.decode(mintAccLp.data);\r\n        return {\r\n          status: poolInfo.status,\r\n          baseDecimals: poolInfo.baseDecimal.toNumber(),\r\n          quoteDecimals: poolInfo.quoteDecimal.toNumber(),\r\n          lpDecimals: lpInfo.decimals,\r\n          baseReserve: vaultInfoA.amount.sub(poolInfo.baseNeedTakePnl),\r\n          quoteReserve: vaultInfoB.amount.sub(poolInfo.quoteNeedTakePnl),\r\n          lpSupply: poolInfo.lpReserve,\r\n          startTime: poolInfo.poolOpenTime,\r\n        };\r\n      }\r\n    }),\r\n  );\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport const toAmmComputePoolInfo = (\r\n  poolData: Record<string, AmmRpcData>,\r\n): Record<string, ComputeAmountOutParam[\"poolInfo\"]> => {\r\n  const data: Record<string, ComputeAmountOutParam[\"poolInfo\"]> = {};\r\n  const tokenProgramStr = TOKEN_PROGRAM_ID.toBase58();\r\n\r\n  Object.keys(poolData).map((poolId) => {\r\n    const poolInfo = poolData[poolId];\r\n    const [mintA, mintB] = [poolInfo.baseMint.toBase58(), poolInfo.quoteMint.toBase58()];\r\n    data[poolId] = {\r\n      id: poolId,\r\n      version: 4,\r\n      status: poolInfo.status.toNumber(),\r\n      programId: poolInfo.programId.toBase58(), // needed\r\n      mintA: toApiV3Token({\r\n        address: mintA, // needed\r\n        programId: tokenProgramStr,\r\n        decimals: poolInfo.baseDecimal.toNumber(),\r\n      }),\r\n      mintB: toApiV3Token({\r\n        address: mintB, // needed\r\n        programId: tokenProgramStr,\r\n        decimals: poolInfo.quoteDecimal.toNumber(),\r\n      }),\r\n      rewardDefaultInfos: [],\r\n      rewardDefaultPoolInfos: \"Ecosystem\",\r\n      price: poolInfo.poolPrice.toNumber(),\r\n      mintAmountA: new Decimal(poolInfo.mintAAmount.toString()).div(10 ** poolInfo.baseDecimal.toNumber()).toNumber(),\r\n      mintAmountB: new Decimal(poolInfo.mintBAmount.toString()).div(10 ** poolInfo.quoteDecimal.toNumber()).toNumber(),\r\n      baseReserve: poolInfo.baseReserve, // needed\r\n      quoteReserve: poolInfo.quoteReserve, // needed\r\n      feeRate: new Decimal(poolInfo.tradeFeeNumerator.toString())\r\n        .div(poolInfo.tradeFeeDenominator.toString())\r\n        .toNumber(),\r\n      openTime: poolInfo.poolOpenTime.toString(),\r\n      tvl: 0,\r\n      day: mockRewardData,\r\n      week: mockRewardData,\r\n      month: mockRewardData,\r\n      pooltype: [],\r\n      farmUpcomingCount: 0,\r\n      farmOngoingCount: 0,\r\n      farmFinishedCount: 0,\r\n      type: \"Standard\",\r\n      marketId: poolInfo.marketId.toBase58(),\r\n      configId: getAssociatedConfigId({ programId: poolInfo.programId }).toBase58(),\r\n      lpPrice: 0,\r\n      lpAmount: new Decimal(poolInfo.lpReserve.toString())\r\n        .div(10 ** Math.min(poolInfo.baseDecimal.toNumber(), poolInfo.quoteDecimal.toNumber()))\r\n        .toNumber(),\r\n      lpMint: toApiV3Token({\r\n        address: poolInfo.lpMint.toBase58(),\r\n        programId: tokenProgramStr,\r\n        decimals: Math.min(poolInfo.baseDecimal.toNumber(), poolInfo.quoteDecimal.toNumber()),\r\n      }),\r\n      burnPercent: 0,\r\n    };\r\n  });\r\n  return data;\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { createLogger } from \"../../common/logger\";\r\nimport { SerumVersion } from \"../serum\";\r\nimport { LIQUIDITY_VERSION_TO_SERUM_VERSION } from \"./constant\";\r\n\r\nconst logger = createLogger(\"Raydium_liquidity_serum\");\r\n\r\nexport function getSerumVersion(version: number): SerumVersion {\r\n  const serumVersion = LIQUIDITY_VERSION_TO_SERUM_VERSION[version];\r\n  if (!serumVersion) logger.logWithError(\"invalid version\", \"version\", version);\r\n\r\n  return serumVersion;\r\n}\r\n\r\nexport function getSerumAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const seeds = [marketId.toBuffer()];\r\n\r\n  let nonce = 0;\r\n  let publicKey: PublicKey;\r\n\r\n  while (nonce < 100) {\r\n    try {\r\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\r\n      publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\r\n    } catch (err) {\r\n      if (err instanceof TypeError) {\r\n        throw err;\r\n      }\r\n      nonce++;\r\n      continue;\r\n    }\r\n    return { publicKey, nonce };\r\n  }\r\n\r\n  logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\r\n    programId,\r\n    marketId,\r\n  });\r\n  throw new Error(\"unable to find a viable program address nonce\");\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { BN_ZERO } from \"@/common/bignumber\";\r\nimport { MakeMultiTxData } from \"@/common/txTool/txTool\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { ComputeBudgetConfig, TxTipConfig } from \"../../raydium/type\";\r\nimport { generatePubKey } from \"../account/util\";\r\nimport ModuleBase from \"../moduleBase\";\r\nimport { makeCreateMarketInstruction } from \"./instrument\";\r\n\r\nexport interface MarketExtInfo {\r\n  address: {\r\n    marketId: PublicKey;\r\n    requestQueue: PublicKey;\r\n    eventQueue: PublicKey;\r\n    bids: PublicKey;\r\n    asks: PublicKey;\r\n    baseVault: PublicKey;\r\n    quoteVault: PublicKey;\r\n    baseMint: PublicKey;\r\n    quoteMint: PublicKey;\r\n  };\r\n}\r\n\r\nexport default class MarketV2 extends ModuleBase {\r\n  public async create<T extends TxVersion>({\r\n    baseInfo,\r\n    quoteInfo,\r\n    lotSize, // 1\r\n    tickSize, // 0.01\r\n    dexProgramId,\r\n    requestQueueSpace,\r\n    eventQueueSpace,\r\n    orderbookQueueSpace,\r\n    lowestFeeMarket,\r\n    assignSeed,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    baseInfo: {\r\n      mint: PublicKey;\r\n      decimals: number;\r\n    };\r\n    quoteInfo: {\r\n      mint: PublicKey;\r\n      decimals: number;\r\n    };\r\n    lotSize: number;\r\n    tickSize: number;\r\n    dexProgramId: PublicKey;\r\n    eventQueue?: PublicKey;\r\n    requestQueue?: PublicKey;\r\n    requestQueueSpace?: number;\r\n    eventQueueSpace?: number;\r\n    orderbookQueueSpace?: number;\r\n\r\n    lowestFeeMarket?: boolean;\r\n    assignSeed?: string;\r\n\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeMultiTxData<T, MarketExtInfo>> {\r\n    const wallet = this.scope.ownerPubKey;\r\n    const seed = assignSeed\r\n      ? `${baseInfo.mint.toBase58().slice(0, 10)}-${quoteInfo.mint.toBase58().slice(0, 10)}-${assignSeed}`\r\n      : undefined;\r\n    const market = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: dexProgramId,\r\n      assignSeed: seed ? `${seed}-market` : seed,\r\n    });\r\n    const requestQueue = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: dexProgramId,\r\n      assignSeed: seed ? `${seed}-request` : seed,\r\n    });\r\n    const eventQueue = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: dexProgramId,\r\n      assignSeed: seed ? `${seed}-event` : seed,\r\n    });\r\n    const bids = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: dexProgramId,\r\n      assignSeed: seed ? `${seed}-bids` : seed,\r\n    });\r\n    const asks = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: dexProgramId,\r\n      assignSeed: seed ? `${seed}-asks` : seed,\r\n    });\r\n    const baseVault = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: TOKEN_PROGRAM_ID,\r\n      assignSeed: seed ? `${seed}-baseVault` : seed,\r\n    });\r\n    const quoteVault = generatePubKey({\r\n      fromPublicKey: wallet,\r\n      programId: TOKEN_PROGRAM_ID,\r\n      assignSeed: seed ? `${seed}-quoteVault` : seed,\r\n    });\r\n    const feeRateBps = 0;\r\n    const quoteDustThreshold = new BN(100);\r\n    function getVaultOwnerAndNonce() {\r\n      const vaultSignerNonce = new BN(0);\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        try {\r\n          const vaultOwner = PublicKey.createProgramAddressSync(\r\n            [market.publicKey.toBuffer(), vaultSignerNonce.toArrayLike(Buffer, \"le\", 8)],\r\n            dexProgramId,\r\n          );\r\n          return { vaultOwner, vaultSignerNonce };\r\n        } catch (e) {\r\n          vaultSignerNonce.iaddn(1);\r\n          if (vaultSignerNonce.gt(new BN(25555))) throw Error(\"find vault owner error\");\r\n        }\r\n      }\r\n    }\r\n    const { vaultOwner, vaultSignerNonce } = getVaultOwnerAndNonce();\r\n    const baseLotSize = new BN(Math.round(10 ** baseInfo.decimals * lotSize));\r\n    const quoteLotSize = new BN(Math.round(lotSize * 10 ** quoteInfo.decimals * tickSize));\r\n\r\n    if (baseLotSize.eq(BN_ZERO)) throw Error(\"lot size is too small\");\r\n    if (quoteLotSize.eq(BN_ZERO)) throw Error(\"tick size or lot size is too small\");\r\n    const allTxArr = await makeCreateMarketInstruction({\r\n      connection: this.scope.connection,\r\n      wallet: this.scope.ownerPubKey,\r\n      marketInfo: {\r\n        programId: dexProgramId,\r\n        id: market,\r\n        baseMint: baseInfo.mint,\r\n        quoteMint: quoteInfo.mint,\r\n        baseVault,\r\n        quoteVault,\r\n        vaultOwner,\r\n        requestQueue,\r\n        eventQueue,\r\n        bids,\r\n        asks,\r\n\r\n        feeRateBps,\r\n        quoteDustThreshold,\r\n        vaultSignerNonce,\r\n        baseLotSize,\r\n        quoteLotSize,\r\n\r\n        requestQueueSpace,\r\n        eventQueueSpace,\r\n        orderbookQueueSpace,\r\n\r\n        lowestFeeMarket,\r\n      },\r\n    });\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    txBuilder.addInstruction({\r\n      instructions: allTxArr[0].transaction.instructions,\r\n      signers: allTxArr[0].signer,\r\n    });\r\n\r\n    for await (const txData of allTxArr.slice(1, allTxArr.length)) {\r\n      txBuilder.addInstruction({\r\n        instructions: txData.transaction.instructions,\r\n        signers: txData.signer,\r\n        instructionTypes: txData.instructionTypes,\r\n      });\r\n    }\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({\r\n        computeBudgetConfig,\r\n        address: {\r\n          marketId: market.publicKey,\r\n          requestQueue: requestQueue.publicKey,\r\n          eventQueue: eventQueue.publicKey,\r\n          bids: bids.publicKey,\r\n          asks: asks.publicKey,\r\n          baseVault: baseVault.publicKey,\r\n          quoteVault: quoteVault.publicKey,\r\n          baseMint: new PublicKey(baseInfo.mint),\r\n          quoteMint: new PublicKey(quoteInfo.mint),\r\n        },\r\n      }) as Promise<MakeMultiTxData<T, MarketExtInfo>>;\r\n\r\n    return txBuilder.sizeCheckBuild({\r\n      computeBudgetConfig,\r\n      address: {\r\n        marketId: market.publicKey,\r\n        requestQueue: requestQueue.publicKey,\r\n        eventQueue: eventQueue.publicKey,\r\n        bids: bids.publicKey,\r\n        asks: asks.publicKey,\r\n        baseVault: baseVault.publicKey,\r\n        quoteVault: quoteVault.publicKey,\r\n        baseMint: new PublicKey(baseInfo.mint),\r\n        quoteMint: new PublicKey(quoteInfo.mint),\r\n      },\r\n    }) as Promise<MakeMultiTxData<T, MarketExtInfo>>;\r\n  }\r\n}\r\n","import {\r\n  Connection,\r\n  Keypair,\r\n  PublicKey,\r\n  SystemProgram,\r\n  SYSVAR_RENT_PUBKEY,\r\n  Transaction,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { createInitializeAccountInstruction, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { struct, u16, u32, u64, u8 } from \"../../marshmallow\";\r\nimport { MARKET_STATE_LAYOUT_V2 } from \"./layout\";\r\n\r\ntype Transactions = {\r\n  transaction: Transaction;\r\n  signer?: Keypair[] | undefined;\r\n  instructionTypes?: string[];\r\n}[];\r\n\r\nexport function initializeMarket({\r\n  programId,\r\n  marketInfo,\r\n}: {\r\n  programId: PublicKey;\r\n  marketInfo: {\r\n    id: PublicKey;\r\n    requestQueue: PublicKey;\r\n    eventQueue: PublicKey;\r\n    bids: PublicKey;\r\n    asks: PublicKey;\r\n    baseVault: PublicKey;\r\n    quoteVault: PublicKey;\r\n    baseMint: PublicKey;\r\n    quoteMint: PublicKey;\r\n    authority?: PublicKey;\r\n    pruneAuthority?: PublicKey;\r\n\r\n    baseLotSize: BN;\r\n    quoteLotSize: BN;\r\n    feeRateBps: number;\r\n    vaultSignerNonce: BN;\r\n    quoteDustThreshold: BN;\r\n  };\r\n}): TransactionInstruction {\r\n  const dataLayout = struct([\r\n    u8(\"version\"),\r\n    u32(\"instruction\"),\r\n    u64(\"baseLotSize\"),\r\n    u64(\"quoteLotSize\"),\r\n    u16(\"feeRateBps\"),\r\n    u64(\"vaultSignerNonce\"),\r\n    u64(\"quoteDustThreshold\"),\r\n  ]);\r\n\r\n  const keys = [\r\n    { pubkey: marketInfo.id, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.requestQueue, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.eventQueue, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.bids, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.asks, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.baseVault, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.quoteVault, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.baseMint, isSigner: false, isWritable: false },\r\n    { pubkey: marketInfo.quoteMint, isSigner: false, isWritable: false },\r\n    // Use a dummy address if using the new dex upgrade to save tx space.\r\n    {\r\n      pubkey: marketInfo.authority ? marketInfo.quoteMint : SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ]\r\n    .concat(marketInfo.authority ? { pubkey: marketInfo.authority, isSigner: false, isWritable: false } : [])\r\n    .concat(\r\n      marketInfo.authority && marketInfo.pruneAuthority\r\n        ? { pubkey: marketInfo.pruneAuthority, isSigner: false, isWritable: false }\r\n        : [],\r\n    );\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      version: 0,\r\n      instruction: 0,\r\n      baseLotSize: marketInfo.baseLotSize,\r\n      quoteLotSize: marketInfo.quoteLotSize,\r\n      feeRateBps: marketInfo.feeRateBps,\r\n      vaultSignerNonce: marketInfo.vaultSignerNonce,\r\n      quoteDustThreshold: marketInfo.quoteDustThreshold,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport async function makeCreateMarketInstruction({\r\n  connection,\r\n  wallet,\r\n  marketInfo,\r\n}: {\r\n  connection: Connection;\r\n  wallet: PublicKey;\r\n  marketInfo: {\r\n    programId: PublicKey;\r\n    id: { publicKey: PublicKey; seed: string };\r\n    baseMint: PublicKey;\r\n    quoteMint: PublicKey;\r\n    baseVault: { publicKey: PublicKey; seed: string };\r\n    quoteVault: { publicKey: PublicKey; seed: string };\r\n    vaultOwner: PublicKey;\r\n\r\n    requestQueue: { publicKey: PublicKey; seed: string };\r\n    eventQueue: { publicKey: PublicKey; seed: string };\r\n    bids: { publicKey: PublicKey; seed: string };\r\n    asks: { publicKey: PublicKey; seed: string };\r\n\r\n    feeRateBps: number;\r\n    vaultSignerNonce: BN;\r\n    quoteDustThreshold: BN;\r\n\r\n    baseLotSize: BN;\r\n    quoteLotSize: BN;\r\n\r\n    requestQueueSpace?: number;\r\n    eventQueueSpace?: number;\r\n    orderbookQueueSpace?: number;\r\n\r\n    lowestFeeMarket?: boolean;\r\n  };\r\n}): Promise<Transactions> {\r\n  const tx1 = new Transaction();\r\n  const accountLamports = await connection.getMinimumBalanceForRentExemption(165);\r\n  tx1.add(\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.baseVault.seed,\r\n      newAccountPubkey: marketInfo.baseVault.publicKey,\r\n      lamports: accountLamports,\r\n      space: 165,\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.quoteVault.seed,\r\n      newAccountPubkey: marketInfo.quoteVault.publicKey,\r\n      lamports: accountLamports,\r\n      space: 165,\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    createInitializeAccountInstruction(marketInfo.baseVault.publicKey, marketInfo.baseMint, marketInfo.vaultOwner),\r\n    createInitializeAccountInstruction(marketInfo.quoteVault.publicKey, marketInfo.quoteMint, marketInfo.vaultOwner),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.id.seed,\r\n      newAccountPubkey: marketInfo.id.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(MARKET_STATE_LAYOUT_V2.span),\r\n      space: MARKET_STATE_LAYOUT_V2.span,\r\n      programId: marketInfo.programId,\r\n    }),\r\n  );\r\n\r\n  const tx2 = new Transaction();\r\n  tx2.add(\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.requestQueue.seed,\r\n      newAccountPubkey: marketInfo.requestQueue.publicKey,\r\n      lamports: marketInfo.lowestFeeMarket\r\n        ? 6208320\r\n        : await connection.getMinimumBalanceForRentExemption(marketInfo.requestQueueSpace ?? 5120 + 12),\r\n      space: marketInfo.lowestFeeMarket ? 764 : marketInfo.requestQueueSpace ?? 5120 + 12,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.eventQueue.seed,\r\n      newAccountPubkey: marketInfo.eventQueue.publicKey,\r\n      lamports: marketInfo.lowestFeeMarket\r\n        ? 79594560\r\n        : await connection.getMinimumBalanceForRentExemption(marketInfo.eventQueueSpace ?? 262144 + 12),\r\n      space: marketInfo.lowestFeeMarket ? 11308 : marketInfo.eventQueueSpace ?? 262144 + 12,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.bids.seed,\r\n      newAccountPubkey: marketInfo.bids.publicKey,\r\n      lamports: marketInfo.lowestFeeMarket\r\n        ? 101977920\r\n        : await connection.getMinimumBalanceForRentExemption(marketInfo.orderbookQueueSpace ?? 65536 + 12),\r\n      space: marketInfo.lowestFeeMarket ? 14524 : marketInfo.orderbookQueueSpace ?? 65536 + 12,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.asks.seed,\r\n      newAccountPubkey: marketInfo.asks.publicKey,\r\n      lamports: marketInfo.lowestFeeMarket\r\n        ? 101977920\r\n        : await connection.getMinimumBalanceForRentExemption(marketInfo.orderbookQueueSpace ?? 65536 + 12),\r\n      space: marketInfo.lowestFeeMarket ? 14524 : marketInfo.orderbookQueueSpace ?? 65536 + 12,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    initializeMarket({\r\n      programId: marketInfo.programId,\r\n      marketInfo: {\r\n        id: marketInfo.id.publicKey,\r\n        requestQueue: marketInfo.requestQueue.publicKey,\r\n        eventQueue: marketInfo.eventQueue.publicKey,\r\n        bids: marketInfo.bids.publicKey,\r\n        asks: marketInfo.asks.publicKey,\r\n        baseVault: marketInfo.baseVault.publicKey,\r\n        quoteVault: marketInfo.quoteVault.publicKey,\r\n        baseMint: marketInfo.baseMint,\r\n        quoteMint: marketInfo.quoteMint,\r\n\r\n        baseLotSize: marketInfo.baseLotSize,\r\n        quoteLotSize: marketInfo.quoteLotSize,\r\n        feeRateBps: marketInfo.feeRateBps,\r\n        vaultSignerNonce: marketInfo.vaultSignerNonce,\r\n        quoteDustThreshold: marketInfo.quoteDustThreshold,\r\n      },\r\n    }),\r\n  );\r\n\r\n  return [\r\n    {\r\n      transaction: tx1,\r\n      signer: [],\r\n      instructionTypes: [\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.InitAccount,\r\n        InstructionType.InitAccount,\r\n      ],\r\n    },\r\n    {\r\n      transaction: tx2,\r\n      signer: [],\r\n      instructionTypes: [\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.InitMarket,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n","import { blob, publicKey, struct, u64, WideBits } from \"../../marshmallow\";\r\n\r\nfunction accountFlagsLayout(property = \"accountFlags\"): WideBits<string> {\r\n  const ACCOUNT_FLAGS_LAYOUT = new WideBits(property);\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"initialized\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"market\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"openOrders\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"requestQueue\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"eventQueue\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"bids\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"asks\");\r\n  return ACCOUNT_FLAGS_LAYOUT;\r\n}\r\n\r\nexport const MARKET_STATE_LAYOUT_V2 = struct([\r\n  blob(5),\r\n  accountFlagsLayout(\"accountFlags\"),\r\n  publicKey(\"ownAddress\"),\r\n  u64(\"vaultSignerNonce\"),\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n  publicKey(\"baseVault\"),\r\n  u64(\"baseDepositsTotal\"),\r\n  u64(\"baseFeesAccrued\"),\r\n  publicKey(\"quoteVault\"),\r\n  u64(\"quoteDepositsTotal\"),\r\n  u64(\"quoteFeesAccrued\"),\r\n  u64(\"quoteDustThreshold\"),\r\n  publicKey(\"requestQueue\"),\r\n  publicKey(\"eventQueue\"),\r\n  publicKey(\"bids\"),\r\n  publicKey(\"asks\"),\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n  u64(\"feeRateBps\"),\r\n  u64(\"referrerRebatesAccrued\"),\r\n  blob(7),\r\n]);\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"../../api/type\";\r\nimport {\r\n  CLMM_LOCK_AUTH_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_PROGRAM_ID,\r\n  InstructionType,\r\n  WSOLMint,\r\n  fetchMultipleMintInfos,\r\n  getATAAddress,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n} from \"@/common\";\r\nimport { AccountLayout, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { toApiV3Token, toFeeConfig } from \"../../raydium/token/utils\";\r\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos, TxTipConfig } from \"../../raydium/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { MakeTransaction } from \"../type\";\r\nimport { ClmmInstrument } from \"./instrument\";\r\nimport { ClmmConfigLayout, ClmmPositionLayout, OperationLayout, PoolInfoLayout, PositionInfoLayout } from \"./layout\";\r\nimport {\r\n  ClmmRpcData,\r\n  ClosePositionExtInfo,\r\n  CollectRewardParams,\r\n  CollectRewardsParams,\r\n  ComputeClmmPoolInfo,\r\n  CreateConcentratedPool,\r\n  DecreaseLiquidity,\r\n  HarvestAllRewardsParams,\r\n  HarvestLockPosition,\r\n  IncreasePositionFromBase,\r\n  IncreasePositionFromLiquidity,\r\n  InitRewardExtInfo,\r\n  InitRewardParams,\r\n  InitRewardsParams,\r\n  LockPosition,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBase,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidity,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  SetRewardParams,\r\n  SetRewardsParams,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport { MAX_SQRT_PRICE_X64, MIN_SQRT_PRICE_X64, mockV3CreatePoolInfo, ZERO } from \"./utils/constants\";\r\nimport { MathUtil, SqrtPriceMath } from \"./utils/math\";\r\nimport {\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaTickArrayAddress,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaExBitmapAccount,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils, clmmComputeInfoToApiInfo } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\n\r\nexport class Clmm extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async getClmmPoolKeys(poolId: string): Promise<ClmmKeys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as ClmmKeys[])[0];\r\n  }\r\n\r\n  public async createPool<T extends TxVersion>(\r\n    props: CreateConcentratedPool<T>,\r\n  ): Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>> {\r\n    const {\r\n      programId,\r\n      owner = this.scope.owner?.publicKey || PublicKey.default,\r\n      mint1,\r\n      mint2,\r\n      ammConfig,\r\n      initialPrice,\r\n      computeBudgetConfig,\r\n      forerunCreate,\r\n      getObserveState,\r\n      txVersion,\r\n      txTipConfig,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const [mintA, mintB, initPrice] = new BN(new PublicKey(mint1.address).toBuffer()).gt(\r\n      new BN(new PublicKey(mint2.address).toBuffer()),\r\n    )\r\n      ? [mint2, mint1, new Decimal(1).div(initialPrice)]\r\n      : [mint1, mint2, initialPrice];\r\n\r\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\r\n\r\n    const extendMintAccount: PublicKey[] = [];\r\n    const fetchAccounts: PublicKey[] = [];\r\n    if (mintA.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintA.address)).publicKey);\r\n    if (mintB.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintB.address)).publicKey);\r\n    const extMintRes = await this.scope.connection.getMultipleAccountsInfo(fetchAccounts);\r\n\r\n    extMintRes.forEach((r, idx) => {\r\n      if (r) extendMintAccount.push(fetchAccounts[idx]);\r\n    });\r\n\r\n    const insInfo = await ClmmInstrument.createPoolInstructions({\r\n      connection: this.scope.connection,\r\n      programId,\r\n      owner,\r\n      mintA,\r\n      mintB,\r\n      ammConfigId: ammConfig.id,\r\n      initialPriceX64,\r\n      forerunCreate: !getObserveState && forerunCreate,\r\n      extendMintAccount,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{\r\n      mockPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n      address: ClmmKeys;\r\n      forerunCreate?: boolean;\r\n    }>({\r\n      txVersion,\r\n      extInfo: {\r\n        address: {\r\n          ...insInfo.address,\r\n          observationId: insInfo.address.observationId.toBase58(),\r\n          exBitmapAccount: insInfo.address.exBitmapAccount.toBase58(),\r\n          programId: programId.toString(),\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          openTime: \"0\",\r\n          vault: { A: insInfo.address.mintAVault.toString(), B: insInfo.address.mintBVault.toString() },\r\n          rewardInfos: [],\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        },\r\n        mockPoolInfo: {\r\n          type: \"Concentrated\",\r\n          rewardDefaultPoolInfos: \"Clmm\",\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          feeRate: ammConfig.tradeFeeRate,\r\n          openTime: \"0\",\r\n          programId: programId.toString(),\r\n          price: initPrice.toNumber(),\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          burnPercent: 0,\r\n          ...mockV3CreatePoolInfo,\r\n        },\r\n        forerunCreate,\r\n      },\r\n    }) as Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>>;\r\n  }\r\n\r\n  public async openPositionFromBase<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    getEphemeralSigners,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: OpenPositionFromBase<T>): Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>> {\r\n    if (this.scope.availability.addConcentratedPosition === false)\r\n      this.logAndCreateError(\"add position feature disabled in your region\");\r\n\r\n    this.scope.checkOwner();\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const [amountA, amountB] = base === \"MintA\" ? [baseAmount, otherAmountMax] : [otherAmountMax, baseAmount];\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountA,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountB,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", {\r\n        ownerTokenAccountA: ownerTokenAccountA?.toBase58(),\r\n        ownerTokenAccountB: ownerTokenAccountB?.toBase58(),\r\n      });\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n    const insInfo = await ClmmInstrument.openPositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        ...ownerInfo,\r\n        feePayer: this.scope.ownerPubKey,\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromBaseExtInfo>({\r\n      txVersion,\r\n      extInfo: { ...insInfo.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>>;\r\n  }\r\n\r\n  public async openPositionFromLiquidity<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n    feePayer,\r\n  }: OpenPositionFromLiquidity<T>): Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>> {\r\n    if (this.scope.availability.createConcentratedPosition === false)\r\n      this.logAndCreateError(\"open position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountMaxA,\r\n            }\r\n            : undefined,\r\n\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountMaxB,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (ownerTokenAccountA === undefined || ownerTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n\r\n    const makeOpenPositionInstructions = await ClmmInstrument.openPositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n    txBuilder.addInstruction(makeOpenPositionInstructions);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: makeOpenPositionInstructions.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromLiquidity<T extends TxVersion>(\r\n    props: IncreasePositionFromLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      liquidity,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountMaxA,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountMaxB,\r\n            }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.increasePositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromBase<T extends TxVersion>(\r\n    props: IncreasePositionFromBase<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      ownerPosition,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || (base === \"MintA\" ? baseAmount : otherAmountMax).isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || (base === \"MintA\" ? otherAmountMax : baseAmount).isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n            }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const ins = ClmmInstrument.increasePositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async decreaseLiquidity<T extends TxVersion>(\r\n    props: DecreaseLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo & Partial<ClosePositionExtInfo>>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      ownerInfo,\r\n      amountMinA,\r\n      amountMinB,\r\n      liquidity,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount: PublicKey | undefined;\r\n\r\n      if (itemReward.mint.address === poolInfo.mintA.address) ownerRewardAccount = ownerTokenAccountA;\r\n      else if (itemReward.mint.address === poolInfo.mintB.address) ownerRewardAccount = ownerTokenAccountB;\r\n      else {\r\n        const { account: _ownerRewardAccount, instructionParams: ownerRewardAccountInstructions } =\r\n          await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            createInfo: {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n        ownerRewardAccount = _ownerRewardAccount;\r\n        ownerRewardAccountInstructions && txBuilder.addInstruction(ownerRewardAccountInstructions);\r\n      }\r\n\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\r\n        \"cannot found target token accounts\",\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccountRawInfos,\r\n      );\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const nft2022 = (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(\r\n      TOKEN_2022_PROGRAM_ID,\r\n    );\r\n    const decreaseInsInfo = await ClmmInstrument.decreaseLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n        rewardAccounts,\r\n      },\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: decreaseInsInfo.instructions,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n    });\r\n\r\n    let extInfo = { ...decreaseInsInfo.address };\r\n    if (ownerInfo.closePosition) {\r\n      const closeInsInfo = await ClmmInstrument.closePositionInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: { wallet: this.scope.ownerPubKey },\r\n        ownerPosition,\r\n        nft2022,\r\n      });\r\n      txBuilder.addInstruction({\r\n        endInstructions: closeInsInfo.instructions,\r\n        endInstructionTypes: closeInsInfo.instructionTypes,\r\n      });\r\n      extInfo = { ...extInfo, ...closeInsInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: extInfo },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async lockPosition<T extends TxVersion>(props: LockPosition<T>): Promise<MakeTxData<ClmmLockAddress>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      poolProgramId = CLMM_PROGRAM_ID,\r\n      ownerPosition,\r\n      payer,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      getEphemeralSigners,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const lockIns = await ClmmInstrument.makeLockPositions({\r\n      programId,\r\n      authProgramId,\r\n      poolProgramId,\r\n      wallet: this.scope.ownerPubKey,\r\n      payer: payer ?? this.scope.ownerPubKey,\r\n      nftMint: ownerPosition.nftMint,\r\n      getEphemeralSigners,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n\r\n    txBuilder.addInstruction(lockIns);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: lockIns.address,\r\n    }) as Promise<MakeTxData<ClmmLockAddress>>;\r\n  }\r\n\r\n  public async harvestLockPosition<T extends TxVersion>(props: HarvestLockPosition<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      clmmProgram = CLMM_PROGRAM_ID,\r\n      poolKeys: propPoolKeys,\r\n      lockData,\r\n      ownerInfo = { useSOLBalance: true },\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(lockData.poolId.toString()));\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const positionData = await this.scope.connection.getAccountInfo(lockData.positionId);\r\n    if (!positionData) this.logger.logWithError(\"position not found\", lockData.positionId);\r\n    const position = PositionInfoLayout.decode(positionData!.data);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintA.programId,\r\n        mint: new PublicKey(poolKeys.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintB.programId,\r\n        mint: new PublicKey(poolKeys.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolKeys.rewardInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n      if (!ownerRewardAccount) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(itemReward.mint.programId),\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n        });\r\n        ownerRewardAccount = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockData.lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(this.scope.ownerPubKey, lockData.lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickLower,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickUpper,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayLowerStartIndex,\r\n    );\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayUpperStartIndex,\r\n    );\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      position.tickLower,\r\n      position.tickUpper,\r\n    );\r\n\r\n    const rewardAccountsFullInfo: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n      rewardAccountsFullInfo.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const harvestLockIns = await ClmmInstrument.harvestLockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      lockPositionId,\r\n      clmmProgram,\r\n      lockOwner: this.scope.ownerPubKey,\r\n      lockNftMint: lockData.lockNftMint,\r\n      lockNftAccount,\r\n      positionNftAccount: lockData.nftAccount,\r\n      positionId: lockData.positionId,\r\n      poolId: lockData.poolId,\r\n      protocolPosition,\r\n      vaultA: new PublicKey(poolKeys.vault.A),\r\n      vaultB: new PublicKey(poolKeys.vault.B),\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      userVaultA: ownerTokenAccountA!,\r\n      userVaultB: ownerTokenAccountB!,\r\n      mintA: new PublicKey(poolKeys.mintA.address),\r\n      mintB: new PublicKey(poolKeys.mintB.address),\r\n      rewardAccounts: rewardAccountsFullInfo,\r\n      exTickArrayBitmap: getPdaExBitmapAccount(clmmProgram, lockData.poolId).publicKey,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [harvestLockIns],\r\n      instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async closePosition<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerPosition,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    txVersion: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T, ClosePositionExtInfo>> {\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.closePositionInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: { wallet: this.scope.ownerPubKey },\r\n      ownerPosition,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.addInstruction(ins).versionBuild<ClosePositionExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ClosePositionExtInfo>>;\r\n  }\r\n\r\n  public async initReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardParams<T>): Promise<MakeTxData<T, InitRewardExtInfo>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const rewardMintUseSOLBalance =\r\n      ownerInfo.useSOLBalance && rewardInfo.mint.address.toString() === WSOLMint.toString();\r\n    const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo.mint.address),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: new BN(\r\n              new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                ? _baseRewardAmount.toFixed(0)\r\n                : _baseRewardAmount.add(1).toFixed(0),\r\n            ),\r\n          }\r\n          : undefined,\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.initRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        programId: new PublicKey(rewardInfo.mint.programId),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<InitRewardExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, InitRewardExtInfo>>;\r\n  }\r\n\r\n  public async initRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n    }\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardInfo of rewardInfos) {\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                  ? _baseRewardAmount.toFixed(0)\r\n                  : _baseRewardAmount.add(1).toFixed(0),\r\n              ),\r\n            }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.initRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          programId: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n      txBuilder.addInstruction(insInfo);\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: rewardInfo.programId,\r\n        mint: rewardInfo.mint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: new BN(\r\n              new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n              )\r\n                ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                : rewardInfo.perSecond\r\n                  .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                  .add(1)\r\n                  .toFixed(0),\r\n            ),\r\n          }\r\n          : undefined,\r\n\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.setRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        mint: rewardInfo.mint,\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                  rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n                )\r\n                  ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                  : rewardInfo.perSecond\r\n                    .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                    .add(1)\r\n                    .toFixed(0),\r\n              ),\r\n            }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.setRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMint,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: CollectRewardParams<T>): Promise<MakeTxData<{ address: Record<string, PublicKey> }>> {\r\n    const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n    if (!rewardInfo) this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo!.mint.programId),\r\n        mint: rewardMint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.collectRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardMint,\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<{ address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectRewards({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMints,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CollectRewardsParams): Promise<MakeTransaction> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardMint of rewardMints) {\r\n      const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n      if (!rewardInfo) {\r\n        this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n        continue;\r\n      }\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: rewardMint,\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n      const insInfo = ClmmInstrument.collectRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n\r\n        rewardMint,\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = { ...address, ...insInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address });\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    inputMint: string | PublicKey;\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = inputMint.toString() === poolInfo.mintA.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = baseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? amountIn : 0,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? 0 : amountIn,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        inputMint: new PublicKey(inputMint),\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swapBaseOut<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    outputMint: string | PublicKey;\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = outputMint.toString() === poolInfo.mintB.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 =\r\n        outputMint.toString() === poolInfo.mintB.address\r\n          ? MIN_SQRT_PRICE_X64.add(new BN(1))\r\n          : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? amountInMax : 0,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? 0 : amountInMax,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseOutInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        outputMint: new PublicKey(outputMint),\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>({\r\n    allPoolInfo,\r\n    allPositions,\r\n    lockInfo,\r\n    ownerInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    programId,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n  }: HarvestAllRewardsParams<T>): Promise<MakeMultiTxData<T>> {\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccountRawInfos) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, programId).publicKey;\r\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      } else {\r\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      }\r\n    }\r\n    const allNftMints = Object.values(allPositions)\r\n      .flat()\r\n      .map((p) => p.nftMint);\r\n\r\n    const mintData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      allNftMints.map((n) => ({ pubkey: n })),\r\n    );\r\n    const record: Record<string, PublicKey | null> = {};\r\n    mintData.forEach((data) => {\r\n      record[data.pubkey.toBase58()] = data?.accountInfo?.owner ?? null;\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    for (const itemInfo of Object.values(allPoolInfo)) {\r\n      if (allPositions[itemInfo.id] === undefined) continue;\r\n      if (\r\n        !allPositions[itemInfo.id].find(\r\n          (i) => !i.liquidity.isZero() || i.rewardInfos.find((ii) => !ii.rewardAmountOwed.isZero()),\r\n        )\r\n      )\r\n        continue;\r\n\r\n      const poolInfo = itemInfo;\r\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n      let ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.address];\r\n      if (!ownerTokenAccountA) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: poolInfo.mintA.programId,\r\n          mint: new PublicKey(poolInfo.mintA.address),\r\n          notUseTokenAccount: mintAUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !mintAUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerTokenAccountA = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      let ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.address];\r\n      if (!ownerTokenAccountB) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: poolInfo.mintB.programId,\r\n          mint: new PublicKey(poolInfo.mintB.address),\r\n          notUseTokenAccount: mintBUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !mintBUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerTokenAccountB = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[poolInfo.mintA.address] = ownerTokenAccountA;\r\n      ownerMintToAccount[poolInfo.mintB.address] = ownerTokenAccountB;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n\r\n      for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          });\r\n          ownerRewardAccount = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount!);\r\n      }\r\n\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n\r\n      const rewardAccountsFullInfo: {\r\n        poolRewardVault: PublicKey;\r\n        ownerRewardVault: PublicKey;\r\n        rewardMint: PublicKey;\r\n      }[] = [];\r\n      for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n        rewardAccountsFullInfo.push({\r\n          poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n          ownerRewardVault: rewardAccounts[i],\r\n          rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n        });\r\n      }\r\n\r\n      for (const itemPosition of allPositions[itemInfo.id]) {\r\n        const lockData = lockInfo?.[itemInfo.id]?.[itemPosition.nftMint.toBase58()];\r\n        if (lockData) {\r\n          const lockNftAccount = getATAAddress(\r\n            this.scope.ownerPubKey,\r\n            lockData.lockNftMint,\r\n            TOKEN_PROGRAM_ID,\r\n          ).publicKey;\r\n\r\n          const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickLower,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickUpper,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayLowerStartIndex,\r\n          );\r\n          const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayUpperStartIndex,\r\n          );\r\n          const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            itemPosition.tickLower,\r\n            itemPosition.tickUpper,\r\n          );\r\n          const lockPositionId = getPdaLockClPositionIdV2(CLMM_LOCK_PROGRAM_ID, lockData.lockNftMint).publicKey;\r\n          const harvestLockIns = ClmmInstrument.harvestLockPositionInstructionV2({\r\n            programId: CLMM_LOCK_PROGRAM_ID,\r\n            auth: CLMM_LOCK_AUTH_ID,\r\n            lockPositionId,\r\n            clmmProgram: CLMM_PROGRAM_ID,\r\n            lockOwner: this.scope.ownerPubKey,\r\n            lockNftMint: lockData.lockNftMint,\r\n            lockNftAccount,\r\n            positionNftAccount: lockData.nftAccount,\r\n            positionId: lockData.positionId,\r\n            poolId: lockData.poolId,\r\n            protocolPosition,\r\n            vaultA: new PublicKey(poolKeys.vault.A),\r\n            vaultB: new PublicKey(poolKeys.vault.B),\r\n            tickArrayLower,\r\n            tickArrayUpper,\r\n            userVaultA: ownerTokenAccountA!,\r\n            userVaultB: ownerTokenAccountB!,\r\n            mintA: new PublicKey(poolKeys.mintA.address),\r\n            mintB: new PublicKey(poolKeys.mintB.address),\r\n            rewardAccounts: rewardAccountsFullInfo,\r\n            exTickArrayBitmap: getPdaExBitmapAccount(CLMM_PROGRAM_ID, lockData.poolId).publicKey,\r\n          });\r\n          txBuilder.addInstruction({\r\n            instructions: [harvestLockIns],\r\n            instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n            lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n          });\r\n        } else {\r\n          const insData = ClmmInstrument.decreaseLiquidityInstructions({\r\n            poolInfo,\r\n            poolKeys,\r\n            ownerPosition: itemPosition,\r\n            ownerInfo: {\r\n              wallet: this.scope.ownerPubKey,\r\n              tokenAccountA: ownerTokenAccountA,\r\n              tokenAccountB: ownerTokenAccountB,\r\n              rewardAccounts,\r\n            },\r\n            liquidity: new BN(0),\r\n            amountMinA: new BN(0),\r\n            amountMinB: new BN(0),\r\n            nft2022: record[itemPosition.nftMint.toBase58()]?.equals(TOKEN_2022_PROGRAM_ID),\r\n          });\r\n          txBuilder.addInstruction(insData);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async getWhiteListMint({ programId }: { programId: PublicKey }): Promise<PublicKey[]> {\r\n    const accountInfo = await this.scope.connection.getAccountInfo(getPdaOperationAccount(programId).publicKey);\r\n    if (!accountInfo) return [];\r\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data);\r\n    return whitelistMintsInfo.whitelistMints.filter((i) => !i.equals(PublicKey.default));\r\n  }\r\n\r\n  public async getOwnerPositionInfo({\r\n    programId,\r\n  }: {\r\n    programId: string | PublicKey;\r\n  }): Promise<ReturnType<typeof PositionInfoLayout.decode>[]> {\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\r\n    const allPositionKey = balanceMints.map(\r\n      (acc) => getPdaPersonalPositionAddress(new PublicKey(programId), acc.accountInfo.mint).publicKey,\r\n    );\r\n\r\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\r\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\r\n    accountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = PositionInfoLayout.decode(positionRes.data);\r\n      allPosition.push(position);\r\n    });\r\n\r\n    return allPosition;\r\n  }\r\n\r\n  public async getRpcClmmPoolInfo({ poolId }: { poolId: string | PublicKey }): Promise<ClmmRpcData> {\r\n    return (await this.getRpcClmmPoolInfos({ poolIds: [poolId] }))[String(poolId)];\r\n  }\r\n\r\n  public async getRpcClmmPoolInfos({\r\n    poolIds,\r\n    config,\r\n  }: {\r\n    poolIds: (string | PublicKey)[];\r\n    config?: { batchRequest?: boolean; chunkCount?: number };\r\n  }): Promise<{\r\n    [poolId: string]: ClmmRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n    const returnData: {\r\n      [poolId: string]: ClmmRpcData;\r\n    } = {};\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = PoolInfoLayout.decode(item.accountInfo.data);\r\n      const currentPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n        rpc.sqrtPriceX64,\r\n        rpc.mintDecimalsA,\r\n        rpc.mintDecimalsB,\r\n      ).toNumber();\r\n\r\n      returnData[String(poolIds[i])] = {\r\n        ...rpc,\r\n        currentPrice,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  public async getComputeClmmPoolInfos({\r\n    clmmPoolsRpcInfo,\r\n    mintInfos,\r\n  }: {\r\n    clmmPoolsRpcInfo: Record<\r\n      string,\r\n      ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number; programId: PublicKey }\r\n    >;\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n  }): Promise<{\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const configSet = new Set(Object.keys(clmmPoolsRpcInfo).map((p) => clmmPoolsRpcInfo[p].ammConfig.toBase58()));\r\n    const res = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      Array.from(configSet).map((s) => ({ pubkey: new PublicKey(s) })),\r\n    );\r\n    const clmmConfigs: Record<string, ReturnType<typeof ClmmConfigLayout.decode>> = {};\r\n    res.forEach((acc) => {\r\n      if (!acc.accountInfo) return;\r\n      clmmConfigs[acc.pubkey.toBase58()] = ClmmConfigLayout.decode(acc.accountInfo.data);\r\n    });\r\n    const computeClmmPoolInfo = await PoolUtils.fetchComputeMultipleClmmInfo({\r\n      connection: this.scope.connection,\r\n      rpcDataMap: clmmPoolsRpcInfo,\r\n      poolList: Object.keys(clmmPoolsRpcInfo).map((poolId) => {\r\n        const [mintA, mintB] = [clmmPoolsRpcInfo[poolId].mintA.toBase58(), clmmPoolsRpcInfo[poolId].mintB.toBase58()];\r\n        return {\r\n          id: poolId,\r\n          programId: clmmPoolsRpcInfo[poolId].programId.toBase58(),\r\n          mintA: toApiV3Token({\r\n            address: mintA,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsA,\r\n            programId: mintInfos[mintA].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          mintB: toApiV3Token({\r\n            address: mintB,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsB,\r\n            programId: mintInfos[mintB].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          price: clmmPoolsRpcInfo[poolId].currentPrice,\r\n          config: {\r\n            ...clmmConfigs[clmmPoolsRpcInfo[poolId].ammConfig.toBase58()],\r\n            id: clmmPoolsRpcInfo[poolId].ammConfig.toBase58(),\r\n\r\n            fundFeeRate: 0,\r\n            description: \"\",\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        };\r\n      }),\r\n    });\r\n\r\n    const computePoolTickData = await PoolUtils.fetchMultiplePoolTickArrays({\r\n      connection: this.scope.connection,\r\n      poolKeys: Object.values(computeClmmPoolInfo),\r\n    });\r\n\r\n    return {\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n    };\r\n  }\r\n\r\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    computePoolInfo: ComputeClmmPoolInfo;\r\n    tickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const rpcData = await this.getRpcClmmPoolInfo({ poolId });\r\n\r\n    const mintSet = new Set([rpcData.mintA.toBase58(), rpcData.mintB.toBase58()]);\r\n\r\n    const mintInfos = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo: { [poolId]: rpcData },\r\n      mintInfos,\r\n    });\r\n    const vaultData = await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, [\r\n      { pubkey: rpcData.vaultA },\r\n      { pubkey: rpcData.vaultB },\r\n    ]);\r\n\r\n    const poolInfo = clmmComputeInfoToApiInfo(computeClmmPoolInfo[poolId]);\r\n\r\n    if (!vaultData[0].accountInfo || !vaultData[1].accountInfo) throw new Error(\"pool vault data not found\");\r\n    poolInfo.mintAmountA = Number(AccountLayout.decode(vaultData[0].accountInfo.data).amount.toString());\r\n    poolInfo.mintAmountB = Number(AccountLayout.decode(vaultData[1].accountInfo?.data).amount.toString());\r\n\r\n    const poolKeys: ClmmKeys = {\r\n      ...computeClmmPoolInfo[poolId],\r\n      exBitmapAccount: computeClmmPoolInfo[poolId].exBitmapAccount.toBase58(),\r\n      observationId: computeClmmPoolInfo[poolId].observationId.toBase58(),\r\n      id: poolId,\r\n      programId: rpcData.programId.toBase58(),\r\n      openTime: rpcData.startTime.toString(),\r\n      vault: {\r\n        A: rpcData.vaultA.toBase58(),\r\n        B: rpcData.vaultB.toBase58(),\r\n      },\r\n      config: poolInfo.config,\r\n      rewardInfos: computeClmmPoolInfo[poolId].rewardInfos\r\n        .filter((r) => !r.tokenVault.equals(PublicKey.default))\r\n        .map((r) => ({\r\n          mint: toApiV3Token({ address: r.tokenMint.toBase58(), programId: TOKEN_PROGRAM_ID.toBase58(), decimals: 10 }),\r\n          vault: r.tokenVault.toBase58(),\r\n        })),\r\n    };\r\n    return { poolInfo, poolKeys, computePoolInfo: computeClmmPoolInfo[poolId], tickData: computePoolTickData };\r\n  }\r\n}\r\n","import { AccountInfo, PublicKey } from \"@solana/web3.js\";\r\nimport { ApiV3PoolInfoStandardItemCpmm, CpmmKeys } from \"../../api/type\";\r\nimport {\r\n  AccountLayout,\r\n  createAssociatedTokenAccountIdempotentInstruction,\r\n  getAssociatedTokenAddressSync,\r\n  NATIVE_MINT,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { BN_ZERO } from \"@/common/bignumber\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport { WSOLMint } from \"@/common/pubKey\";\r\nimport { MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { Percent } from \"../../module\";\r\nimport { CurveCalculator } from \"./curve/calculator\";\r\n\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport {\r\n  addComputeBudget,\r\n  fetchMultipleMintInfos,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getTransferAmountFeeV2,\r\n  LOCK_CPMM_AUTH,\r\n  LOCK_CPMM_PROGRAM,\r\n} from \"@/common\";\r\nimport { GetTransferAmountFee, ReturnTypeFetchMultipleMintInfos } from \"../../raydium/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { toApiV3Token, toFeeConfig } from \"../token\";\r\nimport {\r\n  makeCreateCpmmPoolInInstruction,\r\n  makeDepositCpmmInInstruction,\r\n  makeSwapCpmmBaseInInstruction,\r\n  makeSwapCpmmBaseOutInstruction,\r\n  makeWithdrawCpmmInInstruction,\r\n  makeCpmmLockInstruction,\r\n  collectCpFeeInstruction,\r\n} from \"./instruction\";\r\nimport { CpmmConfigInfoLayout, CpmmPoolInfoLayout } from \"./layout\";\r\nimport { getCreatePoolKeys, getPdaObservationId, getPdaPoolAuthority } from \"./pda\";\r\nimport {\r\n  AddCpmmLiquidityParams,\r\n  ComputePairAmountParams,\r\n  CpmmComputeData,\r\n  CpmmLockExtInfo,\r\n  CpmmRpcData,\r\n  CpmmSwapParams,\r\n  CreateCpmmPoolAddress,\r\n  CreateCpmmPoolParam,\r\n  LockCpmmLpParams,\r\n  HarvestLockCpmmLpParams,\r\n  WithdrawCpmmLiquidityParams,\r\n  RpcPoolInfoAccounts,\r\n} from \"./type\";\r\nimport { getCpLockPda } from \"./pda\";\r\n\r\nexport default class CpmmModule extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async load(): Promise<void> {\r\n    this.checkDisabled();\r\n  }\r\n\r\n  public async getCpmmPoolKeys(poolId: string): Promise<CpmmKeys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as CpmmKeys[])[0];\r\n  }\r\n\r\n  async getRpcPoolInfo(\r\n    poolId?: string,\r\n    accountInfos?: RpcPoolInfoAccounts,\r\n    fetchConfigInfo?: boolean,\r\n  ): Promise<CpmmRpcData> {\r\n    // 1. Validação prévia e preparação dos dados\r\n    if (!poolId && !accountInfos?.marketAccount) {\r\n      throw new Error(\"Either poolId or accountInfos.marketAccount must be provided\");\r\n    }\r\n\r\n    // 2. Fetch pool account\r\n    const poolAccount = poolId\r\n      ? (await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, [{ pubkey: new PublicKey(poolId) }]))[0]\r\n      : accountInfos!.marketAccount;\r\n\r\n    if (!poolAccount?.accountInfo) {\r\n      const identifier = poolId || accountInfos?.marketAccount?.pubkey?.toBase58() || \"unknown\";\r\n      throw new Error(`Pool account not found: ${identifier}`);\r\n    }\r\n\r\n    // 3. Decode pool info uma única vez\r\n    const poolInfo = {\r\n      ...CpmmPoolInfoLayout.decode(poolAccount.accountInfo.data),\r\n      programId: poolAccount.accountInfo.owner,\r\n    };\r\n\r\n    // 4. Preparar todas as chaves públicas necessárias de uma vez\r\n    const accountsToFetch: { pubkey: PublicKey }[] = [];\r\n    const vaultKeys = [poolInfo.vaultA, poolInfo.vaultB];\r\n\r\n    if (poolId) {\r\n      // Adicionar vaults\r\n      accountsToFetch.push(...vaultKeys.map((key) => ({ pubkey: new PublicKey(key) })));\r\n\r\n      // Adicionar config se necessário\r\n      if (fetchConfigInfo) {\r\n        accountsToFetch.push({ pubkey: new PublicKey(poolInfo.configId) });\r\n      }\r\n    }\r\n\r\n    // 5. Fetch único para todas as contas necessárias (quando usando poolId)\r\n    let fetchedAccounts: any[] = [];\r\n    if (poolId && accountsToFetch.length > 0) {\r\n      fetchedAccounts = await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, accountsToFetch);\r\n    }\r\n\r\n    // 6. Processar config info\r\n    let configInfo: ReturnType<typeof CpmmConfigInfoLayout.decode> | undefined;\r\n    if (fetchConfigInfo) {\r\n      const configAccount = poolId\r\n        ? fetchedAccounts[fetchedAccounts.length - 1] // Config é sempre o último quando fetchConfigInfo=true\r\n        : accountInfos?.configState;\r\n\r\n      if (!configAccount?.accountInfo) {\r\n        throw new Error(`Config account not found: ${poolInfo.configId}`);\r\n      }\r\n      configInfo = CpmmConfigInfoLayout.decode(configAccount.accountInfo.data);\r\n    }\r\n\r\n    // 7. Processar vault accounts\r\n    const vaultAInfo = poolId ? fetchedAccounts[0]?.accountInfo : accountInfos?.vaultAInfo?.accountInfo;\r\n\r\n    const vaultBInfo = poolId ? fetchedAccounts[1]?.accountInfo : accountInfos?.vaultBInfo?.accountInfo;\r\n\r\n    if (!vaultAInfo || !vaultBInfo) {\r\n      throw new Error(`Vault accounts not found: A=${poolInfo.vaultA}, B=${poolInfo.vaultB}`);\r\n    }\r\n\r\n    // 8. Decodificar vault amounts (pode ser otimizado com cache se necessário)\r\n    const vaultAAmount = new BN(AccountLayout.decode(vaultAInfo.data).amount.toString());\r\n    const vaultBAmount = new BN(AccountLayout.decode(vaultBInfo.data).amount.toString());\r\n\r\n    // 9. Calcular reserves\r\n    const baseReserve = vaultAAmount.sub(poolInfo.protocolFeesMintA).sub(poolInfo.fundFeesMintA);\r\n\r\n    const quoteReserve = vaultBAmount.sub(poolInfo.protocolFeesMintB).sub(poolInfo.fundFeesMintB);\r\n\r\n    // 10. Calcular preço de forma mais eficiente\r\n    const baseDecimalFactor = new Decimal(10).pow(poolInfo.mintDecimalA);\r\n    const quoteDecimalFactor = new Decimal(10).pow(poolInfo.mintDecimalB);\r\n\r\n    const normalizedBase = new Decimal(baseReserve.toString()).div(baseDecimalFactor);\r\n    const normalizedQuote = new Decimal(quoteReserve.toString()).div(quoteDecimalFactor);\r\n\r\n    const poolPrice = normalizedBase.isZero() ? new Decimal(0) : normalizedQuote.div(normalizedBase);\r\n\r\n    return {\r\n      ...poolInfo,\r\n      baseReserve,\r\n      quoteReserve,\r\n      vaultAAmount,\r\n      vaultBAmount,\r\n      configInfo,\r\n      poolPrice,\r\n    };\r\n  }\r\n\r\n  public async getRpcPoolInfos(\r\n    poolIds: string[],\r\n    fetchConfigInfo?: boolean,\r\n  ): Promise<{\r\n    [poolId: string]: CpmmRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n    );\r\n    const poolInfos: { [poolId: string]: ReturnType<typeof CpmmPoolInfoLayout.decode> & { programId: PublicKey } } = {};\r\n\r\n    const needFetchConfigId = new Set<string>();\r\n    const needFetchVaults: PublicKey[] = [];\r\n\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item.accountInfo === null) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = CpmmPoolInfoLayout.decode(item.accountInfo.data);\r\n      poolInfos[String(poolIds[i])] = {\r\n        ...rpc,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n      needFetchConfigId.add(String(rpc.configId));\r\n\r\n      needFetchVaults.push(rpc.vaultA, rpc.vaultB);\r\n    }\r\n\r\n    const configInfo: { [configId: string]: ReturnType<typeof CpmmConfigInfoLayout.decode> } = {};\r\n\r\n    if (fetchConfigInfo) {\r\n      const configIds = [...needFetchConfigId];\r\n      const configState = await getMultipleAccountsInfoWithCustomFlags(\r\n        this.scope.connection,\r\n        configIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      );\r\n\r\n      for (let i = 0; i < configIds.length; i++) {\r\n        const configItemInfo = configState[i].accountInfo;\r\n        if (configItemInfo === null) throw Error(\"fetch pool config error: \" + configIds[i]);\r\n        configInfo[configIds[i]] = CpmmConfigInfoLayout.decode(configItemInfo.data);\r\n      }\r\n    }\r\n\r\n    const vaultInfo: { [vaultId: string]: BN } = {};\r\n\r\n    const vaultAccountInfo = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      needFetchVaults.map((i) => ({ pubkey: new PublicKey(i) })),\r\n    );\r\n\r\n    for (let i = 0; i < needFetchVaults.length; i++) {\r\n      const vaultItemInfo = vaultAccountInfo[i].accountInfo;\r\n      if (vaultItemInfo === null) throw Error(\"fetch vault info error: \" + needFetchVaults[i]);\r\n\r\n      vaultInfo[String(needFetchVaults[i])] = new BN(AccountLayout.decode(vaultItemInfo.data).amount.toString());\r\n    }\r\n\r\n    const returnData: { [poolId: string]: CpmmRpcData } = {};\r\n\r\n    for (const [id, info] of Object.entries(poolInfos)) {\r\n      const baseReserve = vaultInfo[info.vaultA.toString()].sub(info.protocolFeesMintA).sub(info.fundFeesMintA);\r\n      const quoteReserve = vaultInfo[info.vaultB.toString()].sub(info.protocolFeesMintB).sub(info.fundFeesMintB);\r\n      returnData[id] = {\r\n        ...info,\r\n        baseReserve,\r\n        quoteReserve,\r\n        vaultAAmount: vaultInfo[info.vaultA.toString()],\r\n        vaultBAmount: vaultInfo[info.vaultB.toString()],\r\n        configInfo: configInfo[info.configId.toString()],\r\n        poolPrice: new Decimal(quoteReserve.toString())\r\n          .div(new Decimal(10).pow(info.mintDecimalB))\r\n          .div(new Decimal(baseReserve.toString()).div(new Decimal(10).pow(info.mintDecimalA))),\r\n      };\r\n    }\r\n\r\n    return returnData;\r\n  }\r\n\r\n  public toComputePoolInfos({\r\n    pools,\r\n    mintInfos,\r\n  }: {\r\n    pools: Record<string, CpmmRpcData>;\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n  }): Record<string, CpmmComputeData> {\r\n    return Object.keys(pools).reduce((acc, cur) => {\r\n      const pool = pools[cur];\r\n      const [mintA, mintB] = [pool.mintA.toBase58(), pool.mintB.toBase58()];\r\n\r\n      return {\r\n        ...acc,\r\n        [cur]: {\r\n          ...pool,\r\n          id: new PublicKey(cur),\r\n          configInfo: pool.configInfo!,\r\n          version: 7 as const,\r\n          authority: getPdaPoolAuthority(pool.programId).publicKey,\r\n          mintA: toApiV3Token({\r\n            address: mintA,\r\n            decimals: pool.mintDecimalA,\r\n            programId: pool.mintProgramA.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          mintB: toApiV3Token({\r\n            address: mintB,\r\n            decimals: pool.mintDecimalB,\r\n            programId: pool.mintProgramB.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n        },\r\n      };\r\n    }, {} as Record<string, CpmmComputeData>);\r\n  }\r\n\r\n  public async getPoolInfoFromRpc(\r\n    poolId: string,\r\n    rpcData?: CpmmRpcData,\r\n    mintInfos?: ReturnTypeFetchMultipleMintInfos,\r\n  ): Promise<{\r\n    poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n    poolKeys: CpmmKeys;\r\n    rpcData: CpmmRpcData;\r\n  }> {\r\n    rpcData = rpcData || (await this.getRpcPoolInfo(poolId, undefined, true));\r\n    mintInfos =\r\n      mintInfos ||\r\n      (await fetchMultipleMintInfos({\r\n        connection: this.scope.connection,\r\n        mints: [rpcData.mintA, rpcData.mintB],\r\n      }));\r\n\r\n    const mintA = toApiV3Token({\r\n      address: rpcData.mintA.toBase58(),\r\n      decimals: rpcData.mintDecimalA,\r\n      programId: rpcData.mintProgramA.toBase58(),\r\n      extensions: {\r\n        feeConfig: mintInfos[rpcData.mintA.toBase58()].feeConfig\r\n          ? toFeeConfig(mintInfos[rpcData.mintA.toBase58()].feeConfig)\r\n          : undefined,\r\n      },\r\n    });\r\n    const mintB = toApiV3Token({\r\n      address: rpcData.mintB.toBase58(),\r\n      decimals: rpcData.mintDecimalB,\r\n      programId: rpcData.mintProgramB.toBase58(),\r\n      extensions: {\r\n        feeConfig: mintInfos[rpcData.mintB.toBase58()].feeConfig\r\n          ? toFeeConfig(mintInfos[rpcData.mintB.toBase58()].feeConfig)\r\n          : undefined,\r\n      },\r\n    });\r\n\r\n    const lpMint = toApiV3Token({\r\n      address: rpcData.mintLp.toBase58(),\r\n      decimals: rpcData.lpDecimals,\r\n      programId: TOKEN_PROGRAM_ID.toBase58(),\r\n    });\r\n\r\n    const configInfo = {\r\n      id: rpcData.configId.toBase58(),\r\n      index: rpcData.configInfo!.index,\r\n      protocolFeeRate: rpcData.configInfo!.protocolFeeRate.toNumber(),\r\n      tradeFeeRate: rpcData.configInfo!.tradeFeeRate.toNumber(),\r\n      fundFeeRate: rpcData.configInfo!.fundFeeRate.toNumber(),\r\n      createPoolFee: rpcData.configInfo!.createPoolFee.toString(),\r\n    };\r\n\r\n    const mockRewardData = {\r\n      volume: 0,\r\n      volumeQuote: 0,\r\n      volumeFee: 0,\r\n      apr: 0,\r\n      feeApr: 0,\r\n      priceMin: 0,\r\n      priceMax: 0,\r\n      rewardApr: [],\r\n    };\r\n\r\n    return {\r\n      poolInfo: {\r\n        programId: rpcData.programId.toBase58(),\r\n        id: poolId,\r\n        type: \"Standard\",\r\n        lpMint,\r\n        lpPrice: 0,\r\n        lpAmount: rpcData.lpAmount.toNumber(),\r\n        config: configInfo,\r\n        mintA,\r\n        mintB,\r\n        rewardDefaultInfos: [],\r\n        rewardDefaultPoolInfos: \"Ecosystem\",\r\n        price: rpcData.poolPrice.toNumber(),\r\n        mintAmountA: new Decimal(rpcData.vaultAAmount.toString()).div(10 ** mintA.decimals).toNumber(),\r\n        mintAmountB: new Decimal(rpcData.vaultBAmount.toString()).div(10 ** mintB.decimals).toNumber(),\r\n        feeRate: rpcData.configInfo!.tradeFeeRate.toNumber(),\r\n        openTime: rpcData.openTime.toString(),\r\n        tvl: 0,\r\n        burnPercent: 0,\r\n\r\n        day: mockRewardData,\r\n        week: mockRewardData,\r\n        month: mockRewardData,\r\n        pooltype: [],\r\n\r\n        farmUpcomingCount: 0,\r\n        farmOngoingCount: 0,\r\n        farmFinishedCount: 0,\r\n      },\r\n      poolKeys: {\r\n        programId: rpcData.programId.toBase58(),\r\n        id: poolId,\r\n        mintA,\r\n        mintB,\r\n        openTime: rpcData.openTime.toString(),\r\n        vault: { A: rpcData.vaultA.toBase58(), B: rpcData.vaultB.toBase58() },\r\n        authority: getPdaPoolAuthority(rpcData.programId).publicKey.toBase58(),\r\n        mintLp: lpMint,\r\n        config: configInfo,\r\n        observationId: getPdaObservationId(rpcData.programId, new PublicKey(poolId)).publicKey.toBase58(),\r\n      },\r\n      rpcData,\r\n    };\r\n  }\r\n\r\n  public async createPool<T extends TxVersion>({\r\n    poolId,\r\n    programId,\r\n    poolFeeAccount,\r\n    startTime,\r\n    ownerInfo,\r\n    associatedOnly = false,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    feeConfig,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    ...params\r\n  }: CreateCpmmPoolParam<T>): Promise<MakeTxData<T, { address: CreateCpmmPoolAddress }>> {\r\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\r\n    const isFront = new BN(new PublicKey(params.mintA.address).toBuffer()).lte(\r\n      new BN(new PublicKey(params.mintB.address).toBuffer()),\r\n    );\r\n\r\n    const [mintA, mintB] = isFront ? [params.mintA, params.mintB] : [params.mintB, params.mintA];\r\n    const [mintAAmount, mintBAmount] = isFront\r\n      ? [params.mintAAmount, params.mintBAmount]\r\n      : [params.mintBAmount, params.mintAAmount];\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && mintA.address === NATIVE_MINT.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && mintB.address === NATIVE_MINT.toBase58();\r\n    const [mintAPubkey, mintBPubkey] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const { account: userVaultA, instructionParams: userVaultAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintAPubkey,\r\n        tokenProgram: mintA.programId,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintAUseSOLBalance\r\n          ? {\r\n              payer: payer!,\r\n              amount: mintAAmount,\r\n            }\r\n          : undefined,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(userVaultAInstruction || {});\r\n    const { account: userVaultB, instructionParams: userVaultBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: new PublicKey(mintB.address),\r\n        tokenProgram: mintB.programId,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n              payer: payer!,\r\n              amount: mintBAmount,\r\n            }\r\n          : undefined,\r\n\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(userVaultBInstruction || {});\r\n\r\n    if (userVaultA === undefined || userVaultB === undefined) throw Error(\"you don't has some token account\");\r\n\r\n    const poolKeys = getCreatePoolKeys({\r\n      poolId,\r\n      programId,\r\n      configId: new PublicKey(feeConfig.id),\r\n      mintA: mintAPubkey,\r\n      mintB: mintBPubkey,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeCreateCpmmPoolInInstruction(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          new PublicKey(feeConfig.id),\r\n          poolKeys.authority,\r\n          poolKeys.poolId,\r\n          mintAPubkey,\r\n          mintBPubkey,\r\n          poolKeys.lpMint,\r\n          userVaultA,\r\n          userVaultB,\r\n          getATAAddress(this.scope.ownerPubKey, poolKeys.lpMint).publicKey,\r\n          poolKeys.vaultA,\r\n          poolKeys.vaultB,\r\n          poolFeeAccount,\r\n          new PublicKey(mintA.programId ?? TOKEN_PROGRAM_ID),\r\n          new PublicKey(mintB.programId ?? TOKEN_PROGRAM_ID),\r\n          poolKeys.observationId,\r\n          mintAAmount,\r\n          mintBAmount,\r\n          startTime,\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.CpmmCreatePool],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: {\r\n        address: { ...poolKeys, mintA, mintB, programId, poolFeeAccount, feeConfig },\r\n      },\r\n    }) as Promise<MakeTxData<T, { address: CreateCpmmPoolAddress }>>;\r\n  }\r\n\r\n  public async addLiquidity<T extends TxVersion>(params: AddCpmmLiquidityParams<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      inputAmount,\r\n      baseIn,\r\n      slippage,\r\n      computeResult,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      config,\r\n      txVersion,\r\n      feePayer,\r\n    } = params;\r\n\r\n    if (this.scope.availability.addStandardPosition === false)\r\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\r\n\r\n    if (inputAmount.isZero())\r\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA\", {\r\n        amountInA: inputAmount.toString(),\r\n      });\r\n    const { account } = this.scope;\r\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\r\n      // default\r\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\r\n      // custom\r\n      ...config,\r\n    };\r\n    const rpcPoolData = computeResult ? undefined : await this.getRpcPoolInfo(poolInfo.id);\r\n\r\n    const {\r\n      liquidity,\r\n      inputAmountFee,\r\n      anotherAmount: _anotherAmount,\r\n    } = computeResult ||\r\n    this.computePairAmount({\r\n      poolInfo: {\r\n        ...poolInfo,\r\n        lpAmount: new Decimal(rpcPoolData!.lpAmount.toString()).div(10 ** poolInfo.lpMint.decimals).toNumber(),\r\n      },\r\n      baseReserve: rpcPoolData!.baseReserve,\r\n      quoteReserve: rpcPoolData!.quoteReserve,\r\n      slippage: new Percent(0),\r\n      baseIn,\r\n      epochInfo: await this.scope.fetchEpochInfo(),\r\n      amount: new Decimal(inputAmount.toString()).div(\r\n        10 ** (baseIn ? poolInfo.mintA.decimals : poolInfo.mintB.decimals),\r\n      ),\r\n    });\r\n\r\n    const anotherAmount = _anotherAmount.amount;\r\n    const mintAUseSOLBalance = poolInfo.mintA.address === NATIVE_MINT.toString();\r\n    const mintBUseSOLBalance = poolInfo.mintB.address === NATIVE_MINT.toString();\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const { account: tokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || (baseIn ? inputAmount : anotherAmount).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: baseIn ? inputAmount : anotherAmount,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: false,\r\n        checkCreateATAOwner,\r\n      });\r\n\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: tokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || (baseIn ? anotherAmount : inputAmount).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: baseIn ? anotherAmount : inputAmount,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: false,\r\n        checkCreateATAOwner,\r\n      });\r\n\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!tokenAccountA && !tokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\r\n    const lpTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n    });\r\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } = await account.handleTokenAccount({\r\n      side: \"out\",\r\n      amount: 0,\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n      tokenAccount: lpTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(lpInstruction);\r\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\r\n    const _slippage = new Percent(new BN(1)).sub(slippage);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeDepositCpmmInInstruction(\r\n          new PublicKey(poolInfo.programId),\r\n          this.scope.ownerPubKey,\r\n          new PublicKey(poolKeys.authority),\r\n          new PublicKey(poolInfo.id),\r\n          _lpTokenAccount!,\r\n          tokenAccountA!,\r\n          tokenAccountB!,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          mintA,\r\n          mintB,\r\n          new PublicKey(poolInfo.lpMint.address),\r\n\r\n          computeResult ? computeResult?.liquidity : _slippage.mul(liquidity).quotient,\r\n          baseIn ? inputAmountFee.amount : anotherAmount,\r\n          baseIn ? anotherAmount : inputAmountFee.amount,\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.CpmmAddLiquidity],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async withdrawLiquidity<T extends TxVersion>(params: WithdrawCpmmLiquidityParams<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      lpAmount,\r\n      slippage,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n      closeWsol = true,\r\n    } = params;\r\n\r\n    if (this.scope.availability.addStandardPosition === false)\r\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\r\n\r\n    const _slippage = new Percent(new BN(1)).sub(slippage);\r\n\r\n    const rpcPoolData = await this.getRpcPoolInfo(poolInfo.id);\r\n    const [amountMintA, amountMintB] = [\r\n      _slippage.mul(lpAmount.mul(rpcPoolData.baseReserve).div(rpcPoolData.lpAmount)).quotient,\r\n      _slippage.mul(lpAmount.mul(rpcPoolData.quoteReserve).div(rpcPoolData.lpAmount)).quotient,\r\n    ];\r\n\r\n    const epochInfo = await this.scope.fetchEpochInfo();\r\n    const [mintAAmountFee, mintBAmountFee] = [\r\n      getTransferAmountFeeV2(amountMintA, poolInfo.mintA.extensions.feeConfig, epochInfo, false),\r\n      getTransferAmountFeeV2(amountMintB, poolInfo.mintB.extensions.feeConfig, epochInfo, false),\r\n    ];\r\n\r\n    const { account } = this.scope;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const mintAUseSOLBalance = mintA.equals(WSOLMint);\r\n    const mintBUseSOLBalance = mintB.equals(WSOLMint);\r\n\r\n    let tokenAccountA: PublicKey | undefined = undefined;\r\n    let tokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !(mintAUseSOLBalance && closeWsol),\r\n        associatedOnly: mintAUseSOLBalance ? false : true,\r\n        checkCreateATAOwner: false,\r\n      });\r\n    tokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !(mintBUseSOLBalance && closeWsol),\r\n        associatedOnly: mintBUseSOLBalance ? false : true,\r\n        checkCreateATAOwner: false,\r\n      });\r\n    tokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    if (!tokenAccountA || !tokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\r\n\r\n    const lpTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n    });\r\n\r\n    if (!lpTokenAccount)\r\n      this.logAndCreateError(\"cannot found lp token account\", \"tokenAccounts\", account.tokenAccounts);\r\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeWithdrawCpmmInInstruction(\r\n          new PublicKey(poolInfo.programId),\r\n          this.scope.ownerPubKey,\r\n          new PublicKey(poolKeys.authority),\r\n          new PublicKey(poolInfo.id),\r\n          lpTokenAccount!,\r\n          tokenAccountA!,\r\n          tokenAccountB!,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          mintA,\r\n          mintB,\r\n          new PublicKey(poolInfo.lpMint.address),\r\n\r\n          lpAmount,\r\n          amountMintA.sub(mintAAmountFee.fee ?? new BN(0)),\r\n          amountMintB.sub(mintBAmountFee.fee ?? new BN(0)),\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.CpmmWithdrawLiquidity],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swap<T extends TxVersion>(params: CpmmSwapParams<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      baseIn,\r\n      fixedOut,\r\n      inputAmount,\r\n      swapResult,\r\n      slippage = 0,\r\n      config,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n      nonce,\r\n    } = params;\r\n\r\n    const {\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n      associatedOnly,\r\n      useIdempotent = false,\r\n    } = {\r\n      // defaults\r\n      bypassAssociatedCheck: false,\r\n      checkCreateATAOwner: false,\r\n      associatedOnly: true,\r\n      useIdempotent: false,\r\n      // custom overrides\r\n      ...config,\r\n    };\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    if (nonce && nonce?.instruction) {\r\n      txBuilder.addInstruction({\r\n        instructions: [nonce.instruction],\r\n        instructionTypes: [nonce.instruction].map(() => InstructionType.NonceAccount), // Ajuste o tipo conforme necessário\r\n      });\r\n    }\r\n\r\n    if (computeBudgetConfig) {\r\n      const { instructions, instructionTypes } = addComputeBudget(computeBudgetConfig);\r\n      txBuilder.addInstruction({\r\n        instructions,\r\n        instructionTypes,\r\n      });\r\n    }\r\n\r\n    // Apply slippage to swap results\r\n    if (!fixedOut) {\r\n      swapResult.destinationAmountSwapped = swapResult.destinationAmountSwapped\r\n        .mul(new BN((1 - slippage) * 10000))\r\n        .div(new BN(10000));\r\n    } else {\r\n      swapResult.sourceAmountSwapped = swapResult.sourceAmountSwapped\r\n        .mul(new BN((1 + slippage) * 10000))\r\n        .div(new BN(10000));\r\n    }\r\n\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n    let mintATokenAcc: PublicKey | undefined;\r\n    let mintBTokenAcc: PublicKey | undefined;\r\n\r\n    if (useIdempotent) {\r\n      // Use native Solana libraries for idempotent ATA creation\r\n      const tokenProgramA = new PublicKey(poolInfo.mintA.programId ?? TOKEN_PROGRAM_ID);\r\n      const tokenProgramB = new PublicKey(poolInfo.mintB.programId ?? TOKEN_PROGRAM_ID);\r\n\r\n      const mintAIsSOL = mintA.equals(NATIVE_MINT);\r\n      const mintBIsSOL = mintB.equals(NATIVE_MINT);\r\n\r\n      mintATokenAcc = getAssociatedTokenAddressSync(mintA, this.scope.ownerPubKey, false, tokenProgramA);\r\n      mintBTokenAcc = getAssociatedTokenAddressSync(mintB, this.scope.ownerPubKey, false, tokenProgramB);\r\n\r\n      // Add idempotent ATA creation instructions\r\n      if (!mintAIsSOL) {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            createAssociatedTokenAccountIdempotentInstruction(\r\n              this.scope.ownerPubKey,\r\n              mintATokenAcc,\r\n              this.scope.ownerPubKey,\r\n              mintA,\r\n              tokenProgramA,\r\n            ),\r\n          ],\r\n          instructionTypes: [InstructionType.CreateATA],\r\n        });\r\n      }\r\n\r\n      if (!mintBIsSOL) {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            createAssociatedTokenAccountIdempotentInstruction(\r\n              this.scope.ownerPubKey,\r\n              mintBTokenAcc,\r\n              this.scope.ownerPubKey,\r\n              mintB,\r\n              tokenProgramB,\r\n            ),\r\n          ],\r\n          instructionTypes: [InstructionType.CreateATA],\r\n        });\r\n      }\r\n    } else {\r\n      // Use legacy approach with custom token account management\r\n      const mintAUseSOLBalance = poolInfo.mintA.address === WSOLMint.toBase58();\r\n      const mintBUseSOLBalance = poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n      const { account: mintATokenAccResult, instructionParams: mintATokenAccInstruction } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          mint: mintA,\r\n          tokenProgram: new PublicKey(poolInfo.mintA.programId ?? TOKEN_PROGRAM_ID),\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo:\r\n            mintAUseSOLBalance || !baseIn\r\n              ? {\r\n                  payer: this.scope.ownerPubKey,\r\n                  amount: baseIn ? swapResult.sourceAmountSwapped : 0,\r\n                }\r\n              : undefined,\r\n          notUseTokenAccount: mintAUseSOLBalance,\r\n          skipCloseAccount: !mintAUseSOLBalance,\r\n          associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      mintATokenAccInstruction && txBuilder.addInstruction(mintATokenAccInstruction);\r\n      mintATokenAcc = mintATokenAccResult;\r\n\r\n      const { account: mintBTokenAccResult, instructionParams: mintBTokenAccInstruction } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          mint: mintB,\r\n          tokenProgram: new PublicKey(poolInfo.mintB.programId ?? TOKEN_PROGRAM_ID),\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo:\r\n            mintBUseSOLBalance || baseIn\r\n              ? {\r\n                  payer: this.scope.ownerPubKey,\r\n                  amount: baseIn ? 0 : swapResult.sourceAmountSwapped,\r\n                }\r\n              : undefined,\r\n          notUseTokenAccount: mintBUseSOLBalance,\r\n          skipCloseAccount: !mintBUseSOLBalance,\r\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      mintBTokenAccInstruction && txBuilder.addInstruction(mintBTokenAccInstruction);\r\n      mintBTokenAcc = mintBTokenAccResult;\r\n\r\n      if (!mintATokenAcc || !mintBTokenAcc)\r\n        this.logAndCreateError(\"user do not have token account\", {\r\n          mintA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n          mintB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n          mintATokenAcc,\r\n          mintBTokenAcc,\r\n          mintAUseSOLBalance,\r\n          mintBUseSOLBalance,\r\n          associatedOnly,\r\n        });\r\n    }\r\n\r\n    // Get pool keys if not provided\r\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\r\n    // Configure swap instruction based on baseIn direction\r\n    const sourceTokenAccount = baseIn ? mintATokenAcc! : mintBTokenAcc!;\r\n    const destinationTokenAccount = baseIn ? mintBTokenAcc! : mintATokenAcc!;\r\n    const sourceMint = baseIn ? mintA : mintB;\r\n    const destinationMint = baseIn ? mintB : mintA;\r\n    const sourceVault = baseIn ? poolKeys.vault.A : poolKeys.vault.B;\r\n    const destinationVault = baseIn ? poolKeys.vault.B : poolKeys.vault.A;\r\n    const sourceTokenProgram = baseIn\r\n      ? new PublicKey(poolInfo.mintA.programId ?? TOKEN_PROGRAM_ID)\r\n      : new PublicKey(poolInfo.mintB.programId ?? TOKEN_PROGRAM_ID);\r\n    const destinationTokenProgram = baseIn\r\n      ? new PublicKey(poolInfo.mintB.programId ?? TOKEN_PROGRAM_ID)\r\n      : new PublicKey(poolInfo.mintA.programId ?? TOKEN_PROGRAM_ID);\r\n\r\n    // Adicionar instrução de swap\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        !fixedOut\r\n          ? makeSwapCpmmBaseInInstruction(\r\n              new PublicKey(poolInfo.programId),\r\n              this.scope.ownerPubKey,\r\n              new PublicKey(poolKeys.authority),\r\n              new PublicKey(poolKeys.config.id),\r\n              new PublicKey(poolInfo.id),\r\n              sourceTokenAccount,\r\n              destinationTokenAccount,\r\n              new PublicKey(sourceVault),\r\n              new PublicKey(destinationVault),\r\n              sourceTokenProgram,\r\n              destinationTokenProgram,\r\n              sourceMint,\r\n              destinationMint,\r\n              getPdaObservationId(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n              inputAmount,\r\n              swapResult.destinationAmountSwapped,\r\n            )\r\n          : makeSwapCpmmBaseOutInstruction(\r\n              new PublicKey(poolInfo.programId),\r\n              this.scope.ownerPubKey,\r\n              new PublicKey(poolKeys.authority),\r\n              new PublicKey(poolKeys.config.id),\r\n              new PublicKey(poolInfo.id),\r\n              sourceTokenAccount,\r\n              destinationTokenAccount,\r\n              new PublicKey(sourceVault),\r\n              new PublicKey(destinationVault),\r\n              sourceTokenProgram,\r\n              destinationTokenProgram,\r\n              sourceMint,\r\n              destinationMint,\r\n              getPdaObservationId(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n              swapResult.sourceAmountSwapped,\r\n              swapResult.destinationAmountSwapped,\r\n            ),\r\n      ],\r\n      instructionTypes: [fixedOut ? InstructionType.CpmmSwapBaseOut : InstructionType.CpmmSwapBaseIn],\r\n    });\r\n\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({ txVersion }, nonce?.nonce) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async lockLp<T extends TxVersion>(params: LockCpmmLpParams<T>): Promise<MakeTxData<CpmmLockExtInfo>> {\r\n    const { poolInfo, lpAmount, computeBudgetConfig, txTipConfig, txVersion, feePayer, feeNftOwner } = params;\r\n\r\n    if (lpAmount.isZero())\r\n      this.logAndCreateError(\"lpAmount must greater than zero\", {\r\n        lpAmount: lpAmount.toString(),\r\n      });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const poolKeys = params.poolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\r\n\r\n    const insData = await makeCpmmLockInstruction({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        feePayer: params.feePayer ?? this.scope.ownerPubKey,\r\n      },\r\n      feeNftOwner: feeNftOwner ?? this.scope.ownerPubKey,\r\n      lockProgram: params.programId ?? LOCK_CPMM_PROGRAM,\r\n      lockAuthProgram: params.authProgram ?? LOCK_CPMM_AUTH,\r\n      lpAmount,\r\n      withMetadata: params.withMetadata ?? true,\r\n      getEphemeralSigners: params.getEphemeralSigners,\r\n    });\r\n\r\n    txBuilder.addInstruction(insData);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion, extInfo: insData.address }) as Promise<MakeTxData<CpmmLockExtInfo>>;\r\n  }\r\n\r\n  public async harvestLockLp<T extends TxVersion>(params: HarvestLockCpmmLpParams<T>): Promise<MakeTxData> {\r\n    const {\r\n      poolInfo,\r\n      lpFeeAmount,\r\n      nftMint,\r\n      programId = LOCK_CPMM_PROGRAM,\r\n      authProgram = LOCK_CPMM_AUTH,\r\n      cpmmProgram,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      closeWsol = true,\r\n    } = params;\r\n\r\n    if (lpFeeAmount.isZero())\r\n      this.logAndCreateError(\"lpFeeAmount must greater than zero\", {\r\n        lpAmount: lpFeeAmount.toString(),\r\n      });\r\n\r\n    const feePayer = params.feePayer || this.scope.ownerPubKey;\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const mintAUseSOLBalance = mintA.equals(WSOLMint);\r\n    const mintBUseSOLBalance = mintB.equals(WSOLMint);\r\n\r\n    let tokenAccountA: PublicKey | undefined = undefined;\r\n    let tokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !(mintAUseSOLBalance && closeWsol),\r\n        associatedOnly: mintAUseSOLBalance ? false : true,\r\n        checkCreateATAOwner: false,\r\n      });\r\n    tokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !(mintBUseSOLBalance && closeWsol),\r\n        associatedOnly: mintBUseSOLBalance ? false : true,\r\n        checkCreateATAOwner: false,\r\n      });\r\n    tokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    if (!tokenAccountA || !tokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", { tokenAccountA, tokenAccountB });\r\n\r\n    const poolKeys = params.poolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\r\n\r\n    const { publicKey: nftAccount } = getATAAddress(feePayer, nftMint, TOKEN_PROGRAM_ID);\r\n    const { publicKey: lockPda } = getCpLockPda(programId, nftMint);\r\n    const { publicKey: lockLpVault } = getATAAddress(\r\n      authProgram,\r\n      new PublicKey(poolInfo.lpMint.address),\r\n      TOKEN_PROGRAM_ID,\r\n    );\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        collectCpFeeInstruction({\r\n          programId: programId ?? LOCK_CPMM_PROGRAM,\r\n          nftOwner: this.scope.ownerPubKey,\r\n          auth: authProgram ?? LOCK_CPMM_AUTH,\r\n\r\n          nftMint,\r\n          nftAccount,\r\n\r\n          lockPda,\r\n          poolId: new PublicKey(poolInfo.id),\r\n          mintLp: new PublicKey(poolKeys.mintLp.address),\r\n\r\n          userVaultA: tokenAccountA!,\r\n          userVaultB: tokenAccountB!,\r\n          poolVaultA: new PublicKey(poolKeys.vault.A),\r\n          poolVaultB: new PublicKey(poolKeys.vault.B),\r\n\r\n          mintA,\r\n          mintB,\r\n          lockLpVault,\r\n          lpFeeAmount,\r\n\r\n          cpmmProgram: cpmmProgram?.programId,\r\n          cpmmAuthProgram: cpmmProgram?.authProgram,\r\n        }),\r\n      ],\r\n      instructionTypes: [InstructionType.CpmmCollectLockFee],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public computeSwapAmount({\r\n    pool,\r\n    amountIn,\r\n    outputMint,\r\n    slippage,\r\n  }: {\r\n    pool: CpmmComputeData;\r\n    amountIn: BN;\r\n    outputMint: string | PublicKey;\r\n    slippage: number;\r\n  }): {\r\n    allTrade: boolean;\r\n    amountIn: BN;\r\n    amountOut: BN;\r\n    minAmountOut: BN;\r\n    fee: BN;\r\n    executionPrice: Decimal;\r\n    priceImpact: any;\r\n  } {\r\n    const isBaseIn = outputMint.toString() === pool.mintB.address;\r\n\r\n    const swapResult = CurveCalculator.swap(\r\n      amountIn,\r\n      isBaseIn ? pool.baseReserve : pool.quoteReserve,\r\n      isBaseIn ? pool.quoteReserve : pool.baseReserve,\r\n      pool.configInfo.tradeFeeRate,\r\n    );\r\n\r\n    const executionPrice = new Decimal(swapResult.destinationAmountSwapped.toString()).div(\r\n      swapResult.sourceAmountSwapped.toString(),\r\n    );\r\n\r\n    const minAmountOut = swapResult.destinationAmountSwapped.mul(new BN((1 - slippage) * 10000)).div(new BN(10000));\r\n\r\n    return {\r\n      allTrade: swapResult.sourceAmountSwapped.eq(amountIn),\r\n      amountIn,\r\n      amountOut: swapResult.destinationAmountSwapped,\r\n      minAmountOut,\r\n      executionPrice,\r\n      fee: swapResult.tradeFee,\r\n      priceImpact: pool.poolPrice.sub(executionPrice).div(pool.poolPrice),\r\n    };\r\n  }\r\n\r\n  public computePairAmount({\r\n    poolInfo,\r\n    baseReserve,\r\n    quoteReserve,\r\n    amount,\r\n    slippage,\r\n    epochInfo,\r\n    baseIn,\r\n  }: ComputePairAmountParams): {\r\n    inputAmountFee: GetTransferAmountFee;\r\n    anotherAmount: GetTransferAmountFee;\r\n    maxAnotherAmount: GetTransferAmountFee;\r\n    minAnotherAmount: GetTransferAmountFee;\r\n    liquidity: BN;\r\n  } {\r\n    const coefficient = 1 - Number(slippage.toSignificant()) / 100;\r\n    const inputAmount = new BN(\r\n      new Decimal(amount)\r\n        .mul(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals)\r\n        .mul(coefficient)\r\n        .toFixed(0),\r\n    );\r\n    const inputAmountFee = getTransferAmountFeeV2(\r\n      inputAmount,\r\n      poolInfo[baseIn ? \"mintA\" : \"mintB\"].extensions.feeConfig,\r\n      epochInfo,\r\n      false,\r\n    );\r\n    const _inputAmountWithoutFee = inputAmount.sub(inputAmountFee.fee ?? new BN(0));\r\n\r\n    const lpAmount = new BN(\r\n      new Decimal(poolInfo.lpAmount).mul(10 ** poolInfo.lpMint.decimals).toFixed(0, Decimal.ROUND_DOWN),\r\n    );\r\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\r\n\r\n    this.logDebug(\r\n      \"tokenIn:\",\r\n      baseIn ? poolInfo.mintA.symbol : poolInfo.mintB.symbol,\r\n      \"amountIn:\",\r\n      inputAmount.toString(),\r\n      \"amountInFee:\",\r\n      inputAmountFee.fee?.toString() ?? 0,\r\n      \"anotherToken:\",\r\n      baseIn ? poolInfo.mintB.symbol : poolInfo.mintA.symbol,\r\n      \"slippage:\",\r\n      `${slippage.toSignificant()}%`,\r\n    );\r\n\r\n    // input is fixed\r\n    const input = baseIn ? \"base\" : \"quote\";\r\n    this.logDebug(\"input side:\", input);\r\n\r\n    const liquidity = _inputAmountWithoutFee.mul(lpAmount).div(input === \"base\" ? baseReserve : quoteReserve);\r\n    let anotherAmountFee: GetTransferAmountFee = {\r\n      amount: BN_ZERO,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n    if (!_inputAmountWithoutFee.isZero()) {\r\n      const lpAmountData = lpToAmount(liquidity, baseReserve, quoteReserve, lpAmount);\r\n      this.logDebug(\"lpAmountData:\", {\r\n        amountA: lpAmountData.amountA.toString(),\r\n        amountB: lpAmountData.amountB.toString(),\r\n      });\r\n      anotherAmountFee = getTransferAmountFeeV2(\r\n        lpAmountData[baseIn ? \"amountB\" : \"amountA\"],\r\n        poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      );\r\n    }\r\n\r\n    const _slippage = new Percent(new BN(1)).add(slippage);\r\n    const _slippageMin = new Percent(new BN(1)).sub(slippage);\r\n    const slippageAdjustedAmount = getTransferAmountFeeV2(\r\n      _slippage.mul(anotherAmountFee.amount.sub(anotherAmountFee.fee ?? new BN(0))).quotient,\r\n      poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\r\n      epochInfo,\r\n      true,\r\n    );\r\n    const slippageAdjustedMinAmount = getTransferAmountFeeV2(\r\n      _slippageMin.mul(anotherAmountFee.amount.sub(anotherAmountFee.fee ?? new BN(0))).quotient,\r\n      poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\r\n      epochInfo,\r\n      true,\r\n    );\r\n\r\n    this.logDebug(\r\n      \"anotherAmount:\",\r\n      anotherAmountFee.amount.toString(),\r\n      \"anotherAmountFee:\",\r\n      anotherAmountFee.fee?.toString() ?? 0,\r\n      \"maxAnotherAmount:\",\r\n      slippageAdjustedAmount.amount.toString(),\r\n      \"maxAnotherAmountFee:\",\r\n      slippageAdjustedAmount.fee?.toString() ?? 0,\r\n    );\r\n\r\n    return {\r\n      inputAmountFee,\r\n      anotherAmount: anotherAmountFee,\r\n      maxAnotherAmount: slippageAdjustedAmount,\r\n      minAnotherAmount: slippageAdjustedMinAmount,\r\n      liquidity,\r\n    };\r\n  }\r\n}\r\n\r\nfunction lpToAmount(lp: BN, poolAmountA: BN, poolAmountB: BN, supply: BN): { amountA: BN; amountB: BN } {\r\n  let amountA = lp.mul(poolAmountA).div(supply);\r\n  if (!amountA.isZero() && !lp.mul(poolAmountA).mod(supply).isZero()) amountA = amountA.add(new BN(1));\r\n  let amountB = lp.mul(poolAmountB).div(supply);\r\n  if (!amountB.isZero() && !lp.mul(poolAmountB).mod(supply).isZero()) amountB = amountB.add(new BN(1));\r\n\r\n  return {\r\n    amountA,\r\n    amountB,\r\n  };\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js-light\";\r\nimport { ApiV3Token } from \"../../../api/type\";\r\nimport { BNDivCeil } from \"../../../common\";\r\nimport { ConstantProductCurve } from \"./constantProduct\";\r\nimport { CpmmFee } from \"./fee\";\r\n\r\nexport enum RoundDirection {\r\n  Floor,\r\n  Ceiling,\r\n}\r\n\r\nexport type SwapWithoutFeesResult = { destinationAmountSwapped: BN };\r\n\r\nexport type TradingTokenResult = { tokenAmount0: BN; tokenAmount1: BN };\r\n\r\nexport type SwapResult = {\r\n  newSwapDestinationAmount: BN;\r\n  sourceAmountSwapped: BN;\r\n  destinationAmountSwapped: BN;\r\n  tradeFee: BN;\r\n};\r\n\r\nexport class CurveCalculator {\r\n  static validate_supply(tokenAmount0: BN, tokenAmount1: BN): void {\r\n    if (tokenAmount0.isZero()) throw Error(\"tokenAmount0 is zero\");\r\n    if (tokenAmount1.isZero()) throw Error(\"tokenAmount1 is zero\");\r\n  }\r\n\r\n  static swap(sourceAmount: BN, swapSourceAmount: BN, swapDestinationAmount: BN, tradeFeeRate: BN): SwapResult {\r\n    const tradeFee = CpmmFee.tradingFee(sourceAmount, tradeFeeRate);\r\n\r\n    const sourceAmountLessFees = sourceAmount.sub(tradeFee);\r\n\r\n    const { destinationAmountSwapped } = ConstantProductCurve.swapWithoutFees(\r\n      sourceAmountLessFees,\r\n      swapSourceAmount,\r\n      swapDestinationAmount,\r\n    );\r\n\r\n    return {\r\n      newSwapDestinationAmount: swapDestinationAmount.sub(destinationAmountSwapped),\r\n      sourceAmountSwapped: sourceAmount,\r\n      destinationAmountSwapped,\r\n      tradeFee,\r\n    };\r\n  }\r\n\r\n  static swapBaseOut({\r\n    poolMintA,\r\n    poolMintB,\r\n    tradeFeeRate,\r\n    baseReserve,\r\n    quoteReserve,\r\n    outputMint,\r\n    outputAmount,\r\n  }: {\r\n    poolMintA: ApiV3Token;\r\n    poolMintB: ApiV3Token;\r\n    tradeFeeRate: BN;\r\n    baseReserve: BN;\r\n    quoteReserve: BN;\r\n    outputMint: string | PublicKey;\r\n    outputAmount: BN;\r\n  }): {\r\n    amountRealOut: BN;\r\n\r\n    amountIn: BN;\r\n    amountInWithoutFee: BN;\r\n\r\n    tradeFee: BN;\r\n    priceImpact: number;\r\n  } {\r\n    const [reserveInAmount, reserveOutAmount, reserveInDecimals, reserveOutDecimals, inputMint] =\r\n      poolMintB.address === outputMint.toString()\r\n        ? [baseReserve, quoteReserve, poolMintA.decimals, poolMintB.decimals, poolMintA.address]\r\n        : [quoteReserve, baseReserve, poolMintB.decimals, poolMintA.decimals, poolMintB.address];\r\n    const currentPrice = new Decimal(reserveOutAmount.toString())\r\n      .div(10 ** reserveOutDecimals)\r\n      .div(new Decimal(reserveInAmount.toString()).div(10 ** reserveInDecimals));\r\n    const amountRealOut = outputAmount.gte(reserveOutAmount) ? reserveOutAmount.sub(new BN(1)) : outputAmount;\r\n\r\n    const denominator = reserveOutAmount.sub(amountRealOut);\r\n    const amountInWithoutFee = BNDivCeil(reserveInAmount.mul(amountRealOut), denominator);\r\n    const amountIn = BNDivCeil(amountInWithoutFee.mul(new BN(1_000_000)), new BN(1_000_000).sub(tradeFeeRate));\r\n    const fee = amountIn.sub(amountInWithoutFee);\r\n    const executionPrice = new Decimal(amountRealOut.toString())\r\n      .div(10 ** reserveOutDecimals)\r\n      .div(new Decimal(amountIn.toString()).div(10 ** reserveInDecimals));\r\n    const priceImpact = currentPrice.isZero() ? 0 : executionPrice.sub(currentPrice).div(currentPrice).abs().toNumber();\r\n\r\n    return {\r\n      amountRealOut,\r\n\r\n      amountIn,\r\n      amountInWithoutFee,\r\n\r\n      tradeFee: fee,\r\n      priceImpact,\r\n    };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { RoundDirection, SwapWithoutFeesResult, TradingTokenResult } from \"./calculator\";\r\n\r\nfunction checkedRem(dividend: BN, divisor: BN): BN {\r\n  if (divisor.isZero()) throw Error(\"divisor is zero\");\r\n\r\n  const result = dividend.mod(divisor);\r\n  return result;\r\n}\r\n\r\nfunction checkedCeilDiv(dividend: BN, rhs: BN): BN[] {\r\n  if (rhs.isZero()) throw Error(\"rhs is zero\");\r\n\r\n  let quotient = dividend.div(rhs);\r\n\r\n  if (quotient.isZero()) throw Error(\"quotient is zero\");\r\n\r\n  let remainder = checkedRem(dividend, rhs);\r\n\r\n  if (remainder.gt(ZERO)) {\r\n    quotient = quotient.add(new BN(1));\r\n\r\n    rhs = dividend.div(quotient);\r\n    remainder = checkedRem(dividend, quotient);\r\n    if (remainder.gt(ZERO)) {\r\n      rhs = rhs.add(new BN(1));\r\n    }\r\n  }\r\n  return [quotient, rhs];\r\n}\r\n\r\nconst ZERO = new BN(0);\r\n\r\nexport class ConstantProductCurve {\r\n  static swapWithoutFees(sourceAmount: BN, swapSourceAmount: BN, swapDestinationAmount: BN): SwapWithoutFeesResult {\r\n    const invariant = swapSourceAmount.mul(swapDestinationAmount);\r\n\r\n    const newSwapSourceAmount = swapSourceAmount.add(sourceAmount);\r\n    const [newSwapDestinationAmount] = checkedCeilDiv(invariant, newSwapSourceAmount);\r\n\r\n    const destinationAmountSwapped = swapDestinationAmount.sub(newSwapDestinationAmount);\r\n    if (destinationAmountSwapped.isZero()) throw Error(\"destinationAmountSwapped is zero\");\r\n\r\n    return {\r\n      destinationAmountSwapped,\r\n    };\r\n  }\r\n\r\n  static lpTokensToTradingTokens(\r\n    lpTokenAmount: BN,\r\n    lpTokenSupply: BN,\r\n    swapTokenAmount0: BN,\r\n    swapTokenAmount1: BN,\r\n    roundDirection: RoundDirection,\r\n  ): TradingTokenResult {\r\n    let tokenAmount0 = lpTokenAmount.mul(swapTokenAmount0).div(lpTokenSupply);\r\n    let tokenAmount1 = lpTokenAmount.mul(swapTokenAmount1).div(lpTokenSupply);\r\n\r\n    if (roundDirection === RoundDirection.Floor) {\r\n      return { tokenAmount0, tokenAmount1 };\r\n    } else if (roundDirection === RoundDirection.Ceiling) {\r\n      const tokenRemainder0 = checkedRem(lpTokenAmount.mul(swapTokenAmount0), lpTokenSupply);\r\n\r\n      if (tokenRemainder0.gt(ZERO) && tokenAmount0.gt(ZERO)) {\r\n        tokenAmount0 = tokenAmount0.add(new BN(1));\r\n      }\r\n\r\n      const token1Remainder = checkedRem(lpTokenAmount.mul(swapTokenAmount1), lpTokenSupply);\r\n\r\n      if (token1Remainder.gt(ZERO) && tokenAmount1.gt(ZERO)) {\r\n        tokenAmount1 = tokenAmount1.add(new BN(1));\r\n      }\r\n\r\n      return { tokenAmount0, tokenAmount1 };\r\n    }\r\n    throw Error(\"roundDirection value error\");\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { ceilDiv, floorDiv } from \"@/common/bignumber\";\r\nimport { FEE_RATE_DENOMINATOR_VALUE } from \"@/common/fee\";\r\n\r\nexport class CpmmFee {\r\n  static tradingFee(amount: BN, tradeFeeRate: BN): BN {\r\n    return ceilDiv(amount, tradeFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n  static protocolFee(amount: BN, protocolFeeRate: BN): BN {\r\n    return floorDiv(amount, protocolFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n  static fundFee(amount: BN, fundFeeRate: BN): BN {\r\n    return floorDiv(amount, fundFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { AccountMeta, PublicKey, TransactionInstruction, Signer, Keypair, SystemProgram } from \"@solana/web3.js\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport {\r\n  MEMO_PROGRAM_ID2,\r\n  RENT_PROGRAM_ID,\r\n  SYSTEM_PROGRAM_ID,\r\n  METADATA_PROGRAM_ID,\r\n  createLogger,\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  InstructionType,\r\n} from \"@/common\";\r\nimport { getCpmmPdaPoolId, getCpLockPda } from \"./pda\";\r\n\r\nimport { struct, u64, bool } from \"@/marshmallow\";\r\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\r\nimport { ApiV3PoolInfoStandardItemCpmm, CpmmKeys } from \"@/api\";\r\nimport { getATAAddress } from \"@/common\";\r\nimport { getPdaMetadataKey } from \"../clmm\";\r\nimport { CpmmLockExtInfo } from \"./type\";\r\n\r\nconst logger = createLogger(\"Raydium_cpmm\");\r\nconst anchorDataBuf = {\r\n  initialize: [175, 175, 109, 31, 13, 152, 155, 237],\r\n  deposit: [242, 35, 198, 137, 82, 225, 242, 182],\r\n  withdraw: [183, 18, 70, 156, 148, 109, 161, 34],\r\n  swapBaseInput: [143, 190, 90, 218, 196, 30, 51, 222],\r\n  swapBaseOutput: [55, 217, 98, 86, 163, 74, 180, 173],\r\n  lockCpLiquidity: [216, 157, 29, 78, 38, 51, 31, 26],\r\n  collectCpFee: [8, 30, 51, 199, 209, 184, 247, 133],\r\n};\r\n\r\nexport function makeCreateCpmmPoolInInstruction(\r\n  programId: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  createPoolFeeAccount: PublicKey,\r\n  mintProgramA: PublicKey,\r\n  mintProgramB: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountMaxA: BN,\r\n  amountMaxB: BN,\r\n  openTime: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountMaxA\"), u64(\"amountMaxB\"), u64(\"openTime\")]);\r\n\r\n  const pdaPoolId = getCpmmPdaPoolId(programId, configId, mintA, mintB).publicKey;\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: creator, isSigner: true, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: !poolId.equals(pdaPoolId), isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: createPoolFeeAccount, isSigner: false, isWritable: true },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountMaxA,\r\n      amountMaxB,\r\n      openTime,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initialize, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeDepositCpmmInInstruction(\r\n  programId: PublicKey,\r\n  owner: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n\r\n  lpAmount: BN,\r\n  amountMaxA: BN,\r\n  amountMaxB: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMaxA\"), u64(\"amountMaxB\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  logger.debug(\"cpmm deposit data\", {\r\n    lpAmount: lpAmount.toString(),\r\n    amountMaxA: amountMaxA.toString(),\r\n    amountMaxB: amountMaxB.toString(),\r\n  });\r\n  dataLayout.encode(\r\n    {\r\n      lpAmount,\r\n      amountMaxA,\r\n      amountMaxB,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.deposit, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeWithdrawCpmmInInstruction(\r\n  programId: PublicKey,\r\n  owner: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n\r\n  lpAmount: BN,\r\n  amountMinA: BN,\r\n  amountMinB: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      lpAmount,\r\n      amountMinA,\r\n      amountMinB,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.withdraw, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeSwapCpmmBaseInInstruction(\r\n  programId: PublicKey,\r\n  payer: PublicKey,\r\n  authority: PublicKey,\r\n  configId: PublicKey,\r\n  poolId: PublicKey,\r\n  userInputAccount: PublicKey,\r\n  userOutputAccount: PublicKey,\r\n  inputVault: PublicKey,\r\n  outputVault: PublicKey,\r\n  inputTokenProgram: PublicKey,\r\n  outputTokenProgram: PublicKey,\r\n  inputMint: PublicKey,\r\n  outputMint: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountIn: BN,\r\n  amounOutMin: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountIn\"), u64(\"amounOutMin\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: inputVault, isSigner: false, isWritable: true },\r\n    { pubkey: outputVault, isSigner: false, isWritable: true },\r\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: inputMint, isSigner: false, isWritable: false },\r\n    { pubkey: outputMint, isSigner: false, isWritable: false },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountIn,\r\n      amounOutMin,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.swapBaseInput, ...data]),\r\n  });\r\n}\r\nexport function makeSwapCpmmBaseOutInstruction(\r\n  programId: PublicKey,\r\n  payer: PublicKey,\r\n  authority: PublicKey,\r\n  configId: PublicKey,\r\n  poolId: PublicKey,\r\n  userInputAccount: PublicKey,\r\n  userOutputAccount: PublicKey,\r\n  inputVault: PublicKey,\r\n  outputVault: PublicKey,\r\n  inputTokenProgram: PublicKey,\r\n  outputTokenProgram: PublicKey,\r\n  inputMint: PublicKey,\r\n  outputMint: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountInMax: BN,\r\n  amountOut: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountInMax\"), u64(\"amountOut\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: inputVault, isSigner: false, isWritable: true },\r\n    { pubkey: outputVault, isSigner: false, isWritable: true },\r\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: inputMint, isSigner: false, isWritable: false },\r\n    { pubkey: outputMint, isSigner: false, isWritable: false },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountInMax,\r\n      amountOut,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.swapBaseOutput, ...data]),\r\n  });\r\n}\r\n\r\nexport async function makeCpmmLockInstruction(props: {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  poolKeys: CpmmKeys;\r\n  ownerInfo: {\r\n    feePayer: PublicKey;\r\n    wallet: PublicKey;\r\n  };\r\n  feeNftOwner: PublicKey;\r\n\r\n  lockProgram: PublicKey;\r\n  lockAuthProgram: PublicKey;\r\n  lpAmount: BN;\r\n  withMetadata?: boolean;\r\n  getEphemeralSigners?: (k: number) => any;\r\n}): Promise<ReturnTypeMakeInstructions<CpmmLockExtInfo>> {\r\n  const { ownerInfo, poolInfo, poolKeys, feeNftOwner, getEphemeralSigners } = props;\r\n\r\n  const signers: Signer[] = [];\r\n  const [poolId, lpMint] = [new PublicKey(poolInfo.id), new PublicKey(poolInfo.lpMint.address)];\r\n\r\n  let nftMintAccount: PublicKey;\r\n  if (getEphemeralSigners) {\r\n    nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n  } else {\r\n    const _k = Keypair.generate();\r\n    signers.push(_k);\r\n    nftMintAccount = _k.publicKey;\r\n  }\r\n\r\n  const { publicKey: nftAccount } = getATAAddress(feeNftOwner, nftMintAccount, TOKEN_PROGRAM_ID);\r\n  const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n  const { publicKey: lockPda } = getCpLockPda(props.lockProgram, nftMintAccount);\r\n\r\n  const { publicKey: userLpVault } = getATAAddress(ownerInfo.wallet, lpMint, TOKEN_PROGRAM_ID);\r\n  const { publicKey: lockLpVault } = getATAAddress(props.lockAuthProgram, lpMint, TOKEN_PROGRAM_ID);\r\n\r\n  const ins = cpmmLockPositionInstruction({\r\n    programId: props.lockProgram,\r\n    auth: props.lockAuthProgram,\r\n    payer: ownerInfo.feePayer,\r\n    liquidityOwner: ownerInfo.wallet,\r\n    nftOwner: feeNftOwner,\r\n    nftMint: nftMintAccount,\r\n    nftAccount,\r\n    poolId,\r\n    lockPda,\r\n    mintLp: lpMint,\r\n    userLpVault,\r\n    lockLpVault,\r\n    poolVaultA: new PublicKey(poolKeys.vault.A),\r\n    poolVaultB: new PublicKey(poolKeys.vault.B),\r\n    metadataAccount,\r\n    lpAmount: props.lpAmount,\r\n    withMetadata: props.withMetadata ?? true,\r\n  });\r\n\r\n  return {\r\n    address: {\r\n      nftMint: nftMintAccount,\r\n      nftAccount,\r\n      metadataAccount,\r\n      lockPda,\r\n      userLpVault,\r\n      lockLpVault,\r\n    },\r\n    instructions: [ins],\r\n    signers,\r\n    instructionTypes: [InstructionType.CpmmLockLp],\r\n    lookupTableAddress: [],\r\n  };\r\n}\r\n\r\nexport function cpmmLockPositionInstruction({\r\n  programId,\r\n  auth,\r\n  payer,\r\n  liquidityOwner,\r\n  nftOwner,\r\n  nftMint,\r\n  nftAccount,\r\n  poolId,\r\n  lockPda,\r\n  mintLp,\r\n  userLpVault,\r\n  lockLpVault,\r\n  poolVaultA,\r\n  poolVaultB,\r\n  metadataAccount,\r\n  lpAmount,\r\n  withMetadata,\r\n}: {\r\n  programId: PublicKey;\r\n  auth: PublicKey;\r\n  payer: PublicKey;\r\n  liquidityOwner: PublicKey;\r\n  nftOwner: PublicKey;\r\n  nftMint: PublicKey;\r\n  nftAccount: PublicKey;\r\n  poolId: PublicKey;\r\n  lockPda: PublicKey;\r\n  mintLp: PublicKey;\r\n  userLpVault: PublicKey;\r\n  lockLpVault: PublicKey;\r\n  poolVaultA: PublicKey;\r\n  poolVaultB: PublicKey;\r\n  metadataAccount: PublicKey;\r\n  lpAmount: BN;\r\n  withMetadata: boolean;\r\n}): TransactionInstruction {\r\n  const keys = [\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: liquidityOwner, isSigner: true, isWritable: false },\r\n    { pubkey: nftOwner, isSigner: false, isWritable: false },\r\n    { pubkey: nftMint, isSigner: true, isWritable: true },\r\n    { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n    { pubkey: poolId, isSigner: false, isWritable: false },\r\n    { pubkey: lockPda, isSigner: false, isWritable: true },\r\n    { pubkey: mintLp, isSigner: false, isWritable: false },\r\n    { pubkey: userLpVault, isSigner: false, isWritable: true },\r\n    { pubkey: lockLpVault, isSigner: false, isWritable: true },\r\n    { pubkey: poolVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: poolVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n  const dataLayout = struct([u64(\"lpAmount\"), bool(\"withMetadata\")]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      lpAmount,\r\n      withMetadata,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.lockCpLiquidity, ...data]);\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function collectCpFeeInstruction({\r\n  programId,\r\n  nftOwner,\r\n  auth,\r\n  nftAccount,\r\n  lockPda,\r\n  poolId,\r\n  mintLp,\r\n  userVaultA,\r\n  userVaultB,\r\n  poolVaultA,\r\n  poolVaultB,\r\n  mintA,\r\n  mintB,\r\n  lockLpVault,\r\n  lpFeeAmount,\r\n  cpmmProgram,\r\n  cpmmAuthProgram,\r\n}: {\r\n  programId: PublicKey;\r\n  nftOwner: PublicKey;\r\n  auth: PublicKey;\r\n  nftMint: PublicKey;\r\n  nftAccount: PublicKey;\r\n  lockPda: PublicKey;\r\n  poolId: PublicKey;\r\n  mintLp: PublicKey;\r\n  userVaultA: PublicKey;\r\n  userVaultB: PublicKey;\r\n  poolVaultA: PublicKey;\r\n  poolVaultB: PublicKey;\r\n  mintA: PublicKey;\r\n  mintB: PublicKey;\r\n  lockLpVault: PublicKey;\r\n  lpFeeAmount: BN;\r\n  cpmmProgram?: PublicKey;\r\n  cpmmAuthProgram?: PublicKey;\r\n}): TransactionInstruction {\r\n  const keys = [\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: nftOwner, isSigner: true, isWritable: false },\r\n    // { pubkey: nftMint, isSigner: false, isWritable: true },\r\n    { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n    { pubkey: lockPda, isSigner: false, isWritable: true },\r\n    { pubkey: cpmmProgram ?? CREATE_CPMM_POOL_PROGRAM, isSigner: false, isWritable: false },\r\n    { pubkey: cpmmAuthProgram ?? CREATE_CPMM_POOL_AUTH, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintLp, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: poolVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: poolVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lockLpVault, isSigner: false, isWritable: true },\r\n    // { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n  ];\r\n  const dataLayout = struct([u64(\"lpFeeAmount\")]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      lpFeeAmount,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.collectCpFee, ...data]);\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { findProgramAddress } from \"../../common/txTool/txUtils\";\r\n\r\nconst AUTH_SEED = Buffer.from(\"vault_and_lp_mint_auth_seed\", \"utf8\");\r\nconst AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nconst POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nconst POOL_LP_MINT_SEED = Buffer.from(\"pool_lp_mint\", \"utf8\");\r\nconst POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nconst OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\r\n\r\nexport function getPdaPoolAuthority(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AUTH_SEED], programId);\r\n}\r\n\r\nexport function getCpmmPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getCpmmPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLpMint(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LP_MINT_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaVault(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  mint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), mint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaObservationId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nfunction u16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setUint16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function getCreatePoolKeys({\r\n  poolId: propPoolId,\r\n  programId,\r\n  configId,\r\n  mintA,\r\n  mintB,\r\n}: {\r\n  poolId?: PublicKey;\r\n  programId: PublicKey;\r\n  configId: PublicKey;\r\n  mintA: PublicKey;\r\n  mintB: PublicKey;\r\n}): {\r\n  poolId: PublicKey;\r\n  configId: PublicKey;\r\n  authority: PublicKey;\r\n  lpMint: PublicKey;\r\n  vaultA: PublicKey;\r\n  vaultB: PublicKey;\r\n  observationId: PublicKey;\r\n} {\r\n  // const configId = getCpmmPdaAmmConfigId(programId, 0).publicKey;\r\n  const authority = getPdaPoolAuthority(programId).publicKey;\r\n  const poolId = propPoolId || getCpmmPdaPoolId(programId, configId, mintA, mintB).publicKey;\r\n  const lpMint = getPdaLpMint(programId, poolId).publicKey;\r\n  const vaultA = getPdaVault(programId, poolId, mintA).publicKey;\r\n  const vaultB = getPdaVault(programId, poolId, mintB).publicKey;\r\n  const observationId = getPdaObservationId(programId, poolId).publicKey;\r\n\r\n  return {\r\n    poolId,\r\n    configId,\r\n    authority,\r\n    lpMint,\r\n    vaultA,\r\n    vaultB,\r\n    observationId,\r\n  };\r\n}\r\n\r\nexport const LOCK_LIQUIDITY_SEED = Buffer.from(\"locked_liquidity\", \"utf8\");\r\n\r\nexport function getCpLockPda(\r\n  programId: PublicKey,\r\n  mint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([LOCK_LIQUIDITY_SEED, mint.toBuffer()], programId);\r\n}\r\n","import { blob, bool, publicKey, seq, struct, u16, u64, u8, u128 } from \"../../marshmallow\";\r\n\r\nexport const CpmmConfigInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  bool(\"disableCreatePool\"),\r\n  u16(\"index\"),\r\n  u64(\"tradeFeeRate\"),\r\n  u64(\"protocolFeeRate\"),\r\n  u64(\"fundFeeRate\"),\r\n  u64(\"createPoolFee\"),\r\n\r\n  publicKey(\"protocolOwner\"),\r\n  publicKey(\"fundOwner\"),\r\n  seq(u64(), 16),\r\n]);\r\n\r\nexport const CpmmPoolInfoLayout = struct([\r\n  blob(8),\r\n\r\n  publicKey(\"configId\"),\r\n  publicKey(\"poolCreator\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n\r\n  publicKey(\"mintLp\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n\r\n  publicKey(\"mintProgramA\"),\r\n  publicKey(\"mintProgramB\"),\r\n\r\n  publicKey(\"observationId\"),\r\n\r\n  u8(\"bump\"),\r\n  u8(\"status\"),\r\n\r\n  u8(\"lpDecimals\"),\r\n  u8(\"mintDecimalA\"),\r\n  u8(\"mintDecimalB\"),\r\n\r\n  u64(\"lpAmount\"),\r\n  u64(\"protocolFeesMintA\"),\r\n  u64(\"protocolFeesMintB\"),\r\n  u64(\"fundFeesMintA\"),\r\n  u64(\"fundFeesMintB\"),\r\n  u64(\"openTime\"),\r\n\r\n  seq(u64(), 32),\r\n]);\r\n","import { EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport { createTransferInstruction, TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { AmmV4Keys, ApiV3Token, ClmmKeys, PoolKeys } from \"@/api\";\r\nimport {\r\n  AMM_V4,\r\n  BigNumberish,\r\n  CLMM_PROGRAM_ID,\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  fetchMultipleMintInfos,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  minExpirationTime,\r\n  parseBigNumberish,\r\n  solToWSol,\r\n  WSOLMint,\r\n} from \"@/common\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { publicKey, struct } from \"../../marshmallow\";\r\nimport { Price, TokenAmount } from \"../../module\";\r\nimport { ClmmRpcData, ComputeClmmPoolInfo, PoolUtils, ReturnTypeFetchMultiplePoolTickArrays } from \"../../raydium/clmm\";\r\nimport { PoolInfoLayout } from \"../../raydium/clmm/layout\";\r\nimport { CpmmPoolInfoLayout, getPdaPoolAuthority } from \"../../raydium/cpmm\";\r\nimport {\r\n  ComputeAmountOutParam,\r\n  getLiquidityAssociatedAuthority,\r\n  liquidityStateV4Layout,\r\n  toAmmComputePoolInfo,\r\n} from \"../../raydium/liquidity\";\r\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos } from \"../../raydium/type\";\r\nimport { closeAccountInstruction, createWSolAccountInstructions } from \"../account/instruction\";\r\nimport { TokenAccount } from \"../account/types\";\r\nimport { CpmmComputeData } from \"../cpmm\";\r\nimport { AmmRpcData } from \"../liquidity\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { Market, MARKET_STATE_LAYOUT_V3 } from \"../serum\";\r\nimport { toApiV3Token, toToken, toTokenAmount } from \"../token\";\r\nimport { makeSwapInstruction } from \"./instrument\";\r\nimport {\r\n  BasicPoolInfo,\r\n  ComputeAmountOutAmmLayout,\r\n  ComputeAmountOutLayout,\r\n  ComputePoolType,\r\n  ComputeRoutePathType,\r\n  ReturnTypeFetchMultipleInfo,\r\n  ReturnTypeGetAllRoute,\r\n  RoutePathType,\r\n} from \"./type\";\r\n\r\nconst ZERO = new BN(0);\r\nexport default class TradeV2 extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  private async getWSolAccounts(): Promise<TokenAccount[]> {\r\n    this.scope.checkOwner();\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const tokenAccounts = this.scope.account.tokenAccounts.filter((acc) => acc.mint.equals(WSOLMint));\r\n    tokenAccounts.sort((a, b) => {\r\n      if (a.isAssociated) return 1;\r\n      if (b.isAssociated) return -1;\r\n      return a.amount.lt(b.amount) ? -1 : 1;\r\n    });\r\n    return tokenAccounts;\r\n  }\r\n\r\n  public async unWrapWSol<T extends TxVersion>(props: {\r\n    amount: BigNumberish;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    tokenProgram?: PublicKey;\r\n    txVersion?: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const { amount, tokenProgram, txVersion = TxVersion.LEGACY, feePayer } = props;\r\n    const tokenAccounts = await this.getWSolAccounts();\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    txBuilder.addCustomComputeBudget(props.computeBudgetConfig);\r\n    // const ins = await createWSolAccountInstructions({\r\n    //   connection: this.scope.connection,\r\n    //   owner: this.scope.ownerPubKey,\r\n    //   payer: this.scope.ownerPubKey,\r\n    //   amount: 0,\r\n    // });\r\n    // txBuilder.addInstruction(ins);\r\n\r\n    const amountBN = parseBigNumberish(amount);\r\n    for (let i = 0; i < tokenAccounts.length; i++) {\r\n      if (amountBN.gte(tokenAccounts[i].amount)) {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            closeAccountInstruction({\r\n              tokenAccount: tokenAccounts[i].publicKey!,\r\n              payer: this.scope.ownerPubKey,\r\n              owner: this.scope.ownerPubKey,\r\n              programId: tokenProgram,\r\n            }),\r\n          ],\r\n        });\r\n        amountBN.sub(tokenAccounts[i].amount);\r\n      } else {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            closeAccountInstruction({\r\n              tokenAccount: tokenAccounts[i].publicKey!,\r\n              payer: this.scope.ownerPubKey,\r\n              owner: this.scope.ownerPubKey,\r\n              programId: tokenProgram,\r\n            }),\r\n          ],\r\n        });\r\n      }\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async wrapWSol<T extends TxVersion>(\r\n    amount: BigNumberish,\r\n    tokenProgram?: PublicKey,\r\n    txVersion?: T,\r\n    feePayer?: PublicKey,\r\n  ): Promise<MakeTxData<T>> {\r\n    // const tokenAccounts = await this.getWSolAccounts();\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const ins = await createWSolAccountInstructions({\r\n      connection: this.scope.connection,\r\n      owner: this.scope.ownerPubKey,\r\n      payer: this.scope.ownerPubKey,\r\n      amount,\r\n      skipCloseAccount: true,\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n\r\n    // if (tokenAccounts.length) {\r\n    //   // already have wsol account\r\n    //   txBuilder.addInstruction({\r\n    //     instructions: [\r\n    //       makeTransferInstruction({\r\n    //         destination: tokenAccounts[0].publicKey!,\r\n    //         source: ins.addresses.newAccount,\r\n    //         amount,\r\n    //         owner: this.scope.ownerPubKey,\r\n    //         tokenProgram,\r\n    //       }),\r\n    //     ],\r\n    //     endInstructions: [\r\n    //       closeAccountInstruction({\r\n    //         tokenAccount: ins.addresses.newAccount,\r\n    //         payer: this.scope.ownerPubKey,\r\n    //         owner: this.scope.ownerPubKey,\r\n    //         programId: tokenProgram,\r\n    //       }),\r\n    //     ],\r\n    //   });\r\n    // }\r\n    return txBuilder.versionBuild({ txVersion: txVersion ?? TxVersion.LEGACY }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    swapInfo,\r\n    swapPoolKeys,\r\n    ownerInfo,\r\n    computeBudgetConfig,\r\n    routeProgram,\r\n    txVersion,\r\n    feePayer,\r\n  }: {\r\n    txVersion: T;\r\n    swapInfo: ComputeAmountOutLayout;\r\n    swapPoolKeys?: PoolKeys[];\r\n    ownerInfo: {\r\n      associatedOnly: boolean;\r\n      checkCreateATAOwner: boolean;\r\n    };\r\n    routeProgram: PublicKey;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const amountIn = swapInfo.amountIn;\r\n    const amountOut = swapInfo.amountOut;\r\n    const useSolBalance = amountIn.amount.token.mint.equals(WSOLMint);\r\n    const isOutputSol = amountOut.amount.token.mint.equals(WSOLMint);\r\n    const inputMint = amountIn.amount.token.mint;\r\n    const outputMint = amountOut.amount.token.mint;\r\n\r\n    const { account: sourceAcc, instructionParams: sourceAccInsParams } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: amountIn.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n        mint: inputMint,\r\n        notUseTokenAccount: useSolBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !useSolBalance,\r\n        createInfo: useSolBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountIn.amount.raw,\r\n            }\r\n          : undefined,\r\n        associatedOnly: useSolBalance ? false : ownerInfo.associatedOnly,\r\n        checkCreateATAOwner: ownerInfo.checkCreateATAOwner,\r\n      });\r\n\r\n    sourceAccInsParams && txBuilder.addInstruction(sourceAccInsParams);\r\n\r\n    if (sourceAcc === undefined) {\r\n      throw Error(\"input account check error\");\r\n    }\r\n\r\n    let destinationAcc: PublicKey;\r\n    if (swapInfo.routeType === \"route\" && !isOutputSol) {\r\n      destinationAcc = this.scope.account.getAssociatedTokenAccount(\r\n        outputMint,\r\n        amountOut.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n      );\r\n    } else {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: amountOut.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n        mint: outputMint,\r\n        notUseTokenAccount: isOutputSol,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: true,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: isOutputSol ? false : ownerInfo.associatedOnly,\r\n        checkCreateATAOwner: ownerInfo.checkCreateATAOwner,\r\n      });\r\n      destinationAcc = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (isOutputSol) {\r\n      txBuilder.addInstruction({\r\n        endInstructions: [\r\n          closeAccountInstruction({\r\n            owner: this.scope.ownerPubKey,\r\n            payer: this.scope.ownerPubKey,\r\n            tokenAccount: destinationAcc,\r\n            programId: TOKEN_PROGRAM_ID,\r\n          }),\r\n        ],\r\n        endInstructionTypes: [InstructionType.CloseAccount],\r\n      });\r\n    }\r\n\r\n    let routeTokenAcc: PublicKey | undefined = undefined;\r\n    if (swapInfo.routeType === \"route\") {\r\n      const middleMint = swapInfo.middleToken;\r\n      routeTokenAcc = this.scope.account.getAssociatedTokenAccount(\r\n        middleMint.mint,\r\n        middleMint.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n      );\r\n    }\r\n\r\n    const poolKeys = swapPoolKeys ? swapPoolKeys : await this.computePoolToPoolKeys({ pools: swapInfo.poolInfoList });\r\n    const swapIns = makeSwapInstruction({\r\n      routeProgram,\r\n      inputMint,\r\n      swapInfo: {\r\n        ...swapInfo,\r\n        poolInfo: [...swapInfo.poolInfoList],\r\n        poolKey: poolKeys,\r\n        outputMint,\r\n      },\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        sourceToken: sourceAcc,\r\n        routeToken: routeTokenAcc,\r\n        destinationToken: destinationAcc!,\r\n      },\r\n    });\r\n\r\n    if (swapInfo.feeConfig !== undefined) {\r\n      const checkTxBuilder = this.createTxBuilder();\r\n      checkTxBuilder.addInstruction({\r\n        instructions: [\r\n          createTransferInstruction(\r\n            sourceAcc,\r\n            swapInfo.feeConfig.feeAccount,\r\n            this.scope.ownerPubKey,\r\n            swapInfo.feeConfig.feeAmount.toNumber(),\r\n          ),\r\n        ],\r\n        instructionTypes: [InstructionType.TransferAmount],\r\n      });\r\n      checkTxBuilder.addInstruction(swapIns);\r\n\r\n      const { transactions } =\r\n        txVersion === TxVersion.V0 ? await checkTxBuilder.sizeCheckBuildV0() : await checkTxBuilder.sizeCheckBuild();\r\n      if (transactions.length < 2) {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            createTransferInstruction(\r\n              sourceAcc,\r\n              swapInfo.feeConfig.feeAccount,\r\n              this.scope.ownerPubKey,\r\n              swapInfo.feeConfig.feeAmount.toNumber(),\r\n            ),\r\n          ],\r\n          instructionTypes: [InstructionType.TransferAmount],\r\n        });\r\n      }\r\n    }\r\n    txBuilder.addInstruction(swapIns);\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig, address: swapIns.address }) as Promise<\r\n        MakeMultiTxData<T>\r\n      >;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig, address: swapIns.address }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  // get all amm/clmm/cpmm pools data only with id and mint\r\n  public async fetchRoutePoolBasicInfo(programIds?: { amm: PublicKey; clmm: PublicKey; cpmm: PublicKey }): Promise<{\r\n    ammPools: BasicPoolInfo[];\r\n    clmmPools: BasicPoolInfo[];\r\n    cpmmPools: BasicPoolInfo[];\r\n  }> {\r\n    const { amm = AMM_V4, clmm = CLMM_PROGRAM_ID, cpmm = CREATE_CPMM_POOL_PROGRAM } = programIds || {};\r\n    const ammPoolsData = await this.scope.connection.getProgramAccounts(amm, {\r\n      dataSlice: { offset: liquidityStateV4Layout.offsetOf(\"baseMint\"), length: 64 },\r\n    });\r\n\r\n    const layoutAmm = struct([publicKey(\"baseMint\"), publicKey(\"quoteMint\")]);\r\n    const ammData = ammPoolsData.map((data) => ({\r\n      id: data.pubkey,\r\n      version: 4,\r\n      mintA: layoutAmm.decode(data.account.data).baseMint,\r\n      mintB: layoutAmm.decode(data.account.data).quoteMint,\r\n    }));\r\n\r\n    const layout = struct([publicKey(\"mintA\"), publicKey(\"mintB\")]);\r\n    const clmmPoolsData = await this.scope.connection.getProgramAccounts(clmm, {\r\n      filters: [{ dataSize: PoolInfoLayout.span }],\r\n      dataSlice: { offset: PoolInfoLayout.offsetOf(\"mintA\"), length: 64 },\r\n    });\r\n\r\n    const clmmData = clmmPoolsData.map((data) => {\r\n      const clmm = layout.decode(data.account.data);\r\n      return {\r\n        id: data.pubkey,\r\n        version: 6,\r\n        mintA: clmm.mintA,\r\n        mintB: clmm.mintB,\r\n      };\r\n    });\r\n\r\n    const cpmmPools = await this.scope.connection.getProgramAccounts(cpmm, {\r\n      dataSlice: { offset: CpmmPoolInfoLayout.offsetOf(\"mintA\"), length: 64 },\r\n    });\r\n\r\n    const cpmmData = cpmmPools.map((data) => {\r\n      const clmm = layout.decode(data.account.data);\r\n      return {\r\n        id: data.pubkey,\r\n        version: 7,\r\n        mintA: clmm.mintA,\r\n        mintB: clmm.mintB,\r\n      };\r\n    });\r\n\r\n    return {\r\n      clmmPools: clmmData,\r\n      ammPools: ammData,\r\n      cpmmPools: cpmmData,\r\n    };\r\n  }\r\n\r\n  // get pools with in routes\r\n  public getAllRoute({\r\n    inputMint,\r\n    outputMint,\r\n    clmmPools,\r\n    ammPools,\r\n    cpmmPools,\r\n  }: {\r\n    inputMint: PublicKey;\r\n    outputMint: PublicKey;\r\n    clmmPools: BasicPoolInfo[];\r\n    ammPools: BasicPoolInfo[];\r\n    cpmmPools: BasicPoolInfo[];\r\n  }): ReturnTypeGetAllRoute {\r\n    inputMint = inputMint.toString() === PublicKey.default.toString() ? WSOLMint : inputMint;\r\n    outputMint = outputMint.toString() === PublicKey.default.toString() ? WSOLMint : outputMint;\r\n\r\n    const needSimulate: { [poolKey: string]: BasicPoolInfo } = {};\r\n    const needTickArray: { [poolKey: string]: BasicPoolInfo } = {};\r\n    const cpmmPoolList: { [poolKey: string]: BasicPoolInfo } = {};\r\n\r\n    const directPath: BasicPoolInfo[] = [];\r\n\r\n    const routePathDict: RoutePathType = {}; // {[route mint: string]: {in: [] , out: []}}\r\n\r\n    for (const itemClmmPool of clmmPools ?? []) {\r\n      if (\r\n        (itemClmmPool.mintA.equals(inputMint) && itemClmmPool.mintB.equals(outputMint)) ||\r\n        (itemClmmPool.mintA.equals(outputMint) && itemClmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemClmmPool);\r\n        needTickArray[itemClmmPool.id.toString()] = itemClmmPool;\r\n      }\r\n\r\n      if (itemClmmPool.mintA.equals(inputMint)) {\r\n        const t = itemClmmPool.mintB.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].in.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintB.equals(inputMint)) {\r\n        const t = itemClmmPool.mintA.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].in.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintA.equals(outputMint)) {\r\n        const t = itemClmmPool.mintB.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].out.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintB.equals(outputMint)) {\r\n        const t = itemClmmPool.mintA.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].out.push(itemClmmPool);\r\n      }\r\n    }\r\n\r\n    const addLiquidityPools: BasicPoolInfo[] = [];\r\n\r\n    for (const itemAmmPool of ammPools) {\r\n      if (\r\n        (itemAmmPool.mintA.equals(inputMint) && itemAmmPool.mintB.equals(outputMint)) ||\r\n        (itemAmmPool.mintA.equals(outputMint) && itemAmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemAmmPool);\r\n        needSimulate[itemAmmPool.id.toBase58()] = itemAmmPool;\r\n        addLiquidityPools.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintA.equals(inputMint)) {\r\n        if (routePathDict[itemAmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintB.toBase58()].in.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintB.equals(inputMint)) {\r\n        if (routePathDict[itemAmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintA.toBase58()].in.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintA.equals(outputMint)) {\r\n        if (routePathDict[itemAmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintB.toBase58()].out.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintB.equals(outputMint)) {\r\n        if (routePathDict[itemAmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintA.toBase58()].out.push(itemAmmPool);\r\n      }\r\n    }\r\n\r\n    for (const itemCpmmPool of cpmmPools) {\r\n      if (\r\n        (itemCpmmPool.mintA.equals(inputMint) && itemCpmmPool.mintB.equals(outputMint)) ||\r\n        (itemCpmmPool.mintA.equals(outputMint) && itemCpmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemCpmmPool);\r\n        cpmmPoolList[itemCpmmPool.id.toBase58()] = itemCpmmPool;\r\n      }\r\n      if (itemCpmmPool.mintA.equals(inputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintB.toBase58()].in.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintB.equals(inputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintA.toBase58()].in.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintA.equals(outputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintB.toBase58()].out.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintB.equals(outputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintA.toBase58()].out.push(itemCpmmPool);\r\n      }\r\n    }\r\n\r\n    for (const t of Object.keys(routePathDict)) {\r\n      if (\r\n        routePathDict[t].in.length === 1 &&\r\n        routePathDict[t].out.length === 1 &&\r\n        routePathDict[t].in[0].id.equals(routePathDict[t].out[0].id)\r\n      ) {\r\n        delete routePathDict[t];\r\n        continue;\r\n      }\r\n      if (routePathDict[t].in.length === 0 || routePathDict[t].out.length === 0) {\r\n        delete routePathDict[t];\r\n        continue;\r\n      }\r\n\r\n      const info = routePathDict[t];\r\n\r\n      for (const infoIn of info.in) {\r\n        for (const infoOut of info.out) {\r\n          if (infoIn.version === 6 && needTickArray[infoIn.id.toString()] === undefined) {\r\n            needTickArray[infoIn.id.toString()] = infoIn;\r\n          } else if (infoIn.version === 7 && cpmmPoolList[infoIn.id.toString()] === undefined) {\r\n            cpmmPoolList[infoIn.id.toString()] = infoIn;\r\n          } else if (\r\n            (infoIn.version === 4 || infoIn.version === 5) &&\r\n            needSimulate[infoIn.id.toString()] === undefined\r\n          ) {\r\n            needSimulate[infoIn.id.toString()] = infoIn;\r\n          }\r\n          if (infoOut.version === 6 && needTickArray[infoOut.id.toString()] === undefined) {\r\n            needTickArray[infoOut.id.toString()] = infoOut;\r\n          } else if (infoOut.version === 7 && cpmmPoolList[infoOut.id.toString()] === undefined) {\r\n            cpmmPoolList[infoOut.id.toString()] = infoOut;\r\n          } else if (\r\n            (infoOut.version === 4 || infoOut.version === 5) &&\r\n            needSimulate[infoOut.id.toString()] === undefined\r\n          ) {\r\n            needSimulate[infoOut.id.toString()] = infoOut;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      directPath,\r\n      addLiquidityPools,\r\n      routePathDict,\r\n      needSimulate: Object.values(needSimulate),\r\n      needTickArray: Object.values(needTickArray),\r\n      cpmmPoolList: Object.values(cpmmPoolList),\r\n    };\r\n  }\r\n\r\n  // fetch pools detail info in route\r\n  public async fetchSwapRoutesData({\r\n    routes,\r\n    inputMint,\r\n    outputMint,\r\n  }: {\r\n    inputMint: string | PublicKey;\r\n    outputMint: string | PublicKey;\r\n    routes: ReturnTypeGetAllRoute;\r\n  }): Promise<{\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n    ammPoolsRpcInfo: Record<string, AmmRpcData>;\r\n    ammSimulateCache: Record<string, ComputeAmountOutParam[\"poolInfo\"]>;\r\n    clmmPoolsRpcInfo: Record<string, ClmmRpcData>;\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n    computeCpmmData: Record<string, CpmmComputeData>;\r\n    routePathDict: ComputeRoutePathType;\r\n  }> {\r\n    const mintSet = new Set([\r\n      ...routes.needTickArray.map((p) => [p.mintA.toBase58(), p.mintB.toBase58()]).flat(),\r\n      inputMint.toString(),\r\n      outputMint.toString(),\r\n    ]);\r\n\r\n    console.log(\"fetching amm pools info, total: \", routes.needSimulate.length);\r\n    const ammPoolsRpcInfo = await this.scope.liquidity.getRpcPoolInfos(routes.needSimulate.map((p) => p.id));\r\n    const ammSimulateCache = toAmmComputePoolInfo(ammPoolsRpcInfo);\r\n\r\n    let mintInfos: ReturnTypeFetchMultipleMintInfos = {};\r\n    // amm doesn't support token2022 yet, so don't need to fetch mint info\r\n    Object.values(ammSimulateCache).forEach((p) => {\r\n      mintSet.delete(p.mintA.address);\r\n      mintInfos[p.mintA.address] = {\r\n        address: new PublicKey(p.mintA.address),\r\n        programId: TOKEN_PROGRAM_ID,\r\n        mintAuthority: null,\r\n        supply: BigInt(0),\r\n        decimals: p.mintA.decimals,\r\n        isInitialized: true,\r\n        freezeAuthority: null,\r\n        tlvData: Buffer.from(\"0\", \"hex\"),\r\n        feeConfig: undefined,\r\n      };\r\n\r\n      mintSet.delete(p.mintB.address);\r\n      mintInfos[p.mintB.address] = {\r\n        address: new PublicKey(p.mintB.address),\r\n        programId: TOKEN_PROGRAM_ID,\r\n        mintAuthority: null,\r\n        supply: BigInt(0),\r\n        decimals: p.mintB.decimals,\r\n        isInitialized: true,\r\n        freezeAuthority: null,\r\n        tlvData: Buffer.from(\"0\", \"hex\"),\r\n        feeConfig: undefined,\r\n      };\r\n    });\r\n\r\n    console.log(\"fetching cpmm pools info, total: \", routes.cpmmPoolList.length);\r\n    const cpmmPoolsRpcInfo = await this.scope.cpmm.getRpcPoolInfos(\r\n      routes.cpmmPoolList.map((p) => p.id.toBase58()),\r\n      true,\r\n    );\r\n\r\n    Object.values(cpmmPoolsRpcInfo).forEach((p) => {\r\n      const [mintA, mintB] = [p.mintA.toBase58(), p.mintB.toBase58()];\r\n      if (p.mintProgramA.equals(TOKEN_PROGRAM_ID)) {\r\n        mintSet.delete(mintA);\r\n        mintInfos[mintA] = {\r\n          address: p.mintA,\r\n          programId: p.mintProgramA,\r\n          mintAuthority: null,\r\n          supply: BigInt(0),\r\n          decimals: p.mintDecimalA,\r\n          isInitialized: true,\r\n          freezeAuthority: null,\r\n          tlvData: Buffer.from(\"0\", \"hex\"),\r\n          feeConfig: undefined,\r\n        };\r\n      } else mintSet.add(mintA); // 2022, need to fetch fee config\r\n      if (p.mintProgramB.equals(TOKEN_PROGRAM_ID)) {\r\n        mintSet.delete(mintB);\r\n        mintInfos[mintB] = {\r\n          address: p.mintB,\r\n          programId: p.mintProgramB,\r\n          mintAuthority: null,\r\n          supply: BigInt(0),\r\n          decimals: p.mintDecimalB,\r\n          isInitialized: true,\r\n          freezeAuthority: null,\r\n          tlvData: Buffer.from(\"0\", \"hex\"),\r\n          feeConfig: undefined,\r\n        };\r\n      } else mintSet.add(mintB); // 2022, need to fetch fee config\r\n    });\r\n\r\n    console.log(\"fetching mints info, total: \", mintSet.size);\r\n    const fetchMintInfoRes = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    mintInfos = {\r\n      ...mintInfos,\r\n      ...fetchMintInfoRes,\r\n    };\r\n\r\n    const computeCpmmData = this.scope.cpmm.toComputePoolInfos({\r\n      pools: cpmmPoolsRpcInfo,\r\n      mintInfos,\r\n    });\r\n\r\n    console.log(\"fetching clmm pools info, total:\", routes.needTickArray.length);\r\n    const clmmPoolsRpcInfo = await this.scope.clmm.getRpcClmmPoolInfos({\r\n      poolIds: routes.needTickArray.map((p) => p.id),\r\n    });\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo,\r\n      mintInfos,\r\n    });\r\n\r\n    // update route pool mint info\r\n    const routePathDict = Object.keys(routes.routePathDict).reduce((acc, cur) => {\r\n      return {\r\n        ...acc,\r\n        [cur]: {\r\n          ...routes.routePathDict[cur],\r\n          mintProgram: mintInfos[cur].programId,\r\n          mDecimals: mintInfos[cur].decimals,\r\n          in: routes.routePathDict[cur].in.map(\r\n            (p) =>\r\n              ammSimulateCache[p.id.toBase58()] ||\r\n              computeClmmPoolInfo[p.id.toBase58()] ||\r\n              computeCpmmData[p.id.toBase58()],\r\n          ),\r\n          out: routes.routePathDict[cur].out.map(\r\n            (p) =>\r\n              ammSimulateCache[p.id.toBase58()] ||\r\n              computeClmmPoolInfo[p.id.toBase58()] ||\r\n              computeCpmmData[p.id.toBase58()],\r\n          ),\r\n        },\r\n      };\r\n    }, {} as ComputeRoutePathType);\r\n\r\n    return {\r\n      mintInfos,\r\n\r\n      ammPoolsRpcInfo,\r\n      ammSimulateCache,\r\n\r\n      clmmPoolsRpcInfo,\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n\r\n      computeCpmmData,\r\n\r\n      routePathDict,\r\n    };\r\n  }\r\n\r\n  // compute amount from routes\r\n  public getAllRouteComputeAmountOut({\r\n    inputTokenAmount,\r\n    outputToken: propOutputToken,\r\n    directPath,\r\n    routePathDict,\r\n    simulateCache,\r\n    tickCache,\r\n    slippage,\r\n    chainTime,\r\n    epochInfo,\r\n    feeConfig,\r\n  }: {\r\n    directPath: ComputePoolType[];\r\n    routePathDict: ComputeRoutePathType;\r\n    simulateCache: ReturnTypeFetchMultipleInfo;\r\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays;\r\n\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n\r\n    inputTokenAmount: TokenAmount;\r\n    outputToken: ApiV3Token;\r\n    slippage: number;\r\n    chainTime: number;\r\n    epochInfo: EpochInfo;\r\n\r\n    feeConfig?: {\r\n      feeBps: BN;\r\n      feeAccount: PublicKey;\r\n    };\r\n  }): ComputeAmountOutLayout[] {\r\n    const _amountInFee =\r\n      feeConfig === undefined\r\n        ? new BN(0)\r\n        : inputTokenAmount.raw.mul(new BN(feeConfig.feeBps.toNumber())).div(new BN(10000));\r\n    const _amoutIn = inputTokenAmount.raw.sub(_amountInFee);\r\n    const amountIn = new TokenAmount(inputTokenAmount.token, _amoutIn);\r\n    const _inFeeConfig =\r\n      feeConfig === undefined\r\n        ? undefined\r\n        : {\r\n            feeAmount: _amountInFee,\r\n            feeAccount: feeConfig.feeAccount,\r\n          };\r\n    const outputToken = {\r\n      ...propOutputToken,\r\n      address: solToWSol(propOutputToken.address).toString(),\r\n    };\r\n    const outRoute: ComputeAmountOutLayout[] = [];\r\n    for (const itemPool of directPath) {\r\n      try {\r\n        outRoute.push({\r\n          ...this.computeAmountOut({\r\n            itemPool,\r\n            tickCache,\r\n            simulateCache,\r\n            chainTime,\r\n            epochInfo,\r\n            slippage,\r\n            outputToken,\r\n            amountIn,\r\n          }),\r\n          feeConfig: _inFeeConfig,\r\n        });\r\n      } catch (e: any) {\r\n        this.logDebug(\"direct error\", itemPool.version, itemPool.id.toString(), e.message);\r\n        /* empty */\r\n      }\r\n    }\r\n    this.logDebug(\"direct done\");\r\n    for (const [routeMint, info] of Object.entries(routePathDict)) {\r\n      // const routeToken = new Token(info.mintProgram, routeMint, info.mDecimals);\r\n      const routeToken = {\r\n        chainId: 101,\r\n        address: routeMint,\r\n        programId: info.mintProgram.toBase58(),\r\n        logoURI: \"\",\r\n        symbol: \"\",\r\n        name: \"\",\r\n        decimals: info.mDecimals,\r\n        tags: [],\r\n        extensions: {},\r\n      };\r\n      const maxFirstIn = info.in\r\n        .map((i) => {\r\n          try {\r\n            return {\r\n              pool: i,\r\n              data: this.computeAmountOut({\r\n                itemPool: i,\r\n                tickCache,\r\n                simulateCache,\r\n                chainTime,\r\n                epochInfo,\r\n                slippage,\r\n                outputToken: routeToken,\r\n                amountIn,\r\n              }),\r\n            };\r\n          } catch (e: any) {\r\n            this.logDebug(\"route in error\", i.version, i.id.toString(), e.message);\r\n            return undefined;\r\n          }\r\n        })\r\n        .sort((_a, _b) => {\r\n          const a = _a === undefined ? ZERO : _a.data.amountOut.amount.raw.sub(_a.data.amountOut.fee?.raw ?? ZERO);\r\n          const b = _b === undefined ? ZERO : _b.data.amountOut.amount.raw.sub(_b.data.amountOut.fee?.raw ?? ZERO);\r\n          return a.lt(b) ? 1 : -1;\r\n        })[0];\r\n      if (maxFirstIn === undefined) continue;\r\n      const routeAmountIn = new TokenAmount(\r\n        toToken(routeToken),\r\n        maxFirstIn.data.amountOut.amount.raw.sub(maxFirstIn.data.amountOut.fee?.raw ?? ZERO),\r\n      );\r\n      for (const iOutPool of info.out) {\r\n        try {\r\n          const outC = this.computeAmountOut({\r\n            itemPool: iOutPool,\r\n            tickCache,\r\n            simulateCache,\r\n            chainTime,\r\n            epochInfo,\r\n            slippage,\r\n            outputToken,\r\n            amountIn: routeAmountIn,\r\n          });\r\n          outRoute.push({\r\n            ...outC,\r\n            allTrade: maxFirstIn.data.allTrade && outC.allTrade ? true : false,\r\n            amountIn: maxFirstIn.data.amountIn,\r\n            amountOut: outC.amountOut,\r\n            minAmountOut: outC.minAmountOut,\r\n            currentPrice: undefined,\r\n            executionPrice: new Decimal(\r\n              new Price({\r\n                baseToken: maxFirstIn.data.amountIn.amount.token,\r\n                denominator: maxFirstIn.data.amountIn.amount.raw,\r\n                quoteToken: outC.amountOut.amount.token,\r\n                numerator: outC.amountOut.amount.raw.sub(outC.amountOut.fee?.raw ?? ZERO),\r\n              }).toFixed(),\r\n            ),\r\n            priceImpact: new Decimal(maxFirstIn.data.priceImpact.add(outC.priceImpact).toFixed()),\r\n            fee: [maxFirstIn.data.fee[0], outC.fee[0]],\r\n            routeType: \"route\",\r\n            poolInfoList: [maxFirstIn.pool, iOutPool],\r\n            remainingAccounts: [maxFirstIn.data.remainingAccounts[0], outC.remainingAccounts[0]],\r\n            minMiddleAmountFee: outC.amountOut.fee?.raw\r\n              ? new TokenAmount(\r\n                  (maxFirstIn.data.amountOut.amount as TokenAmount).token,\r\n                  (maxFirstIn.data.amountOut.fee?.raw ?? ZERO).add(outC.amountOut.fee?.raw ?? ZERO),\r\n                )\r\n              : undefined,\r\n            middleToken: (maxFirstIn.data.amountOut.amount as TokenAmount).token,\r\n            poolReady: maxFirstIn.data.poolReady && outC.poolReady,\r\n            poolType: [maxFirstIn.data.poolType, outC.poolType],\r\n            feeConfig: _inFeeConfig,\r\n            expirationTime: minExpirationTime(maxFirstIn.data.expirationTime, outC.expirationTime),\r\n          });\r\n        } catch (e: any) {\r\n          this.logDebug(\"route out error\", iOutPool.version, iOutPool.id.toString(), e.message);\r\n          /* empty */\r\n        }\r\n      }\r\n    }\r\n\r\n    return outRoute\r\n      .filter((i) => {\r\n        if (!i.allTrade)\r\n          this.logDebug(`pool ${i.poolInfoList.map((p) => p.id.toString()).join(\",\")} filter out since not all trade`);\r\n        return i.allTrade;\r\n      })\r\n      .sort((a, b) => (a.amountOut.amount.raw.sub(b.amountOut.amount.raw).gt(ZERO) ? -1 : 1));\r\n  }\r\n\r\n  /** trade related utils */\r\n\r\n  private computeAmountOut({\r\n    itemPool,\r\n    tickCache,\r\n    simulateCache,\r\n    chainTime,\r\n    epochInfo,\r\n    slippage,\r\n    outputToken,\r\n    amountIn,\r\n  }: {\r\n    itemPool: ComputePoolType;\r\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays;\r\n    simulateCache: ReturnTypeFetchMultipleInfo;\r\n    chainTime: number;\r\n    epochInfo: EpochInfo;\r\n    amountIn: TokenAmount;\r\n    outputToken: ApiV3Token;\r\n    slippage: number;\r\n  }): ComputeAmountOutAmmLayout {\r\n    if (itemPool.version === 6) {\r\n      const {\r\n        allTrade,\r\n        realAmountIn,\r\n        amountOut,\r\n        minAmountOut,\r\n        expirationTime,\r\n        currentPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee,\r\n        remainingAccounts,\r\n        executionPriceX64,\r\n      } = PoolUtils.computeAmountOutFormat({\r\n        poolInfo: itemPool,\r\n        tickArrayCache: tickCache[itemPool.id.toString()],\r\n        amountIn: amountIn.raw,\r\n        tokenOut: outputToken,\r\n        slippage,\r\n        epochInfo,\r\n        catchLiquidityInsufficient: true,\r\n      });\r\n      return {\r\n        allTrade,\r\n        amountIn: realAmountIn,\r\n        amountOut,\r\n        minAmountOut,\r\n        currentPrice: new Decimal(currentPrice.toFixed()),\r\n        executionPrice: new Decimal(executionPrice.toFixed()),\r\n        priceImpact: new Decimal(priceImpact.toFixed()),\r\n        fee: [fee],\r\n        remainingAccounts: [remainingAccounts],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        poolReady: itemPool.startTime < chainTime,\r\n        poolType: \"CLMM\",\r\n        slippage,\r\n        clmmExPriceX64: [executionPriceX64],\r\n        expirationTime: minExpirationTime(realAmountIn.expirationTime, expirationTime),\r\n      };\r\n    } else if (itemPool.version === 7) {\r\n      const { allTrade, executionPrice, amountOut, minAmountOut, priceImpact, fee } = this.scope.cpmm.computeSwapAmount(\r\n        {\r\n          pool: itemPool,\r\n          outputMint: outputToken.address,\r\n          amountIn: amountIn.raw,\r\n          slippage,\r\n        },\r\n      );\r\n\r\n      return {\r\n        allTrade,\r\n        amountIn: { amount: amountIn, fee: undefined, expirationTime: undefined },\r\n        amountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: amountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        minAmountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: minAmountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        currentPrice: itemPool.poolPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee: [new TokenAmount(amountIn.token, fee)],\r\n        remainingAccounts: [],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        poolReady: itemPool.openTime.toNumber() < chainTime,\r\n        poolType: \"CPMM\",\r\n        slippage,\r\n        clmmExPriceX64: [undefined],\r\n        expirationTime: undefined,\r\n      };\r\n    } else {\r\n      if (![1, 6, 7].includes(simulateCache[itemPool.id.toString()].status)) throw Error(\"swap error\");\r\n      const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee } =\r\n        this.scope.liquidity.computeAmountOut({\r\n          poolInfo: simulateCache[itemPool.id.toString()],\r\n          amountIn: amountIn.raw,\r\n          mintIn: amountIn.token.mint,\r\n          mintOut: outputToken.address,\r\n          slippage,\r\n        });\r\n      return {\r\n        amountIn: { amount: amountIn, fee: undefined, expirationTime: undefined },\r\n        amountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: amountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        minAmountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: minAmountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        currentPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee: [new TokenAmount(amountIn.token, fee)],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        remainingAccounts: [],\r\n        poolReady: Number(simulateCache[itemPool.id as string].openTime) < chainTime,\r\n        poolType: itemPool.version === 5 ? \"STABLE\" : undefined,\r\n        expirationTime: undefined,\r\n        allTrade: true,\r\n        slippage,\r\n        clmmExPriceX64: [undefined],\r\n      };\r\n    }\r\n  }\r\n\r\n  public async computePoolToPoolKeys({\r\n    pools,\r\n    clmmRpcData = {},\r\n    ammRpcData = {},\r\n  }: {\r\n    pools: ComputePoolType[];\r\n    clmmRpcData?: Record<string, ClmmRpcData>;\r\n    ammRpcData?: Record<string, AmmRpcData>;\r\n  }): Promise<PoolKeys[]> {\r\n    const clmmFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 6 && !clmmRpcData[p.id.toString()]).map((p) => p.id.toString()),\r\n    );\r\n    if (clmmFetchKeys.size > 0) {\r\n      const clmmData = await this.scope.clmm.getRpcClmmPoolInfos({ poolIds: Array.from(clmmFetchKeys) });\r\n      Object.keys(clmmData).forEach((poolId) => {\r\n        clmmRpcData[poolId] = clmmData[poolId];\r\n      });\r\n    }\r\n\r\n    const ammFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 4 && !ammRpcData[p.id.toString()]).map((p) => p.id.toString()),\r\n    );\r\n    if (ammFetchKeys.size > 0) {\r\n      const ammData = await this.scope.liquidity.getRpcPoolInfos(Array.from(ammFetchKeys));\r\n      Object.keys(ammData).forEach((poolId) => {\r\n        ammRpcData[poolId] = ammData[poolId];\r\n      });\r\n    }\r\n\r\n    const ammMarketFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 4).map((p) => (p as ComputeAmountOutParam[\"poolInfo\"]).marketId),\r\n    );\r\n    const marketData: Record<\r\n      string,\r\n      {\r\n        marketProgramId: string;\r\n        marketId: string;\r\n        marketAuthority: string;\r\n        marketBaseVault: string;\r\n        marketQuoteVault: string;\r\n        marketBids: string;\r\n        marketAsks: string;\r\n        marketEventQueue: string;\r\n      }\r\n    > = {};\r\n    if (ammMarketFetchKeys.size > 0) {\r\n      const marketAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n        this.scope.connection,\r\n        Array.from(ammMarketFetchKeys).map((p) => ({ pubkey: new PublicKey(p) })),\r\n      );\r\n      marketAccount.forEach((m) => {\r\n        if (!m.accountInfo) return;\r\n        const itemMarketInfo = MARKET_STATE_LAYOUT_V3.decode(m.accountInfo.data);\r\n        marketData[m.pubkey.toBase58()] = {\r\n          marketId: m.pubkey.toString(),\r\n          marketProgramId: m.accountInfo.owner.toString(),\r\n          marketAuthority: Market.getAssociatedAuthority({\r\n            programId: m.accountInfo.owner,\r\n            marketId: m.pubkey,\r\n          }).publicKey.toString(),\r\n          marketBaseVault: itemMarketInfo.baseVault.toString(),\r\n          marketQuoteVault: itemMarketInfo.quoteVault.toString(),\r\n          marketBids: itemMarketInfo.bids.toString(),\r\n          marketAsks: itemMarketInfo.asks.toString(),\r\n          marketEventQueue: itemMarketInfo.eventQueue.toString(),\r\n        };\r\n      });\r\n    }\r\n\r\n    const poolKeys: PoolKeys[] = [];\r\n    pools.forEach((pool) => {\r\n      if (pool.version === 6) {\r\n        const rpcInfo = clmmRpcData[pool.id.toString()];\r\n        const clmmKeys: ClmmKeys = {\r\n          programId: pool.programId.toBase58(),\r\n          id: pool.id.toBase58(),\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          openTime: String(pool.startTime),\r\n          vault: {\r\n            A: rpcInfo.vaultA.toBase58(),\r\n            B: rpcInfo.vaultB.toBase58(),\r\n          },\r\n          config: {\r\n            ...pool.ammConfig,\r\n            id: pool.ammConfig.id.toString(),\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          rewardInfos: [],\r\n          observationId: pool.observationId.toBase58(),\r\n          exBitmapAccount: pool.exBitmapAccount.toBase58(),\r\n        };\r\n        poolKeys.push(clmmKeys);\r\n      } else if (pool.version === 4) {\r\n        const rpcInfo = ammRpcData[pool.id.toString()];\r\n        const ammKeys: AmmV4Keys = {\r\n          programId: pool.programId,\r\n          id: pool.id,\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          openTime: String(pool.openTime),\r\n          vault: {\r\n            A: rpcInfo.baseVault.toBase58(),\r\n            B: rpcInfo.quoteVault.toBase58(),\r\n          },\r\n          authority: getLiquidityAssociatedAuthority({ programId: new PublicKey(pool.programId) }).publicKey.toString(),\r\n          openOrders: rpcInfo.openOrders.toBase58(),\r\n          targetOrders: rpcInfo.targetOrders.toBase58(),\r\n          mintLp: pool.lpMint,\r\n          ...marketData[pool.marketId],\r\n        };\r\n        poolKeys.push(ammKeys);\r\n      } else if (pool.version === 7) {\r\n        poolKeys.push({\r\n          observationId: pool.observationId.toBase58(),\r\n          programId: pool.programId.toBase58(),\r\n          id: pool.id.toBase58(),\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          openTime: String(pool.openTime),\r\n          authority: getPdaPoolAuthority(pool.programId).publicKey.toBase58(),\r\n          vault: {\r\n            A: pool.vaultA.toBase58(),\r\n            B: pool.vaultB.toBase58(),\r\n          },\r\n          mintLp: toApiV3Token({\r\n            address: pool.mintLp.toBase58(),\r\n            programId: TOKEN_PROGRAM_ID.toBase58(),\r\n            decimals: pool.lpDecimals,\r\n          }),\r\n          config: {\r\n            id: pool.configId.toBase58(),\r\n            ...pool.configInfo,\r\n            protocolFeeRate: pool.configInfo.protocolFeeRate.toNumber(),\r\n            tradeFeeRate: pool.configInfo.tradeFeeRate.toNumber(),\r\n            fundFeeRate: pool.configInfo.fundFeeRate.toNumber(),\r\n            createPoolFee: pool.configInfo.createPoolFee.toString(),\r\n          },\r\n        });\r\n      }\r\n    });\r\n    return poolKeys;\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { SERUM_PROGRAM_ID_V3 } from \"../../common/programId\";\r\nimport { SerumVersion } from \"./type\";\r\n\r\n// serum program id string => serum version\r\nexport const SERUM_PROGRAMID_TO_VERSION: {\r\n  [key: string]: SerumVersion;\r\n} = {\r\n  [SERUM_PROGRAM_ID_V3.toBase58()]: 3,\r\n};\r\n\r\n// serum version => serum program id\r\nexport const SERUM_VERSION_TO_PROGRAMID: { [key in SerumVersion]?: PublicKey } & {\r\n  [K: number]: PublicKey;\r\n} = {\r\n  3: SERUM_PROGRAM_ID_V3,\r\n};\r\n","import { blob, GetStructureSchema, publicKey, struct, u64 } from \"../../marshmallow\";\r\n\r\n/* ================= state layouts ================= */\r\nexport const MARKET_STATE_LAYOUT_V3 = struct([\r\n  blob(5),\r\n\r\n  blob(8), // accountFlagsLayout('accountFlags'),\r\n\r\n  publicKey(\"ownAddress\"),\r\n\r\n  u64(\"vaultSignerNonce\"),\r\n\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n\r\n  publicKey(\"baseVault\"),\r\n  u64(\"baseDepositsTotal\"),\r\n  u64(\"baseFeesAccrued\"),\r\n\r\n  publicKey(\"quoteVault\"),\r\n  u64(\"quoteDepositsTotal\"),\r\n  u64(\"quoteFeesAccrued\"),\r\n\r\n  u64(\"quoteDustThreshold\"),\r\n\r\n  publicKey(\"requestQueue\"),\r\n  publicKey(\"eventQueue\"),\r\n\r\n  publicKey(\"bids\"),\r\n  publicKey(\"asks\"),\r\n\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n\r\n  u64(\"feeRateBps\"),\r\n\r\n  u64(\"referrerRebatesAccrued\"),\r\n\r\n  blob(7),\r\n]);\r\n\r\nexport type MarketStateLayoutV3 = typeof MARKET_STATE_LAYOUT_V3;\r\nexport type MarketStateLayout = MarketStateLayoutV3;\r\n\r\nexport type MarketStateV3 = GetStructureSchema<MarketStateLayoutV3>;\r\nexport type MarketState = MarketStateV3;\r\n\r\n/* ================= index ================= */\r\n// version => market state layout\r\nexport const MARKET_VERSION_TO_STATE_LAYOUT: {\r\n  [version: number]: MarketStateLayout;\r\n} = {\r\n  3: MARKET_STATE_LAYOUT_V3,\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"../../common/logger\";\r\n\r\nimport { SERUM_PROGRAMID_TO_VERSION, SERUM_VERSION_TO_PROGRAMID } from \"./id\";\r\nimport { MARKET_VERSION_TO_STATE_LAYOUT, MarketStateLayout } from \"./layout\";\r\n\r\nconst logger = createLogger(\"Serum\");\r\n\r\nexport class Market {\r\n  /* ================= get version and program id ================= */\r\n  static getProgramId(version: number): PublicKey {\r\n    const programId = SERUM_VERSION_TO_PROGRAMID[version];\r\n    if (!programId) logger.logWithError(\"invalid version\", \"version\", version);\r\n\r\n    return programId;\r\n  }\r\n\r\n  static getVersion(programId: PublicKey): number {\r\n    const programIdString = programId.toBase58();\r\n\r\n    const version = SERUM_PROGRAMID_TO_VERSION[programIdString];\r\n    if (!version) logger.logWithError(\"invalid program id\", \"programId\", programIdString);\r\n\r\n    return version;\r\n  }\r\n\r\n  /* ================= get layout ================= */\r\n  static getStateLayout(version: number): MarketStateLayout {\r\n    const STATE_LAYOUT = MARKET_VERSION_TO_STATE_LAYOUT[version];\r\n    if (!STATE_LAYOUT) logger.logWithError(!!STATE_LAYOUT, \"invalid version\", \"version\", version);\r\n\r\n    return STATE_LAYOUT;\r\n  }\r\n\r\n  static getLayouts(version: number): { state: MarketStateLayout } {\r\n    return { state: this.getStateLayout(version) };\r\n  }\r\n\r\n  /* ================= get key ================= */\r\n  static getAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\r\n    publicKey: PublicKey;\r\n    nonce: number;\r\n  } {\r\n    const seeds = [marketId.toBuffer()];\r\n\r\n    let nonce = 0;\r\n    let publicKey: PublicKey;\r\n\r\n    while (nonce < 100) {\r\n      try {\r\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\r\n        publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\r\n      } catch (err) {\r\n        if (err instanceof TypeError) {\r\n          throw err;\r\n        }\r\n        nonce++;\r\n        continue;\r\n      }\r\n      return { publicKey, nonce };\r\n    }\r\n\r\n    logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\r\n      programId,\r\n      marketId,\r\n    });\r\n\r\n    return { publicKey: PublicKey.default, nonce };\r\n  }\r\n}\r\n","import { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nimport {\r\n  InstructionType,\r\n  LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL,\r\n  MEMO_PROGRAM_ID2,\r\n  accountMeta,\r\n  jsonInfo2PoolKeys,\r\n  getATAAddress,\r\n  ALL_PROGRAM_ID,\r\n} from \"@/common\";\r\nimport { seq, struct, u128, u64, u8 } from \"../../marshmallow\";\r\nimport {\r\n  ClmmInstrument,\r\n  MAX_SQRT_PRICE_X64,\r\n  MAX_SQRT_PRICE_X64_SUB_ONE,\r\n  MIN_SQRT_PRICE_X64,\r\n  MIN_SQRT_PRICE_X64_ADD_ONE,\r\n  ONE,\r\n  getPdaExBitmapAccount,\r\n} from \"../clmm\";\r\nimport { makeAMMSwapInstruction } from \"../liquidity/instruction\";\r\n\r\nimport { AmmV4Keys, AmmV5Keys, ApiV3PoolInfoItem, ClmmKeys, CpmmKeys, PoolKeys } from \"../../api/type\";\r\nimport { makeSwapCpmmBaseInInstruction } from \"../../raydium/cpmm\";\r\nimport { ComputePoolType, MakeSwapInstructionParam, ReturnTypeMakeSwapInstruction } from \"./type\";\r\nexport function route1Instruction(\r\n  programId: PublicKey,\r\n  poolInfoA: ApiV3PoolInfoItem,\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  // userDestinationToken: PublicKey,\r\n  userPdaAccount: PublicKey,\r\n  ownerWallet: PublicKey,\r\n\r\n  inputMint: PublicKey,\r\n\r\n  amountIn: BN,\r\n  amountOut: BN,\r\n\r\n  tickArrayA?: PublicKey[],\r\n  // tickArrayB?: PublicKey[],\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"amountOut\")]);\r\n\r\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(poolKeyA.programId), isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(poolKeyA.id), isSigner: false, isWritable: true },\r\n    { pubkey: new PublicKey(poolKeyB.id), isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userSourceToken, isSigner: false, isWritable: true },\r\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\r\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\r\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\r\n  ];\r\n\r\n  if (poolInfoA.type === \"Concentrated\") {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as ClmmKeys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.A : poolKey.vault.B,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.B : poolKey.vault.A,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        ...tickArrayA!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      ],\r\n    );\r\n  } else if (poolInfoA.pooltype.includes(\"StablePool\")) {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV5Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      ],\r\n    );\r\n  } else {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV4Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n          ? [\r\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n            ]\r\n          : [\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            ]),\r\n      ],\r\n    );\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 4,\r\n      amountIn,\r\n      amountOut,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function route2Instruction(\r\n  programId: PublicKey,\r\n  poolInfoB: ApiV3PoolInfoItem,\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  // userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  userDestinationToken: PublicKey,\r\n  userPdaAccount: PublicKey,\r\n  ownerWallet: PublicKey,\r\n\r\n  routeMint: PublicKey,\r\n\r\n  // tickArrayA?: PublicKey[],\r\n  tickArrayB?: PublicKey[],\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"instruction\")]);\r\n\r\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(String(poolKeyB.programId)), isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(String(poolKeyB.id)), isSigner: false, isWritable: true },\r\n    { pubkey: new PublicKey(String(poolKeyA.id)), isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\r\n    { pubkey: userDestinationToken, isSigner: false, isWritable: true },\r\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\r\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\r\n  ];\r\n\r\n  if (poolInfoB.type === \"Concentrated\") {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as ClmmKeys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.A : poolKey.vault.B,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.B : poolKey.vault.A,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        ...tickArrayB!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      ],\r\n    );\r\n  } else if (poolInfoB.pooltype.includes(\"StablePool\")) {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV5Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      ],\r\n    );\r\n  } else {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV4Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n          ? [\r\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n            ]\r\n          : [\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            ]),\r\n      ],\r\n    );\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 5,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\n/*\r\nfunction makeInnerInsKey(\r\n  itemPool: ComputePoolType,\r\n  itemPoolKey: PoolKeys,\r\n  inMint: string,\r\n  userInAccount: PublicKey,\r\n  userOutAccount: PublicKey,\r\n  remainingAccount: PublicKey[] | undefined,\r\n): accountMeta[] {\r\n  if (itemPool.version === 4) {\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\r\n\r\n    return [\r\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n      ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n        ? [\r\n            { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n            { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n          ]\r\n        : [\r\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n          ]),\r\n    ];\r\n  } else if (itemPool.version === 5) {\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\r\n\r\n    return [\r\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n    ];\r\n  } else if (itemPool.version === 6) {\r\n    const pool = itemPool;\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as ClmmKeys);\r\n    const baseIn = pool.mintA.address === inMint;\r\n    return [\r\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: itemPool.observationId, isSigner: false, isWritable: true },\r\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\r\n        ? [\r\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\r\n          ]\r\n        : []),\r\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      {\r\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\r\n        isSigner: false,\r\n        isWritable: true,\r\n      },\r\n    ];\r\n  } else if (itemPool.version === 7) {\r\n    const pool = itemPool;\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as CpmmKeys);\r\n    const baseIn = pool.mintA.address === inMint;\r\n    return [\r\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: itemPool.observationId, isSigner: false, isWritable: true },\r\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\r\n        ? [\r\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\r\n          ]\r\n        : []),\r\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      {\r\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\r\n        isSigner: false,\r\n        isWritable: true,\r\n      },\r\n    ];\r\n  } else {\r\n    throw Error(\"make swap ins error\");\r\n  }\r\n}\r\n*/\r\n\r\nexport function routeInstruction(\r\n  programId: PublicKey,\r\n  wallet: PublicKey,\r\n\r\n  userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  userDestinationToken: PublicKey,\r\n\r\n  inputMint: string,\r\n  routeMint: string,\r\n  outputMint: string,\r\n\r\n  poolInfoA: ComputePoolType,\r\n  poolInfoB: ComputePoolType,\r\n\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  amountIn: BN,\r\n  amountOut: BN,\r\n\r\n  remainingAccounts: (PublicKey[] | undefined)[],\r\n): TransactionInstruction {\r\n  const clmmPriceLimit: BN[] = [];\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: wallet, isSigner: true }),\r\n  ];\r\n\r\n  keys.push(accountMeta({ pubkey: userSourceToken }));\r\n  keys.push(accountMeta({ pubkey: userDestinationToken }));\r\n\r\n  const poolInfos = [poolInfoA, poolInfoB];\r\n  const poolKeys = [poolKeyA, poolKeyB];\r\n  const routeMints = [inputMint, routeMint, outputMint];\r\n\r\n  for (let index = 0; index < poolInfos.length; index++) {\r\n    const _poolInfo = poolInfos[index];\r\n    const inputIsA = routeMints[index] === _poolInfo.mintA.address;\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.programId), isWritable: false }));\r\n    if (index === poolInfos.length - 1) {\r\n      keys.push(accountMeta({ pubkey: userDestinationToken }));\r\n    } else {\r\n      keys.push(accountMeta({ pubkey: userRouteToken }));\r\n    }\r\n    keys.push(accountMeta({ pubkey: new PublicKey(routeMints[index]) }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(routeMints[index + 1]) }));\r\n    if (_poolInfo.version === 6) {\r\n      const _poolKey = poolKeys[index] as ClmmKeys;\r\n\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.A : _poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.B : _poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.observationId) })); //todo\r\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2 }));\r\n      keys.push(\r\n        accountMeta({\r\n          pubkey: getPdaExBitmapAccount(new PublicKey(_poolInfo.programId), new PublicKey(_poolInfo.id)).publicKey,\r\n        }),\r\n      );\r\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_poolInfo.sqrtPriceX64.toString(), inputIsA));\r\n      for (const item of remainingAccounts[index] ?? []) {\r\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\r\n      }\r\n    } else if (_poolInfo.version === 5) {\r\n      const _poolKey = poolKeys[index] as AmmV5Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority) }));\r\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketQuoteVault) }));\r\n    } else if (_poolInfo.version === 4) {\r\n      const _poolKey = poolKeys[index] as AmmV4Keys;\r\n      const isSupportIdOnly = _poolInfo.status !== 1;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketProgramId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketAuthority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketQuoteVault) }));\r\n    } else if (_poolInfo.version === 7) {\r\n      const _poolKey = poolKeys[index] as CpmmKeys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.A : _poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.B : _poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.observationId) }));\r\n    } else throw Error(\"pool type error\");\r\n  }\r\n\r\n  const dataLayout = struct([\r\n    u8(\"insId\"),\r\n    u64(\"amountIn\"),\r\n    u64(\"amountOut\"),\r\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\r\n  ]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      insId: 0,\r\n      amountIn,\r\n      amountOut,\r\n      clmmPriceLimit,\r\n    },\r\n    data,\r\n  );\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nfunction clmmPriceLimitX64InsData(x64Price: string | undefined, inputIsA: boolean): BN {\r\n  if (x64Price) {\r\n    if (inputIsA) {\r\n      const _m = new BN(x64Price).div(new BN(25));\r\n      return _m.gt(MIN_SQRT_PRICE_X64_ADD_ONE) ? _m : MIN_SQRT_PRICE_X64_ADD_ONE;\r\n    } else {\r\n      const _m = new BN(x64Price).mul(new BN(25));\r\n      return _m.lt(MAX_SQRT_PRICE_X64_SUB_ONE) ? _m : MAX_SQRT_PRICE_X64_SUB_ONE;\r\n    }\r\n  } else {\r\n    return inputIsA ? MIN_SQRT_PRICE_X64_ADD_ONE : MAX_SQRT_PRICE_X64_SUB_ONE;\r\n  }\r\n}\r\n\r\nexport function makeSwapInstruction({\r\n  routeProgram,\r\n  ownerInfo,\r\n  inputMint,\r\n  swapInfo,\r\n}: MakeSwapInstructionParam): ReturnTypeMakeSwapInstruction {\r\n  if (swapInfo.routeType === \"amm\") {\r\n    if (swapInfo.poolInfo[0].version === 6) {\r\n      const poolKeys = swapInfo.poolKey[0] as ClmmKeys;\r\n      const _poolKey = jsonInfo2PoolKeys(poolKeys);\r\n      const sqrtPriceLimitX64 = inputMint.equals(_poolKey.mintA.address)\r\n        ? MIN_SQRT_PRICE_X64.add(ONE)\r\n        : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n      return ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo: poolKeys,\r\n        poolKeys,\r\n        observationId: swapInfo.poolInfo[0].observationId,\r\n        ownerInfo: {\r\n          wallet: ownerInfo.wallet,\r\n          tokenAccountA: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.sourceToken : ownerInfo.destinationToken,\r\n          tokenAccountB: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.destinationToken : ownerInfo.sourceToken,\r\n        },\r\n        inputMint,\r\n        amountIn: swapInfo.amountIn.amount.raw,\r\n        amountOutMin: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts: swapInfo.remainingAccounts[0] ?? [],\r\n      });\r\n    } else if (swapInfo.poolInfo[0].version === 7) {\r\n      const poolInfo = swapInfo.poolInfo[0];\r\n      const baseIn = inputMint.toString() === swapInfo.poolInfo[0].mintA.address;\r\n\r\n      return {\r\n        signers: [],\r\n        instructions: [\r\n          makeSwapCpmmBaseInInstruction(\r\n            poolInfo.programId,\r\n            ownerInfo.wallet,\r\n            poolInfo.authority,\r\n            poolInfo.configId,\r\n            poolInfo.id,\r\n            ownerInfo.sourceToken!,\r\n            ownerInfo.destinationToken!,\r\n            baseIn ? poolInfo.vaultA : poolInfo.vaultB,\r\n            baseIn ? poolInfo.vaultB : poolInfo.vaultA,\r\n            baseIn ? poolInfo.mintProgramA : poolInfo.mintProgramB,\r\n            baseIn ? poolInfo.mintProgramB : poolInfo.mintProgramA,\r\n            new PublicKey(poolInfo[baseIn ? \"mintA\" : \"mintB\"].address),\r\n            new PublicKey(poolInfo[baseIn ? \"mintB\" : \"mintA\"].address),\r\n            poolInfo.observationId,\r\n\r\n            swapInfo.amountIn.amount.raw,\r\n            swapInfo.minAmountOut.amount.raw,\r\n          ),\r\n        ],\r\n        lookupTableAddress: [],\r\n        instructionTypes: [baseIn ? InstructionType.CpmmSwapBaseIn : InstructionType.CpmmSwapBaseOut],\r\n        address: {},\r\n      };\r\n    } else {\r\n      const _poolKey = swapInfo.poolKey[0] as AmmV4Keys | AmmV5Keys;\r\n\r\n      return {\r\n        signers: [],\r\n        instructions: [\r\n          makeAMMSwapInstruction({\r\n            poolKeys: _poolKey,\r\n            version: swapInfo.poolInfo[0].pooltype.includes(\"StablePool\") ? 5 : 4,\r\n            userKeys: {\r\n              tokenAccountIn: ownerInfo.sourceToken,\r\n              tokenAccountOut: ownerInfo.destinationToken,\r\n              owner: ownerInfo.wallet,\r\n            },\r\n            amountIn: swapInfo.amountIn.amount.raw,\r\n            amountOut: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n            fixedSide: \"in\",\r\n          }),\r\n        ],\r\n        lookupTableAddress: _poolKey.lookupTableAccount ? [_poolKey.lookupTableAccount] : [],\r\n        instructionTypes: [\r\n          swapInfo.poolInfo[0].pooltype.includes(\"StablePool\")\r\n            ? InstructionType.AmmV5SwapBaseIn\r\n            : InstructionType.AmmV4SwapBaseIn,\r\n        ],\r\n        address: {},\r\n      };\r\n    }\r\n  } else if (swapInfo.routeType === \"route\") {\r\n    const poolInfo1 = swapInfo.poolInfo[0];\r\n    const poolInfo2 = swapInfo.poolInfo[1];\r\n    const poolKey1 = swapInfo.poolKey[0];\r\n    const poolKey2 = swapInfo.poolKey[1];\r\n\r\n    if (ownerInfo.routeToken === undefined) throw Error(\"owner route token account check error\");\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: [\r\n        routeInstruction(\r\n          routeProgram,\r\n          ownerInfo.wallet,\r\n          ownerInfo.sourceToken,\r\n          ownerInfo.routeToken,\r\n          ownerInfo.destinationToken,\r\n\r\n          inputMint.toString(),\r\n          swapInfo.middleToken.mint.toString(),\r\n          swapInfo.outputMint.toString(),\r\n\r\n          poolInfo1,\r\n          poolInfo2,\r\n          poolKey1,\r\n          poolKey2,\r\n\r\n          swapInfo.amountIn.amount.raw,\r\n          swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n\r\n          swapInfo.remainingAccounts,\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.RouteSwap],\r\n      lookupTableAddress: [poolKey1.lookupTableAccount, poolKey2.lookupTableAccount].filter(\r\n        (a) => a !== undefined,\r\n      ) as string[],\r\n      address: {},\r\n    };\r\n  } else {\r\n    throw Error(\"route type error\");\r\n  }\r\n}\r\n\r\nexport interface ApiSwapV1Out {\r\n  id: string;\r\n  success: boolean;\r\n  version: \"V0\" | \"V1\";\r\n  openTime?: undefined;\r\n  msg: undefined;\r\n  data: {\r\n    swapType: \"BaseIn\" | \"BaseOut\";\r\n    inputMint: string;\r\n    inputAmount: string;\r\n    outputMint: string;\r\n    outputAmount: string;\r\n    otherAmountThreshold: string;\r\n    slippageBps: number;\r\n    priceImpactPct: number;\r\n    routePlan: {\r\n      poolId: string;\r\n      inputMint: string;\r\n      outputMint: string;\r\n      feeMint: string;\r\n      feeRate: number;\r\n      feeAmount: string;\r\n      remainingAccounts?: string[];\r\n      lastPoolPriceX64?: string;\r\n    }[];\r\n  };\r\n}\r\n\r\nexport function swapBaseInAutoAccount({\r\n  programId,\r\n  wallet,\r\n  amount,\r\n  inputAccount,\r\n  outputAccount,\r\n  routeInfo,\r\n  poolKeys,\r\n}: {\r\n  programId: PublicKey;\r\n  wallet: PublicKey;\r\n  amount: BN;\r\n  inputAccount: PublicKey;\r\n  outputAccount: PublicKey;\r\n  routeInfo: ApiSwapV1Out;\r\n  poolKeys: PoolKeys[];\r\n}): TransactionInstruction {\r\n  if (routeInfo.success === false) throw Error(\"route info error\");\r\n  const clmmPriceLimit: BN[] = [];\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: wallet, isSigner: true }),\r\n  ];\r\n  const cacheAccount: { [mint: string]: PublicKey } = {\r\n    [routeInfo.data.inputMint]: inputAccount,\r\n    [routeInfo.data.outputMint]: outputAccount,\r\n  };\r\n  keys.push(accountMeta({ pubkey: cacheAccount[routeInfo.data.inputMint] }));\r\n  keys.push(accountMeta({ pubkey: cacheAccount[routeInfo.data.outputMint] }));\r\n  for (let index = 0; index < poolKeys.length; index++) {\r\n    const _routeInfo = routeInfo.data.routePlan[index];\r\n    const _poolKey = poolKeys[index];\r\n    const inputIsA = _routeInfo.inputMint === _poolKey.mintA.address;\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.programId), isWritable: false }));\r\n    if (index === poolKeys.length - 1) {\r\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.outputMint] }));\r\n    } else {\r\n      const mint = _routeInfo.outputMint;\r\n      if (cacheAccount[mint] === undefined) {\r\n        const ata = getATAAddress(\r\n          wallet,\r\n          new PublicKey(mint),\r\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\r\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\r\n            ? new PublicKey(inputIsA ? _poolKey.mintB.programId : _poolKey.mintA.programId)\r\n            : TOKEN_PROGRAM_ID,\r\n        ).publicKey;\r\n        cacheAccount[mint] = ata;\r\n      }\r\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\r\n    }\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.inputMint) }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.outputMint) }));\r\n    if (_poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58()) {\r\n      const poolKey = _poolKey as ClmmKeys;\r\n\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\r\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.exBitmapAccount) }));\r\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_routeInfo.lastPoolPriceX64, inputIsA));\r\n      for (const item of _routeInfo.remainingAccounts ?? []) {\r\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\r\n      }\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_STABLE.toBase58()) {\r\n      const poolKey = _poolKey as AmmV5Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketProgramId), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketAuthority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketQuoteVault) }));\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_V4.toBase58()) {\r\n      const poolKey = _poolKey as AmmV4Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId), isWritable: false }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority), isWritable: false }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrder) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.bids) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.asks) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.eventQueue) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultA) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultB) }))\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()) {\r\n      const poolKey = _poolKey as CpmmKeys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\r\n    } else throw Error(\"pool type error\");\r\n  }\r\n  const dataLayout = struct([\r\n    u8(\"insId\"),\r\n    u64(\"amountIn\"),\r\n    u64(\"amountOut\"),\r\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\r\n  ]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      insId: 0,\r\n      amountIn: amount,\r\n      amountOut: new BN(routeInfo.data.otherAmountThreshold),\r\n      clmmPriceLimit,\r\n    },\r\n    data,\r\n  );\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function swapBaseOutAutoAccount({\r\n  programId,\r\n  wallet,\r\n  inputAccount,\r\n  outputAccount,\r\n  routeInfo,\r\n  poolKeys,\r\n}: {\r\n  programId: PublicKey;\r\n  wallet: PublicKey;\r\n  inputAccount: PublicKey;\r\n  outputAccount: PublicKey;\r\n  routeInfo: ApiSwapV1Out;\r\n  poolKeys: PoolKeys[];\r\n}): TransactionInstruction {\r\n  if (routeInfo.success === false) throw Error(\"route info error\");\r\n  const clmmPriceLimit: BN[] = [];\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: wallet, isSigner: true }),\r\n  ];\r\n  const cacheAccount: { [mint: string]: PublicKey } = {\r\n    [routeInfo.data.inputMint]: inputAccount,\r\n    [routeInfo.data.outputMint]: outputAccount,\r\n  };\r\n  for (let index = poolKeys.length - 1; index >= 0; index--) {\r\n    const _routeInfo = routeInfo.data.routePlan[index];\r\n    const _poolKey = poolKeys[index];\r\n    const inputIsA = _routeInfo.inputMint === _poolKey.mintA.address;\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.programId) }));\r\n    if (index === 0) {\r\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.inputMint] }));\r\n    } else {\r\n      const mint = _routeInfo.inputMint;\r\n      if (cacheAccount[mint] === undefined) {\r\n        const ata = getATAAddress(\r\n          wallet,\r\n          new PublicKey(mint),\r\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\r\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\r\n            ? new PublicKey(inputIsA ? _poolKey.mintA.programId : _poolKey.mintB.programId)\r\n            : TOKEN_PROGRAM_ID,\r\n        ).publicKey;\r\n        cacheAccount[mint] = ata;\r\n      }\r\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\r\n    }\r\n    if (index === poolKeys.length - 1) {\r\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.outputMint] }));\r\n    } else {\r\n      const mint = _routeInfo.outputMint;\r\n      if (cacheAccount[mint] === undefined) {\r\n        const ata = getATAAddress(\r\n          wallet,\r\n          new PublicKey(mint),\r\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\r\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\r\n            ? new PublicKey(inputIsA ? _poolKey.mintB.programId : _poolKey.mintA.programId)\r\n            : TOKEN_PROGRAM_ID,\r\n        ).publicKey;\r\n        cacheAccount[mint] = ata;\r\n      }\r\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\r\n    }\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.inputMint) }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.outputMint) }));\r\n    if (_poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58()) {\r\n      const poolKey = _poolKey as ClmmKeys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\r\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.exBitmapAccount) }));\r\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_routeInfo.lastPoolPriceX64, inputIsA));\r\n      for (const item of _routeInfo.remainingAccounts ?? []) {\r\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\r\n      }\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_STABLE.toBase58()) {\r\n      const poolkey = _poolKey as AmmV5Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketProgramId), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketAuthority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketQuoteVault) }));\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_V4.toBase58()) {\r\n      const poolkey = _poolKey as AmmV4Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId), isWritable: false }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority), isWritable: false }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrder) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.bids) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.asks) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.eventQueue) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultA) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultB) }))\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()) {\r\n      const poolkey = _poolKey as CpmmKeys;\r\n\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolkey.vault.A : poolkey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolkey.vault.B : poolkey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.observationId) }));\r\n    } else throw Error(\"pool type error\");\r\n  }\r\n  const dataLayout = struct([\r\n    u8(\"insId\"),\r\n    u64(\"amountIn\"),\r\n    u64(\"amountOut\"),\r\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\r\n  ]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      insId: 1,\r\n      amountIn: new BN(routeInfo.data.otherAmountThreshold),\r\n      amountOut: new BN(routeInfo.data.outputAmount),\r\n      clmmPriceLimit,\r\n    },\r\n    data,\r\n  );\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n","import { Connection, PublicKey, Signer, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport { findProgramAddress, forecastTransactionSize, getMultipleAccountsInfo } from \"@/common\";\r\nimport { blob, publicKey, seq, struct, u64, u8 } from \"@/marshmallow\";\r\nimport { Token } from \"@/module\";\r\nimport ModuleBase from \"../moduleBase\";\r\n\r\nexport interface SHOW_INFO {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n  ammId: PublicKey;\r\n  ownerAccountId: PublicKey;\r\n  snapshotLpAmount: BN;\r\n\r\n  openTime: number;\r\n  endTime: number;\r\n\r\n  project: typeof Utils1216.VERSION_PROJECT[number];\r\n\r\n  canClaim: boolean;\r\n  canClaimErrorType: canClaimErrorType;\r\n\r\n  tokenInfo: {\r\n    mintAddress: PublicKey;\r\n    mintVault: PublicKey;\r\n    mintDecimals: number;\r\n    perLpLoss: BN;\r\n    debtAmount: BN;\r\n  }[];\r\n}\r\n\r\nexport type canClaimErrorType = \"outOfOperationalTime\" | \"alreadyClaimIt\" | undefined;\r\n\r\nexport default class Utils1216 extends ModuleBase {\r\n  static CLAIMED_NUM = 3;\r\n  static POOL_LAYOUT = struct([\r\n    blob(8),\r\n    u8(\"bump\"),\r\n    u8(\"status\"),\r\n    u64(\"openTime\"),\r\n    u64(\"endTime\"),\r\n    publicKey(\"ammId\"),\r\n\r\n    seq(\r\n      struct([\r\n        u8(\"mintDecimals\"),\r\n        publicKey(\"mintAddress\"),\r\n        publicKey(\"mintVault\"),\r\n        u64(\"perLpLoss\"),\r\n        u64(\"totalClaimedAmount\"),\r\n      ]),\r\n      Utils1216.CLAIMED_NUM,\r\n      \"tokenInfo\",\r\n    ),\r\n    seq(u64(), 10, \"padding\"),\r\n  ]);\r\n\r\n  static OWNER_LAYOUT = struct([\r\n    blob(8),\r\n    u8(\"bump\"),\r\n    u8(\"version\"),\r\n    publicKey(\"poolId\"),\r\n    publicKey(\"owner\"),\r\n    u64(\"lpAmount\"),\r\n\r\n    seq(\r\n      struct([publicKey(\"mintAddress\"), u64(\"debtAmount\"), u64(\"claimedAmount\")]),\r\n      Utils1216.CLAIMED_NUM,\r\n      \"tokenInfo\",\r\n    ),\r\n    seq(u64(), 4, \"padding\"),\r\n  ]);\r\n\r\n  static DEFAULT_POOL_ID = [\r\n    \"58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2\",\r\n    \"6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg\",\r\n    \"AVs9TA4nWDzfPJE9gGVNJMVhcQy3V9PGazuz33BfG2RA\",\r\n    \"DVa7Qmb5ct9RCpaU7UTpSaf3GVMYz17vNVU67XpdCRut\",\r\n    \"7XawhbbxtsRcQA8KTkHT9f9nc6d69UwqCDh6U5EEbEmX\",\r\n    \"6a1CsrpeZubDjEJE9s1CMVheB6HWM5d7m1cj2jkhyXhj\",\r\n    \"EoNrn8iUhwgJySD1pHu8Qxm5gSQqLK3za4m8xzD2RuEb\",\r\n    \"AceAyRTWt4PyB2pHqf2qhDgNZDtKVNaxgL8Ru3V4aN1P\",\r\n    \"6tmFJbMk5yVHFcFy7X2K8RwHjKLr6KVFLYXpgpBNeAxB\",\r\n  ].map((i) => new PublicKey(i));\r\n\r\n  static SEED_CONFIG = {\r\n    pool: {\r\n      id: Buffer.from(\"pool_seed\", \"utf8\"),\r\n    },\r\n    owner: {\r\n      id: Buffer.from(\"user_claim_seed\", \"utf8\"),\r\n    },\r\n  };\r\n\r\n  static VERSION_PROJECT = [undefined, \"Francium\", \"Tulip\", \"Larix\"] as const;\r\n\r\n  // pda\r\n  static getPdaPoolId(\r\n    programId: PublicKey,\r\n    ammId: PublicKey,\r\n  ): {\r\n    publicKey: PublicKey;\r\n    nonce: number;\r\n  } {\r\n    return findProgramAddress([Utils1216.SEED_CONFIG.pool.id, ammId.toBuffer()], programId);\r\n  }\r\n\r\n  static getPdaOwnerId(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    owner: PublicKey,\r\n    version: number,\r\n  ): {\r\n    publicKey: PublicKey;\r\n    nonce: number;\r\n  } {\r\n    return findProgramAddress(\r\n      [\r\n        Utils1216.SEED_CONFIG.owner.id,\r\n        poolId.toBuffer(),\r\n        owner.toBuffer(),\r\n        // new BN(version).toBuffer()\r\n        Buffer.from(new BN(version).toArray()),\r\n      ],\r\n      programId,\r\n    );\r\n  }\r\n\r\n  static async getAllInfo({\r\n    connection,\r\n    programId,\r\n    poolIds,\r\n    wallet,\r\n    chainTime,\r\n  }: {\r\n    connection: Connection;\r\n    programId: PublicKey;\r\n    poolIds: PublicKey[];\r\n    wallet: PublicKey;\r\n    chainTime: number;\r\n  }): Promise<SHOW_INFO[]> {\r\n    if (poolIds.length === 0) return [];\r\n\r\n    const allPoolPda = poolIds.map((id) => Utils1216.getPdaPoolId(programId, id).publicKey);\r\n\r\n    const allOwnerPda: PublicKey[] = [];\r\n    for (let itemVersion = 0; itemVersion < Utils1216.VERSION_PROJECT.length; itemVersion++) {\r\n      allOwnerPda.push(\r\n        ...allPoolPda.map((id) => Utils1216.getPdaOwnerId(programId, id, wallet, itemVersion).publicKey),\r\n      );\r\n    }\r\n\r\n    const pdaInfo = await getMultipleAccountsInfo(connection, [...allPoolPda, ...allOwnerPda]);\r\n\r\n    const info: SHOW_INFO[] = [];\r\n    for (let index = 0; index < pdaInfo.length; index++) {\r\n      const version = Math.floor(index / poolIds.length);\r\n      const i = index % poolIds.length;\r\n\r\n      const itemPoolId = allPoolPda[i];\r\n      const itemOwnerId = allOwnerPda[index];\r\n      const itemPoolInfoS = pdaInfo[i];\r\n      const itemOwnerInfoS = pdaInfo[poolIds.length + index];\r\n      if (!(itemPoolInfoS && itemOwnerInfoS)) continue;\r\n      if (\r\n        itemPoolInfoS.data.length !== Utils1216.POOL_LAYOUT.span ||\r\n        itemOwnerInfoS.data.length !== Utils1216.OWNER_LAYOUT.span\r\n      )\r\n        continue;\r\n\r\n      const itemPoolInfo = Utils1216.POOL_LAYOUT.decode(itemPoolInfoS.data);\r\n      const itemOwnerInfo = Utils1216.OWNER_LAYOUT.decode(itemOwnerInfoS.data);\r\n\r\n      const openTime = itemPoolInfo.openTime.toNumber();\r\n      const endTime = itemPoolInfo.endTime.toNumber();\r\n\r\n      const hasCanClaimToken =\r\n        itemOwnerInfo.tokenInfo.map((i) => i.debtAmount.gt(new BN(0))).filter((i) => !i).length !== 3;\r\n      const inCanClaimTime = chainTime > openTime && chainTime < endTime && itemPoolInfo.status === 1;\r\n\r\n      const canClaim = hasCanClaimToken && inCanClaimTime;\r\n\r\n      info.push({\r\n        programId,\r\n        poolId: itemPoolId,\r\n        ammId: itemPoolInfo.ammId,\r\n        ownerAccountId: itemOwnerId,\r\n        snapshotLpAmount: itemOwnerInfo.lpAmount,\r\n\r\n        project: Utils1216.VERSION_PROJECT[version],\r\n\r\n        openTime,\r\n        endTime,\r\n\r\n        canClaim,\r\n        canClaimErrorType: !hasCanClaimToken ? \"alreadyClaimIt\" : !inCanClaimTime ? \"outOfOperationalTime\" : undefined,\r\n\r\n        tokenInfo: itemPoolInfo.tokenInfo.map((itemPoolToken, i) => ({\r\n          mintAddress: itemPoolToken.mintAddress,\r\n          mintVault: itemPoolToken.mintVault,\r\n          mintDecimals: itemPoolToken.mintDecimals,\r\n          perLpLoss: itemPoolToken.perLpLoss,\r\n          debtAmount: itemOwnerInfo.tokenInfo[i].debtAmount.add(itemOwnerInfo.tokenInfo[i].claimedAmount),\r\n        })),\r\n      });\r\n    }\r\n\r\n    return info;\r\n  }\r\n\r\n  public async makeClaimTransaction({\r\n    poolInfo,\r\n    ownerInfo,\r\n    feePayer,\r\n  }: {\r\n    connection: Connection;\r\n    poolInfo: SHOW_INFO;\r\n    ownerInfo: {\r\n      wallet?: PublicKey;\r\n      associatedOnly: boolean;\r\n    };\r\n    feePayer?: PublicKey;\r\n  }): Promise<\r\n    {\r\n      transaction: Transaction;\r\n      signer: Signer[];\r\n    }[]\r\n  > {\r\n    if (!ownerInfo.wallet) this.scope.checkOwner();\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const wallet = ownerInfo.wallet || this.scope.ownerPubKey;\r\n\r\n    const ownerVaultList: PublicKey[] = [];\r\n    for (const itemToken of poolInfo.tokenInfo) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        mint: itemToken.mintAddress,\r\n        owner: this.scope.ownerPubKey,\r\n        notUseTokenAccount: itemToken.mintAddress.equals(Token.WSOL.mint),\r\n        createInfo: {\r\n          payer: wallet,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !itemToken.mintAddress.equals(Token.WSOL.mint),\r\n\r\n        associatedOnly: itemToken.mintAddress.equals(Token.WSOL.mint) ? false : ownerInfo.associatedOnly,\r\n      });\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n      ownerVaultList.push(account!);\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        Utils1216.makeClaimInstruction({\r\n          programId: poolInfo.programId,\r\n          poolInfo,\r\n          ownerInfo: {\r\n            wallet,\r\n            ownerPda: poolInfo.ownerAccountId,\r\n            claimAddress: ownerVaultList,\r\n          },\r\n        }),\r\n      ],\r\n    });\r\n    const { transaction, signers } = txBuilder.build();\r\n\r\n    return [\r\n      {\r\n        transaction,\r\n        signer: signers,\r\n      },\r\n    ];\r\n  }\r\n\r\n  public async makeClaimAllTransaction({\r\n    poolInfos,\r\n    ownerInfo,\r\n    feePayer,\r\n  }: {\r\n    poolInfos: SHOW_INFO[];\r\n    ownerInfo: {\r\n      wallet?: PublicKey;\r\n      associatedOnly: boolean;\r\n    };\r\n    feePayer?: PublicKey;\r\n  }): Promise<\r\n    {\r\n      transaction: Transaction;\r\n      signer: Signer[];\r\n    }[]\r\n  > {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const wallet = ownerInfo.wallet || this.scope.ownerPubKey;\r\n\r\n    const tempNewVault: { [mint: string]: PublicKey } = {};\r\n\r\n    for (const poolInfo of poolInfos) {\r\n      const ownerVaultList: PublicKey[] = [];\r\n      for (const itemToken of poolInfo.tokenInfo) {\r\n        const { account: tempVault, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          mint: itemToken.mintAddress,\r\n          owner: this.scope.ownerPubKey,\r\n          notUseTokenAccount: itemToken.mintAddress.equals(Token.WSOL.mint),\r\n          createInfo: {\r\n            payer: wallet,\r\n            amount: 0,\r\n          },\r\n          skipCloseAccount: !itemToken.mintAddress.equals(Token.WSOL.mint),\r\n\r\n          associatedOnly: itemToken.mintAddress.equals(Token.WSOL.mint) ? false : ownerInfo.associatedOnly,\r\n        });\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n\r\n        if (tempVault) {\r\n          tempNewVault[itemToken.mintAddress.toString()] = tempVault;\r\n          ownerVaultList.push(tempVault);\r\n        }\r\n      }\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          Utils1216.makeClaimInstruction({\r\n            programId: poolInfo.programId,\r\n            poolInfo,\r\n            ownerInfo: {\r\n              wallet,\r\n              ownerPda: poolInfo.ownerAccountId,\r\n              claimAddress: ownerVaultList,\r\n            },\r\n          }),\r\n        ],\r\n      });\r\n    }\r\n\r\n    const { transaction, signers } = txBuilder.build();\r\n    const instructions = txBuilder.allInstructions;\r\n\r\n    if (forecastTransactionSize(instructions, [wallet, ...signers.map((s) => s.publicKey)])) {\r\n      return [\r\n        {\r\n          transaction,\r\n          signer: signers,\r\n        },\r\n      ];\r\n    } else {\r\n      return [\r\n        {\r\n          transaction: new Transaction().add(...instructions.slice(0, txBuilder.AllTxData.instructions.length - 1)),\r\n          signer: signers,\r\n        },\r\n        {\r\n          transaction: new Transaction().add(...instructions.slice(txBuilder.AllTxData.instructions.length - 1)),\r\n          signer: [],\r\n        },\r\n        { transaction: new Transaction().add(...txBuilder.AllTxData.endInstructions), signer: [] },\r\n      ];\r\n    }\r\n  }\r\n\r\n  static makeClaimInstruction({\r\n    programId,\r\n    poolInfo,\r\n    ownerInfo,\r\n  }: {\r\n    programId: PublicKey;\r\n\r\n    poolInfo: SHOW_INFO;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      ownerPda: PublicKey;\r\n      claimAddress: PublicKey[];\r\n    };\r\n  }): TransactionInstruction {\r\n    const dataLayout = struct([]);\r\n\r\n    const keys = [\r\n      { pubkey: ownerInfo.wallet, isSigner: true, isWritable: true },\r\n      { pubkey: poolInfo.poolId, isSigner: false, isWritable: true },\r\n      { pubkey: ownerInfo.ownerPda, isSigner: false, isWritable: true },\r\n\r\n      ...ownerInfo.claimAddress.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      ...poolInfo.tokenInfo.map(({ mintVault }) => ({ pubkey: mintVault, isSigner: false, isWritable: true })),\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({}, data);\r\n    const aData = Buffer.from([...[10, 66, 208, 184, 161, 6, 191, 98], ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { IdoKeysData, OwnerIdoInfo } from \"../../api/type\";\r\nimport { IDO_ALL_PROGRAM } from \"../../common/programId\";\r\nimport { WSOLMint } from \"../../common/pubKey\";\r\nimport { MakeTxData } from \"../../common/txTool/txTool\";\r\nimport { TxVersion } from \"../../common/txTool/txType\";\r\nimport { jsonInfo2PoolKeys } from \"../../common/utility\";\r\nimport ModuleBase from \"../moduleBase\";\r\nimport { makeClaimInstruction, makeClaimInstructionV4 } from \"./instruction\";\r\n\r\nconst PROGRAM_TO_VERSION = {\r\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V1.toString()]: 1,\r\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V2.toString()]: 2,\r\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V3.toString()]: 3,\r\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V4.toString()]: 4,\r\n};\r\n\r\nexport default class MarketV2 extends ModuleBase {\r\n  public async claim<T extends TxVersion>({\r\n    ownerInfo,\r\n    idoKeys,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    feePayer,\r\n  }: {\r\n    ownerInfo: OwnerIdoInfo[keyof OwnerIdoInfo] & { userIdoInfo: string };\r\n    idoKeys: IdoKeysData;\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const version = PROGRAM_TO_VERSION[idoKeys.programId];\r\n\r\n    if (!version) this.logAndCreateError(\"invalid version\", version);\r\n    const poolConfigKey = jsonInfo2PoolKeys(idoKeys);\r\n\r\n    const [hasUnClaimedProject, hasUnClaimedBuy] = [!new BN(ownerInfo.coin).isZero(), !new BN(ownerInfo.pc).isZero()];\r\n\r\n    const userProjectUseSolBalance = poolConfigKey.projectInfo.mint.address.equals(WSOLMint);\r\n    const { account: userProjectTokenAccount, instructionParams: userProjectInstructionParams } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolConfigKey.projectInfo.mint.programId,\r\n        mint: poolConfigKey.projectInfo.mint.address,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !userProjectUseSolBalance,\r\n        notUseTokenAccount: userProjectUseSolBalance,\r\n        associatedOnly: userProjectUseSolBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n\r\n    if (!userProjectTokenAccount && hasUnClaimedProject)\r\n      this.logAndCreateError(\"target token accounts not found\", \"mint\", idoKeys.projectInfo.mint.address);\r\n    hasUnClaimedProject && userProjectInstructionParams && txBuilder.addInstruction(userProjectInstructionParams);\r\n\r\n    const buyMintUseSolBalance = poolConfigKey.buyInfo.mint.address.equals(WSOLMint);\r\n    const { account: userBuyTokenAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n      tokenProgram: poolConfigKey.buyInfo.mint.programId,\r\n      mint: poolConfigKey.buyInfo.mint.address,\r\n      owner: this.scope.ownerPubKey,\r\n      createInfo: {\r\n        payer: this.scope.ownerPubKey,\r\n        amount: 0,\r\n      },\r\n      skipCloseAccount: !buyMintUseSolBalance,\r\n      notUseTokenAccount: buyMintUseSolBalance,\r\n      associatedOnly: buyMintUseSolBalance ? false : associatedOnly,\r\n      checkCreateATAOwner,\r\n    });\r\n    if (!userProjectTokenAccount && hasUnClaimedBuy)\r\n      this.logAndCreateError(\"target token accounts not found\", \"mint\", idoKeys.projectInfo.mint.address);\r\n    hasUnClaimedBuy && instructionParams && txBuilder.addInstruction(instructionParams);\r\n\r\n    if (!userProjectTokenAccount || !userBuyTokenAccount)\r\n      this.logAndCreateError(\r\n        \"target token accounts not found\",\r\n        \"mint\",\r\n        idoKeys.projectInfo.mint.address,\r\n        idoKeys.buyInfo.mint.address,\r\n      );\r\n\r\n    if (version === 3) {\r\n      return txBuilder\r\n        .addInstruction({\r\n          instructions: [\r\n            ...(hasUnClaimedProject\r\n              ? [\r\n                makeClaimInstruction<\"3\">(\r\n                  { programId: poolConfigKey.programId },\r\n                  {\r\n                    idoId: poolConfigKey.id,\r\n                    authority: poolConfigKey.authority,\r\n                    poolTokenAccount: poolConfigKey.projectInfo.vault,\r\n                    userTokenAccount: userProjectTokenAccount!,\r\n                    userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\r\n                    userOwner: this.scope.ownerPubKey,\r\n                  },\r\n                ),\r\n              ]\r\n              : []),\r\n            ...(hasUnClaimedBuy\r\n              ? [\r\n                makeClaimInstruction<\"3\">(\r\n                  { programId: new PublicKey(idoKeys.programId) },\r\n                  {\r\n                    idoId: poolConfigKey.id,\r\n                    authority: poolConfigKey.authority,\r\n                    poolTokenAccount: poolConfigKey.buyInfo.vault,\r\n                    userTokenAccount: userBuyTokenAccount!,\r\n                    userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\r\n                    userOwner: this.scope.ownerPubKey,\r\n                  },\r\n                ),\r\n              ]\r\n              : []),\r\n          ],\r\n        })\r\n        .versionBuild({ txVersion }) as Promise<MakeTxData>;\r\n    }\r\n    if (version < 3) {\r\n      if (!hasUnClaimedProject && !hasUnClaimedBuy) this.logAndCreateError(\"no claimable rewards\");\r\n      return txBuilder\r\n        .addInstruction({\r\n          instructions: [\r\n            makeClaimInstruction<\"\">(\r\n              { programId: poolConfigKey.programId },\r\n              {\r\n                idoId: poolConfigKey.id,\r\n                authority: poolConfigKey.authority,\r\n                poolQuoteTokenAccount: poolConfigKey.buyInfo.vault,\r\n                poolBaseTokenAccount: poolConfigKey.projectInfo.vault,\r\n                userQuoteTokenAccount: userBuyTokenAccount!,\r\n                userBaseTokenAccount: userProjectTokenAccount!,\r\n                userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\r\n                userOwner: this.scope.ownerPubKey,\r\n              },\r\n            ),\r\n          ],\r\n        })\r\n        .versionBuild({ txVersion }) as Promise<MakeTxData>;\r\n    }\r\n\r\n    const keys = {\r\n      poolConfig: {\r\n        id: poolConfigKey.id,\r\n        programId: poolConfigKey.programId,\r\n        authority: poolConfigKey.authority,\r\n        baseVault: poolConfigKey.projectInfo.vault,\r\n        quoteVault: poolConfigKey.buyInfo.vault,\r\n        baseToken: idoKeys.projectInfo.mint,\r\n        quoteToken: idoKeys.buyInfo.mint,\r\n      },\r\n      userKeys: {\r\n        baseTokenAccount: userProjectTokenAccount!,\r\n        quoteTokenAccount: userBuyTokenAccount!,\r\n        ledgerAccount: new PublicKey(ownerInfo.userIdoInfo),\r\n        owner: this.scope.ownerPubKey,\r\n      },\r\n    };\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [\r\n          ...(hasUnClaimedProject ? [makeClaimInstructionV4({ ...keys, side: \"base\" })] : []),\r\n          ...(hasUnClaimedBuy ? [makeClaimInstructionV4({ ...keys, side: \"quote\" })] : []),\r\n        ],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData>;\r\n  }\r\n}\r\n","import { PublicKey, SYSVAR_CLOCK_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { CLOCK_PROGRAM_ID, RENT_PROGRAM_ID, SYSTEM_PROGRAM_ID } from \"@/common/pubKey\";\r\nimport { claimLayout, purchaseLayout } from \"./layout\";\r\nimport {\r\n  ClaimInstructionKeys,\r\n  ClaimInstructionKeysV3,\r\n  IdoClaimInstructionParams,\r\n  PurchaseInstructionKeys,\r\n} from \"./type\";\r\n\r\nexport function makePurchaseInstruction({\r\n  programId,\r\n  amount,\r\n  instructionKeys,\r\n}: {\r\n  programId: PublicKey;\r\n  amount: string | number;\r\n  instructionKeys: PurchaseInstructionKeys;\r\n}): TransactionInstruction {\r\n  const keys = [\r\n    // system\r\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    // pubkeys\r\n    ...Object.entries(instructionKeys).map(([name, pubkey]) => ({\r\n      pubkey,\r\n      isSigner: name === \"userOwner\",\r\n      isWritable: ![\"authority\", \"userOwner\", \"userIdoCheck\", \"userStakeInfo\"].includes(name),\r\n    })),\r\n  ];\r\n\r\n  const data = Buffer.alloc(purchaseLayout.span);\r\n  purchaseLayout.encode({ instruction: 1, amount: Number(amount) }, data);\r\n\r\n  return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\nexport function makeClaimInstruction<Version extends \"\" | \"3\" = \"\">(\r\n  { programId }: { programId: PublicKey },\r\n  instructionKeys: Version extends \"3\" ? ClaimInstructionKeysV3 : ClaimInstructionKeys,\r\n): TransactionInstruction {\r\n  const keys = [\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ...Object.entries(instructionKeys).map(([name, pubkey]) => ({\r\n      pubkey,\r\n      isSigner: name === \"userOwner\",\r\n      isWritable: ![\"authority\", \"userOwner\"].includes(name),\r\n    })),\r\n  ];\r\n\r\n  const data = Buffer.alloc(claimLayout.span);\r\n  claimLayout.encode({ instruction: 2 }, data);\r\n\r\n  return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\nexport function makeClaimInstructionV4(params: IdoClaimInstructionParams): TransactionInstruction {\r\n  const { poolConfig, userKeys, side } = params;\r\n\r\n  const tokenAccount = side === \"base\" ? userKeys.baseTokenAccount : userKeys.quoteTokenAccount;\r\n  const vault = side === \"base\" ? poolConfig.baseVault : poolConfig.quoteVault;\r\n  const data = Buffer.alloc(claimLayout.span);\r\n  claimLayout.encode(\r\n    {\r\n      instruction: 2,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_CLOCK_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    // ido\r\n    {\r\n      pubkey: poolConfig.id,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: poolConfig.authority,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: vault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    // user\r\n    {\r\n      pubkey: tokenAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: userKeys.ledgerAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: userKeys.owner,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    },\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolConfig.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n","import { nu64, struct, u8 } from \"../../marshmallow\";\r\n\r\nexport const purchaseLayout = struct([u8(\"instruction\"), nu64(\"amount\")]);\r\nexport const claimLayout = struct([u8(\"instruction\")]);\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { findProgramAddress, ProgramAddress } from \"@/common\";\r\nimport { u16ToBytes } from \"../clmm\";\r\n\r\nexport const LAUNCHPAD_AUTH_SEED = Buffer.from(\"vault_auth_seed\", \"utf8\");\r\nexport const LAUNCHPAD_CONFIG_SEED = Buffer.from(\"global_config\", \"utf8\");\r\nexport const LAUNCHPAD_POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nexport const LAUNCHPAD_POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nexport const LAUNCHPAD_POOL_VESTING_SEED = Buffer.from(\"pool_vesting\", \"utf8\");\r\nexport const LAUNCHPAD_POOL_PLATFORM_SEED = Buffer.from(\"platform_config\", \"utf8\");\r\n\r\nexport function getPdaLaunchpadAuth(programId: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_AUTH_SEED], programId);\r\n}\r\n\r\nexport function getPdaLaunchpadConfigId(\r\n  programId: PublicKey,\r\n  mintB: PublicKey,\r\n  curveType: number,\r\n  index: number,\r\n): ProgramAddress {\r\n  return findProgramAddress(\r\n    [LAUNCHPAD_CONFIG_SEED, mintB.toBuffer(), u8ToBytes(curveType), u16ToBytes(index)],\r\n    programId,\r\n  );\r\n}\r\n\r\nexport function getPdaLaunchpadPoolId(programId: PublicKey, mintA: PublicKey, mintB: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_POOL_SEED, mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLaunchpadVaultId(programId: PublicKey, poolId: PublicKey, mint: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_POOL_VAULT_SEED, poolId.toBuffer(), mint.toBuffer()], programId);\r\n}\r\n\r\nexport function u8ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(1);\r\n  const view = new DataView(arr);\r\n  view.setUint8(0, num);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function getPdaCpiEvent(programId: PublicKey): ProgramAddress {\r\n  return findProgramAddress([Buffer.from(\"__event_authority\", \"utf8\")], programId);\r\n}\r\n\r\nexport function getPdaPlatformId(programId: PublicKey, platformAdminWallet: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_POOL_PLATFORM_SEED, platformAdminWallet.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaVestId(programId: PublicKey, poolId: PublicKey, owner: PublicKey): ProgramAddress {\r\n  return findProgramAddress([LAUNCHPAD_POOL_VESTING_SEED, poolId.toBuffer(), owner.toBuffer()], programId);\r\n}\r\n","import { PublicKey, SystemProgram, TransactionInstruction, AccountMeta } from \"@solana/web3.js\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport { publicKey, str, struct, u64, u8 } from \"@/marshmallow\";\r\nimport { RENT_PROGRAM_ID, METADATA_PROGRAM_ID } from \"@/common\";\r\nimport { getPdaCpiEvent } from \"./pda\";\r\nexport const anchorDataBuf = {\r\n  initialize: Buffer.from([175, 175, 109, 31, 13, 152, 155, 237]),\r\n  buyExactIn: Buffer.from([250, 234, 13, 123, 213, 156, 19, 236]),\r\n  buyExactOut: Buffer.from([24, 211, 116, 40, 105, 3, 153, 56]),\r\n  sellExactIn: Buffer.from([149, 39, 222, 155, 211, 124, 152, 26]),\r\n  sellExactOut: Buffer.from([95, 200, 71, 34, 8, 9, 11, 166]),\r\n  createVestingAccount: Buffer.from([129, 178, 2, 13, 217, 172, 230, 218]),\r\n  claimVestedToken: Buffer.from([49, 33, 104, 30, 189, 157, 79, 35]),\r\n\r\n  createPlatformConfig: Buffer.from([176, 90, 196, 175, 253, 113, 220, 20]),\r\n  claimPlatformFee: Buffer.from([156, 39, 208, 135, 76, 237, 61, 72]),\r\n  updatePlaformConfig: Buffer.from([195, 60, 76, 129, 146, 45, 67, 143]),\r\n};\r\n\r\nexport function initialize(\r\n  programId: PublicKey,\r\n\r\n  payer: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  metadataId: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  decimals: number,\r\n  name: string,\r\n  symbol: string,\r\n  uri: string,\r\n\r\n  curveParam: ({ type: \"ConstantCurve\"; totalSellA: BN } | { type: \"FixedCurve\" } | { type: \"LinearCurve\" }) & {\r\n    migrateType: \"amm\" | \"cpmm\";\r\n    supply: BN;\r\n    totalFundRaisingB: BN;\r\n  },\r\n\r\n  totalLockedAmount: BN,\r\n  cliffPeriod: BN,\r\n  unlockPeriod: BN,\r\n): TransactionInstruction {\r\n  const dataLayout1 = struct([u8(\"decimals\"), str(\"name\"), str(\"symbol\"), str(\"uri\")]);\r\n  const dataLayout3 = struct([u64(\"totalLockedAmount\"), u64(\"cliffPeriod\"), u64(\"unlockPeriod\")]);\r\n\r\n  const dataLayout21 = struct([u8(\"index\"), u64(\"supply\"), u64(\"totalFundRaisingB\"), u8(\"migrateType\")]);\r\n  const dataLayout22 = struct([\r\n    u8(\"index\"),\r\n    u64(\"supply\"),\r\n    u64(\"totalSellA\"),\r\n    u64(\"totalFundRaisingB\"),\r\n    u8(\"migrateType\"),\r\n  ]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: creator, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: true, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: metadataId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data1 = Buffer.alloc(\r\n    Buffer.from(name, \"utf-8\").length +\r\n    Buffer.from(symbol, \"utf-8\").length +\r\n    Buffer.from(uri, \"utf-8\").length +\r\n    4 * 3 +\r\n    1,\r\n  );\r\n  const data3 = Buffer.alloc(dataLayout3.span);\r\n  const data2 = Buffer.alloc(curveParam.type === \"ConstantCurve\" ? dataLayout22.span : dataLayout21.span);\r\n\r\n  dataLayout1.encode({ decimals, name, symbol, uri }, data1);\r\n  if (curveParam.type === \"ConstantCurve\") {\r\n    dataLayout22.encode({ index: 0, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"FixedCurve\") {\r\n    dataLayout21.encode({ index: 1, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"LinearCurve\") {\r\n    dataLayout21.encode({ index: 2, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  }\r\n\r\n  dataLayout3.encode({ totalLockedAmount, cliffPeriod, unlockPeriod }, data3);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initialize, ...data1, ...data2, ...data3]),\r\n  });\r\n}\r\nexport function buyExactInInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  amountB: BN,\r\n  minAmountA: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountB\"), u64(\"minAmountA\"), u64(\"shareFeeRate\")]);\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n  console.log({\r\n    amountB: amountB.toString(),\r\n    minAmountA: minAmountA.toString(),\r\n  });\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountB,\r\n      minAmountA,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.buyExactIn, ...data]),\r\n  });\r\n}\r\n\r\nexport function buyExactOutInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  amountA: BN,\r\n  maxAmountB: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountA\"), u64(\"maxAmountB\"), u64(\"shareFeeRate\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountA,\r\n      maxAmountB,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.buyExactOut, ...data]),\r\n  });\r\n}\r\n\r\nexport function sellExactInInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  amountA: BN,\r\n  minAmountB: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountA\"), u64(\"minAmountB\"), u64(\"shareFeeRate\")]);\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountA,\r\n      minAmountB,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.sellExactIn, ...data]),\r\n  });\r\n}\r\n\r\nexport function sellExactOut(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  amountB: BN,\r\n  maxAmountA: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountB\"), u64(\"maxAmountA\"), u64(\"shareFeeRate\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountB,\r\n      maxAmountA,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.sellExactOut, ...data]),\r\n  });\r\n}\r\n\r\nexport function claimVestedToken(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n\r\n  vestingRecord: PublicKey,\r\n\r\n  userTokenAccountA: PublicKey,\r\n  vaultA: PublicKey,\r\n  mintA: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vestingRecord, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({}, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.claimVestedToken, ...data]),\r\n  });\r\n}\r\n\r\nexport function createVestingAccount(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  beneficiary: PublicKey,\r\n  poolId: PublicKey,\r\n\r\n  vestingRecord: PublicKey,\r\n  shareAmount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"shareAmount\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: beneficiary, isSigner: false, isWritable: true },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vestingRecord, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ shareAmount }, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.createVestingAccount, ...data]),\r\n  });\r\n}\r\n\r\nexport function claimPlatformFee(\r\n  programId: PublicKey,\r\n  platformClaimFeeWallet: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n  platformId: PublicKey,\r\n  vaultB: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformClaimFeeWallet, isSigner: true, isWritable: true },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: true },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: true },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: anchorDataBuf.claimPlatformFee,\r\n  });\r\n}\r\n\r\nexport function createPlatformConfig(\r\n  programId: PublicKey,\r\n\r\n  platformAdmin: PublicKey,\r\n  platformClaimFeeWallet: PublicKey,\r\n  platformLockNftWallet: PublicKey,\r\n  platformId: PublicKey,\r\n\r\n  cpConfigId: PublicKey,\r\n\r\n  migrateCpLockNftScale: {\r\n    platformScale: BN;\r\n    creatorScale: BN;\r\n    burnScale: BN;\r\n  },\r\n  feeRate: BN,\r\n  name: string,\r\n  web: string,\r\n  img: string,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([\r\n    u64(\"platformScale\"),\r\n    u64(\"creatorScale\"),\r\n    u64(\"burnScale\"),\r\n\r\n    u64(\"feeRate\"),\r\n    str(\"name\"),\r\n    str(\"web\"),\r\n    str(\"img\"),\r\n  ]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformAdmin, isSigner: true, isWritable: true },\r\n    { pubkey: platformClaimFeeWallet, isSigner: false, isWritable: false },\r\n    { pubkey: platformLockNftWallet, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n    { pubkey: cpConfigId, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(\r\n    8 * 4 +\r\n    Buffer.from(name, \"utf-8\").length +\r\n    Buffer.from(web, \"utf-8\").length +\r\n    Buffer.from(img, \"utf-8\").length +\r\n    4 * 3,\r\n  );\r\n  dataLayout.encode(\r\n    {\r\n      platformScale: migrateCpLockNftScale.platformScale,\r\n      creatorScale: migrateCpLockNftScale.creatorScale,\r\n      burnScale: migrateCpLockNftScale.burnScale,\r\n      feeRate,\r\n      name,\r\n      web,\r\n      img,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.createPlatformConfig, ...data]),\r\n  });\r\n}\r\n\r\nexport function updatePlatformConfig(\r\n  programId: PublicKey,\r\n\r\n  platformAdmin: PublicKey,\r\n  platformId: PublicKey,\r\n\r\n  updateInfo:\r\n    | { type: \"updateClaimFeeWallet\" | \"updateLockNftWallet\"; value: PublicKey }\r\n    | { type: \"updateFeeRate\"; value: BN }\r\n    | { type: \"updateName\" | \"updateImg\" | \"updateWeb\"; value: string }\r\n    | { type: \"migrateCpLockNftScale\"; value: { platformScale: BN; creatorScale: BN; burnScale: BN } }\r\n    | { type: 'updateCpConfigId', value: PublicKey }\r\n    | {\r\n      type: 'updateAll', value: {\r\n        platformClaimFeeWallet: PublicKey,\r\n        platformLockNftWallet: PublicKey,\r\n        cpConfigId: PublicKey,\r\n        migrateCpLockNftScale: {\r\n          platformScale: BN,\r\n          creatorScale: BN,\r\n          burnScale: BN,\r\n        },\r\n        feeRate: BN,\r\n        name: string,\r\n        web: string,\r\n        img: string,\r\n      }\r\n    },\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformAdmin, isSigner: true, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  let data: Buffer;\r\n  if (updateInfo.type === \"updateClaimFeeWallet\") {\r\n    const dataLayout = struct([u8(\"index\"), publicKey(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 0, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateLockNftWallet\") {\r\n    const dataLayout = struct([u8(\"index\"), publicKey(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 1, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"migrateCpLockNftScale\") {\r\n    const dataLayout = struct([u8(\"index\"), u64(\"platformScale\"), u64(\"creatorScale\"), u64(\"burnScale\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 2, ...updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateFeeRate\") {\r\n    const dataLayout = struct([u8(\"index\"), u64(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 3, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateImg\" || updateInfo.type === \"updateName\" || updateInfo.type === \"updateWeb\") {\r\n    const dataLayout = struct([u8(\"index\"), str(\"value\")]);\r\n    data = Buffer.alloc(Buffer.from(updateInfo.value, 'utf-8').length + 4 + 1 * 1);\r\n    if (updateInfo.type === \"updateName\") dataLayout.encode({ index: 4, value: updateInfo.value }, data);\r\n    else if (updateInfo.type === \"updateWeb\") dataLayout.encode({ index: 5, value: updateInfo.value }, data);\r\n    else if (updateInfo.type === \"updateImg\") dataLayout.encode({ index: 6, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === 'updateCpConfigId') {\r\n    keys.push({ pubkey: updateInfo.value, isSigner: false, isWritable: false })\r\n\r\n    const dataLayout = struct([u8('index')])\r\n    data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode({ index: 7 }, data)\r\n  } else if (updateInfo.type === 'updateAll') {\r\n    console.log('Please note that this update will overwrite all data in the platform account with the new data.')\r\n    keys.push({ pubkey: updateInfo.value.cpConfigId, isSigner: false, isWritable: false })\r\n\r\n    const dataLayout = struct([\r\n      u8('index'),\r\n      publicKey('platformClaimFeeWallet'),\r\n      publicKey('platformLockNftWallet'),\r\n      u64('platformScale'),\r\n      u64('creatorScale'),\r\n      u64('burnScale'),\r\n\r\n      u64('feeRate'),\r\n      str('name'),\r\n      str('web'),\r\n      str('img'),\r\n    ])\r\n    data = Buffer.alloc(1 + 32 + 32 + 8 * 4 + 4 * 3 + Buffer.from(updateInfo.value.name, 'utf-8').length + Buffer.from(updateInfo.value.web, 'utf-8').length + Buffer.from(updateInfo.value.img, 'utf-8').length)\r\n    dataLayout.encode({\r\n      index: 8,\r\n      platformClaimFeeWallet: updateInfo.value.platformClaimFeeWallet,\r\n      platformLockNftWallet: updateInfo.value.platformLockNftWallet,\r\n      platformScale: updateInfo.value.migrateCpLockNftScale.platformScale,\r\n      creatorScale: updateInfo.value.migrateCpLockNftScale.creatorScale,\r\n      burnScale: updateInfo.value.migrateCpLockNftScale.burnScale,\r\n      feeRate: updateInfo.value.feeRate,\r\n      name: updateInfo.value.name,\r\n      web: updateInfo.value.web,\r\n      img: updateInfo.value.img,\r\n    }, data)\r\n  } else {\r\n    throw Error(\"updateInfo params type error\");\r\n  }\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.updatePlaformConfig, ...data]),\r\n  });\r\n}\r\n","import ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport {\r\n  TxVersion,\r\n  MakeTxData,\r\n  LAUNCHPAD_PROGRAM,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getATAAddress,\r\n  MakeMultiTxData,\r\n} from \"@/common\";\r\nimport {\r\n  BuyToken,\r\n  ClaimAllPlatformFee,\r\n  ClaimPlatformFee,\r\n  ClaimVesting,\r\n  CreateLaunchPad,\r\n  CreatePlatform,\r\n  CreateVesting,\r\n  LaunchpadConfigInfo,\r\n  LaunchpadPoolInfo,\r\n  SellToken,\r\n  UpdatePlatform,\r\n} from \"./type\";\r\nimport {\r\n  getPdaLaunchpadAuth,\r\n  getPdaLaunchpadPoolId,\r\n  getPdaLaunchpadVaultId,\r\n  getPdaPlatformId,\r\n  getPdaVestId,\r\n} from \"./pda\";\r\nimport {\r\n  initialize,\r\n  buyExactInInstruction,\r\n  sellExactInInstruction,\r\n  createPlatformConfig,\r\n  updatePlatformConfig,\r\n  claimPlatformFee,\r\n  createVestingAccount,\r\n  claimVestedToken,\r\n} from \"./instrument\";\r\nimport { NATIVE_MINT, TOKEN_PROGRAM_ID, createAssociatedTokenAccountIdempotentInstruction } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { getPdaMetadataKey } from \"../clmm\";\r\nimport { LaunchpadConfig, LaunchpadPool, PlatformConfig } from \"./layout\";\r\nimport { Curve } from \"./curve/curve\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nexport const LaunchpadPoolInitParam = {\r\n  initPriceX64: new BN(\"515752397214619\"),\r\n  supply: new BN(1_000_000_000_000_000),\r\n  totalSellA: new BN(793_100_000_000_000),\r\n  totalFundRaisingB: new BN(85_000_000_000),\r\n  totalLockedAmount: new BN(\"0\"),\r\n  cliffPeriod: new BN(\"0\"),\r\n  unlockPeriod: new BN(\"0\"),\r\n  decimals: 6,\r\n  virtualA: new BN(\"1073471847374405\"),\r\n  virtualB: new BN(\"30050573465\"),\r\n  realA: new BN(0),\r\n  realB: new BN(0),\r\n  protocolFee: new BN(0),\r\n  platformId: new PublicKey(\"4Bu96XjU84XjPDSpveTVf6LYGCkfW5FK7SNkREWcEfV4\"),\r\n  vestingSchedule: {\r\n    totalLockedAmount: new BN(0),\r\n    cliffPeriod: new BN(0),\r\n    unlockPeriod: new BN(0),\r\n    startTime: new BN(0),\r\n    totalAllocatedShare: new BN(0),\r\n  },\r\n};\r\n\r\nconst SLIPPAGE_UNIT = new BN(10000);\r\nexport default class LaunchpadModule extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async createLaunchpad<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    platformId = LaunchpadPoolInitParam.platformId,\r\n    mintA,\r\n    decimals = 6,\r\n    mintBDecimals = 9,\r\n    name,\r\n    symbol,\r\n    uri,\r\n    migrateType,\r\n    configId,\r\n\r\n    configInfo: propConfigInfo,\r\n    platformFeeRate,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    buyAmount,\r\n    minMintAAmount,\r\n    slippage,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    extraSigners,\r\n    ...extraConfigs\r\n  }: CreateLaunchPad<T>): Promise<\r\n    MakeMultiTxData<T, { address: LaunchpadPoolInfo & { poolId: PublicKey }; outAmount: BN }>\r\n  > {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    let configInfo = propConfigInfo;\r\n    if (!configInfo && configId) {\r\n      const r = await this.scope.connection.getAccountInfo(configId);\r\n      if (r) configInfo = LaunchpadConfig.decode(r.data);\r\n    }\r\n\r\n    if (!configInfo) this.logAndCreateError(\"config not found\");\r\n    const mintB = configInfo!.mintB;\r\n    const curType = configInfo!.curveType;\r\n\r\n    // const { publicKey: configId } = getPdaLaunchpadConfigId(programId, mintB, curType, configIndex);\r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n    const { publicKey: vaultA } = getPdaLaunchpadVaultId(programId, poolId, mintA);\r\n    const { publicKey: vaultB } = getPdaLaunchpadVaultId(programId, poolId, mintB);\r\n    const { publicKey: metaId } = getPdaMetadataKey(mintA);\r\n\r\n    console.log(\r\n      `create token: ${mintA.toBase58()}, mintB: ${mintB.toBase58()}, decimals A:${decimals}/B:${mintBDecimals}, config:${configId.toBase58()}`,\r\n    );\r\n\r\n    if (symbol.length > 10) this.logAndCreateError(\"Symbol length should shorter than 11\");\r\n    if (!uri) this.logAndCreateError(\"uri should not empty\");\r\n    if (buyAmount.lte(new BN(0))) this.logAndCreateError(\"buy amount should gt 0:\", buyAmount.toString());\r\n\r\n    const supply = extraConfigs?.supply ?? LaunchpadPoolInitParam.supply;\r\n    const totalSellA = extraConfigs?.totalSellA ?? LaunchpadPoolInitParam.totalSellA;\r\n    const totalFundRaisingB = extraConfigs?.totalFundRaisingB ?? LaunchpadPoolInitParam.totalFundRaisingB;\r\n    const totalLockedAmount = extraConfigs?.totalLockedAmount ?? new BN(0);\r\n\r\n    let defaultPlatformFeeRate = platformFeeRate;\r\n    if (!platformFeeRate) {\r\n      const platformData = await this.scope.connection.getAccountInfo(platformId);\r\n      if (!platformData) this.logAndCreateError(\"platform id not found:\", platformId.toString());\r\n      defaultPlatformFeeRate = PlatformConfig.decode(platformData!.data).feeRate;\r\n    }\r\n\r\n    const curve = Curve.getCurve(configInfo!.curveType);\r\n    const initParam = curve.getInitParam({\r\n      supply,\r\n      totalFundRaising: totalFundRaisingB,\r\n      totalSell: totalSellA,\r\n      totalLockedAmount,\r\n      migrateFee: configInfo!.migrateFee,\r\n    });\r\n\r\n    const poolInfo: LaunchpadPoolInfo = {\r\n      epoch: new BN(896),\r\n      bump: 254,\r\n      status: 0,\r\n      mintDecimalsA: decimals,\r\n      mintDecimalsB: mintBDecimals,\r\n      supply,\r\n      totalSellA,\r\n      mintA: new PublicKey(mintA),\r\n      mintB,\r\n      virtualA: initParam.a,\r\n      virtualB: initParam.b,\r\n      realA: LaunchpadPoolInitParam.realA,\r\n      realB: LaunchpadPoolInitParam.realB,\r\n      migrateFee: configInfo!.migrateFee,\r\n      migrateType: migrateType === \"amm\" ? 0 : 1,\r\n      protocolFee: LaunchpadPoolInitParam.protocolFee,\r\n      platformFee: defaultPlatformFeeRate!,\r\n      platformId,\r\n      configId,\r\n      vaultA,\r\n      vaultB,\r\n      creator: this.scope.ownerPubKey,\r\n      totalFundRaisingB,\r\n      vestingSchedule: {\r\n        totalLockedAmount,\r\n        cliffPeriod: new BN(0),\r\n        unlockPeriod: new BN(0),\r\n        startTime: new BN(0),\r\n        totalAllocatedShare: new BN(0),\r\n      },\r\n    };\r\n\r\n    const initCurve = Curve.getCurve(configInfo!.curveType);\r\n    const { c } = initCurve.getInitParam({\r\n      supply: poolInfo.supply,\r\n      totalFundRaising: poolInfo.totalFundRaisingB,\r\n      totalLockedAmount,\r\n      totalSell: configInfo!.curveType === 0 ? poolInfo.totalSellA : new BN(0),\r\n      migrateFee: configInfo!.migrateFee,\r\n    });\r\n\r\n    try {\r\n      Curve.checkParam({\r\n        supply: poolInfo.supply,\r\n        totalFundRaising: poolInfo.totalFundRaisingB,\r\n        totalSell: c,\r\n        totalLockedAmount,\r\n        decimals: poolInfo.mintDecimalsA,\r\n        config: configInfo!,\r\n        migrateType,\r\n      });\r\n      console.log(\"check init params success\");\r\n    } catch (e: any) {\r\n      this.logAndCreateError(`check create mint params failed, ${e.message}`);\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        initialize(\r\n          programId,\r\n          feePayer ?? this.scope.ownerPubKey,\r\n          this.scope.ownerPubKey,\r\n          configId,\r\n          platformId,\r\n          authProgramId,\r\n          poolId,\r\n          mintA,\r\n          mintB,\r\n          vaultA,\r\n          vaultB,\r\n          metaId,\r\n          TOKEN_PROGRAM_ID,\r\n          TOKEN_PROGRAM_ID,\r\n\r\n          decimals,\r\n          name,\r\n          symbol,\r\n          uri || \"https://\",\r\n\r\n          {\r\n            type:\r\n              curType === 0\r\n                ? \"ConstantCurve\"\r\n                : curType === 1\r\n                ? \"FixedCurve\"\r\n                : curType === 2\r\n                ? \"LinearCurve\"\r\n                : \"ConstantCurve\",\r\n            totalSellA,\r\n            migrateType,\r\n            supply,\r\n            totalFundRaisingB,\r\n          },\r\n          totalLockedAmount,\r\n          extraConfigs?.cliffPeriod ?? new BN(0),\r\n          extraConfigs?.unlockPeriod ?? new BN(0),\r\n        ),\r\n      ],\r\n    });\r\n\r\n    let outAmount = new BN(0);\r\n    let splitIns;\r\n    if (extraSigners?.length) txBuilder.addInstruction({ signers: extraSigners });\r\n    if (!extraConfigs.createOnly) {\r\n      const { builder, extInfo } = await this.buyToken({\r\n        programId,\r\n        authProgramId,\r\n        mintA,\r\n        mintB,\r\n        poolInfo,\r\n        buyAmount,\r\n        minMintAAmount,\r\n        shareFeeRate: extraConfigs.shareFeeRate,\r\n        shareFeeReceiver: extraConfigs.shareFeeReceiver,\r\n        configInfo,\r\n        platformFeeRate: defaultPlatformFeeRate,\r\n        slippage,\r\n        associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      txBuilder.addInstruction({ ...builder.AllTxData });\r\n      outAmount = extInfo.outAmount;\r\n      splitIns =\r\n        (this.scope.cluster === \"devnet\" || txVersion === TxVersion.LEGACY) && extraConfigs.shareFeeReceiver\r\n          ? [builder.allInstructions[0]]\r\n          : undefined;\r\n    }\r\n\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({\r\n        computeBudgetConfig,\r\n        outAmount,\r\n        splitIns,\r\n        address: {\r\n          ...poolInfo,\r\n          poolId,\r\n        },\r\n      }) as Promise<MakeMultiTxData<T, { address: LaunchpadPoolInfo & { poolId: PublicKey }; outAmount: BN }>>;\r\n    return txBuilder.sizeCheckBuild({\r\n      computeBudgetConfig,\r\n      outAmount,\r\n      splitIns,\r\n      address: {\r\n        ...poolInfo,\r\n        poolId,\r\n      },\r\n    }) as Promise<MakeMultiTxData<T, { address: LaunchpadPoolInfo & { poolId: PublicKey }; outAmount: BN }>>;\r\n  }\r\n\r\n  public async buyToken<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    mintA,\r\n    mintB = NATIVE_MINT,\r\n    poolInfo: propPoolInfo,\r\n\r\n    configInfo: propConfigInfo,\r\n    platformFeeRate,\r\n\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    buyAmount,\r\n    minMintAAmount: propMinMintAAmount,\r\n    slippage,\r\n\r\n    shareFeeRate = new BN(0),\r\n    shareFeeReceiver,\r\n\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n  }: BuyToken<T>): Promise<MakeTxData<T, { outAmount: BN }>> {\r\n    if (buyAmount.lte(new BN(0))) this.logAndCreateError(\"buy amount should gt 0:\", buyAmount.toString());\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    let userTokenAccountA: PublicKey | null = null;\r\n    let userTokenAccountB: PublicKey | null = null;\r\n\r\n    const mintBUseSOLBalance = mintB.equals(NATIVE_MINT);\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintA,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: true,\r\n        notUseTokenAccount: false,\r\n        associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) userTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    if (userTokenAccountA === undefined)\r\n      this.logAndCreateError(\r\n        `cannot found mintA(${mintA.toBase58()}) token accounts`,\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccounts,\r\n      );\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintB,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: buyAmount,\r\n            }\r\n          : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) userTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    if (userTokenAccountB === undefined)\r\n      this.logAndCreateError(\r\n        `cannot found mintB(${mintB.toBase58()}) token accounts`,\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccounts,\r\n      );\r\n\r\n    let poolInfo = propPoolInfo;\r\n    if (!poolInfo) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool:\", poolId.toBase58());\r\n      poolInfo = LaunchpadPool.decode(poolData!.data);\r\n    }\r\n\r\n    let configInfo = propConfigInfo;\r\n    const allData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      [configInfo ? undefined : poolInfo.configId, platformFeeRate ? undefined : poolInfo.platformId]\r\n        .filter(Boolean)\r\n        .map((key) => ({ pubkey: key! })),\r\n    );\r\n    if (!configInfo) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.configId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"config not found: \", poolInfo.configId.toBase58());\r\n      configInfo = LaunchpadConfig.decode(data!.accountInfo!.data);\r\n    }\r\n    if (!platformFeeRate) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.platformId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"platform info not found: \", poolInfo.configId.toBase58());\r\n      platformFeeRate = PlatformConfig.decode(data!.accountInfo!.data).feeRate;\r\n    }\r\n\r\n    const calculatedAmount = Curve.buyExactIn({\r\n      poolInfo,\r\n      amountB: buyAmount,\r\n      protocolFeeRate: configInfo.tradeFeeRate,\r\n      platformFeeRate,\r\n      curveType: configInfo.curveType,\r\n      shareFeeRate,\r\n    });\r\n\r\n    const decimalAmountA = new Decimal(calculatedAmount.amountA.toString());\r\n    const multiplier = slippage\r\n      ? new Decimal(SLIPPAGE_UNIT.sub(slippage).toNumber() / SLIPPAGE_UNIT.toNumber()).clampedTo(0, 1)\r\n      : new Decimal(1);\r\n\r\n    const minMintAAmount =\r\n      propMinMintAAmount ?? (slippage ? new BN(decimalAmountA.mul(multiplier).toFixed(0)) : calculatedAmount.amountA);\r\n\r\n    if (calculatedAmount.amountB.lt(buyAmount)) {\r\n      console.log(\r\n        `maximum ${mintA.toBase58()} amount can buy is ${calculatedAmount.amountA.toString()}, input ${mintB.toBase58()} amount: ${calculatedAmount.amountB.toString()}`,\r\n      );\r\n    }\r\n\r\n    // let shareATA: PublicKey | undefined;\r\n    // if (shareFeeReceiver) {\r\n    // if (mintB.equals(NATIVE_MINT)) {\r\n    //   const { addresses, ...txInstruction } = await createWSolAccountInstructions({\r\n    //     connection: this.scope.connection,\r\n    //     owner: shareFeeReceiver,\r\n    //     payer: this.scope.ownerPubKey,\r\n    //     amount: 0,\r\n    //     skipCloseAccount: true,\r\n    //   });\r\n    //   txBuilder.addInstruction(txInstruction);\r\n    //   shareATA = addresses.newAccount;\r\n    // } else {\r\n    //   shareATA = getATAAddress(shareFeeReceiver, mintB, TOKEN_PROGRAM_ID).publicKey;\r\n    //   txBuilder.addInstruction({\r\n    //     instructions: [\r\n    //       createAssociatedTokenAccountIdempotentInstruction(this.scope.ownerPubKey, shareATA, shareFeeReceiver!, mintB),\r\n    //     ],\r\n    //   });\r\n    //   // }\r\n    // }\r\n    const shareATA = shareFeeReceiver ? getATAAddress(shareFeeReceiver, mintB, TOKEN_PROGRAM_ID).publicKey : undefined;\r\n    if (shareATA) {\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(this.scope.ownerPubKey, shareATA, shareFeeReceiver!, mintB),\r\n        ],\r\n      });\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        buyExactInInstruction(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          authProgramId,\r\n          poolInfo.configId,\r\n          poolInfo.platformId,\r\n          poolId,\r\n          userTokenAccountA!,\r\n          userTokenAccountB!,\r\n          poolInfo.vaultA,\r\n          poolInfo.vaultB,\r\n          mintA,\r\n          mintB,\r\n          TOKEN_PROGRAM_ID,\r\n          TOKEN_PROGRAM_ID,\r\n          calculatedAmount.amountB.lt(buyAmount) ? calculatedAmount.amountB : buyAmount,\r\n          minMintAAmount,\r\n          shareFeeRate,\r\n          shareATA,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{ outAmount: BN }>({\r\n      txVersion,\r\n      extInfo: {\r\n        outAmount: minMintAAmount,\r\n      },\r\n    }) as Promise<MakeTxData<T, { outAmount: BN }>>;\r\n  }\r\n\r\n  public async sellToken<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    mintA,\r\n    mintB = NATIVE_MINT,\r\n    poolInfo: propPoolInfo,\r\n    configInfo: propConfigInfo,\r\n    platformFeeRate,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    sellAmount,\r\n    minAmountB: propMinAmountB,\r\n    slippage,\r\n\r\n    shareFeeRate = new BN(0),\r\n    shareFeeReceiver,\r\n\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n  }: SellToken<T>): Promise<MakeTxData<T, { outAmount: BN }>> {\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    if (sellAmount.lte(new BN(0))) this.logAndCreateError(\"sell amount should be gt 0\");\r\n\r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n\r\n    let userTokenAccountA: PublicKey | null = null;\r\n    let userTokenAccountB: PublicKey | null = null;\r\n\r\n    const mintBUseSOLBalance = mintB.equals(NATIVE_MINT);\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintA,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: undefined,\r\n        skipCloseAccount: true,\r\n        notUseTokenAccount: false,\r\n        associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) userTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    if (userTokenAccountA === undefined)\r\n      this.logAndCreateError(\"cannot found mintA token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintB,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: 0,\r\n            }\r\n          : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) userTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (userTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found mintB token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    let poolInfo = propPoolInfo;\r\n    if (!poolInfo) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool\", poolId.toBase58());\r\n      poolInfo = LaunchpadPool.decode(poolData!.data);\r\n    }\r\n\r\n    let configInfo = propConfigInfo;\r\n    const allData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      [configInfo ? undefined : poolInfo.configId, platformFeeRate ? undefined : poolInfo.platformId]\r\n        .filter(Boolean)\r\n        .map((key) => ({ pubkey: key! })),\r\n    );\r\n    if (!configInfo) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.configId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"config not found: \", poolInfo.configId.toBase58());\r\n      configInfo = LaunchpadConfig.decode(data!.accountInfo!.data);\r\n    }\r\n    if (!platformFeeRate) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.platformId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"platform info not found: \", poolInfo.configId.toBase58());\r\n      platformFeeRate = PlatformConfig.decode(data!.accountInfo!.data).feeRate;\r\n    }\r\n\r\n    const calculatedAmount = Curve.sellExactIn({\r\n      poolInfo,\r\n      amountA: sellAmount,\r\n      protocolFeeRate: configInfo.tradeFeeRate,\r\n      platformFeeRate,\r\n      curveType: configInfo.curveType,\r\n      shareFeeRate,\r\n    });\r\n\r\n    const decimalAmountB = new Decimal(calculatedAmount.amountB.toString());\r\n    const multiplier = slippage\r\n      ? new Decimal(SLIPPAGE_UNIT.sub(slippage).toNumber() / SLIPPAGE_UNIT.toNumber()).clampedTo(0, 1)\r\n      : new Decimal(1);\r\n\r\n    const minAmountB =\r\n      propMinAmountB ?? (slippage ? new BN(decimalAmountB.mul(multiplier).toFixed(0)) : calculatedAmount.amountB);\r\n\r\n    if (minAmountB.lte(new BN(0))) this.logAndCreateError(`out ${mintB.toBase58()} amount should be gt 0`);\r\n\r\n    const shareATA = shareFeeReceiver ? getATAAddress(shareFeeReceiver, mintB, TOKEN_PROGRAM_ID).publicKey : undefined;\r\n    if (shareATA) {\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(this.scope.ownerPubKey, shareATA, shareFeeReceiver!, mintB),\r\n        ],\r\n      });\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        sellExactInInstruction(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          authProgramId,\r\n          poolInfo.configId,\r\n          poolInfo.platformId,\r\n          poolId,\r\n          userTokenAccountA!,\r\n          userTokenAccountB!,\r\n          poolInfo.vaultA,\r\n          poolInfo.vaultB,\r\n          mintA,\r\n          mintB,\r\n          TOKEN_PROGRAM_ID,\r\n          TOKEN_PROGRAM_ID,\r\n          calculatedAmount.amountA.lt(sellAmount) ? calculatedAmount.amountA : sellAmount,\r\n          minAmountB,\r\n          shareFeeRate,\r\n          shareATA,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{ outAmount: BN }>({\r\n      txVersion,\r\n      extInfo: {\r\n        outAmount: minAmountB,\r\n      },\r\n    }) as Promise<MakeTxData<T, { outAmount: BN }>>;\r\n  }\r\n\r\n  public async createPlatformConfig<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    platformAdmin,\r\n    platformClaimFeeWallet,\r\n    platformLockNftWallet,\r\n    cpConfigId,\r\n    migrateCpLockNftScale,\r\n    feeRate,\r\n    name,\r\n    web,\r\n    img,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CreatePlatform<T>): Promise<MakeTxData<T, { platformId: PublicKey }>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const { publicKey: platformId } = getPdaPlatformId(programId, platformAdmin);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createPlatformConfig(\r\n          programId,\r\n          platformAdmin,\r\n          platformClaimFeeWallet,\r\n          platformLockNftWallet,\r\n          platformId,\r\n          cpConfigId,\r\n          migrateCpLockNftScale,\r\n          feeRate,\r\n          name,\r\n          web,\r\n          img,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: {\r\n        platformId,\r\n      },\r\n    }) as Promise<MakeTxData<T, { platformId: PublicKey }>>;\r\n  }\r\n\r\n  public async updatePlatformConfig<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    platformAdmin,\r\n    platformId: propsPlatformId,\r\n    updateInfo,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: UpdatePlatform<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const platformId = propsPlatformId ?? getPdaPlatformId(programId, platformAdmin).publicKey;\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [updatePlatformConfig(programId, platformAdmin, platformId, updateInfo)],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async claimPlatformFee<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    platformId,\r\n    poolId,\r\n    platformClaimFeeWallet,\r\n\r\n    mintB: propsMintB,\r\n    vaultB: propsVaultB,\r\n    mintBProgram = TOKEN_PROGRAM_ID,\r\n\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: ClaimPlatformFee<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    let mintB = propsMintB;\r\n    let vaultB = propsVaultB;\r\n\r\n    if (!mintB) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool:\", poolId.toBase58());\r\n      const poolInfo = LaunchpadPool.decode(poolData!.data);\r\n\r\n      const configData = await this.scope.connection.getAccountInfo(poolInfo.configId, { commitment: \"processed\" });\r\n      if (!configData) this.logAndCreateError(\"cannot found config:\", poolInfo.configId.toBase58());\r\n      const configInfo = LaunchpadConfig.decode(configData!.data);\r\n\r\n      mintB = configInfo.mintB;\r\n      vaultB = vaultB ?? poolInfo.vaultB;\r\n    }\r\n\r\n    if (!mintB || !vaultB) {\r\n      this.logAndCreateError(\r\n        \"cannot found mint info, mintB: \",\r\n        mintB.toBase58(),\r\n        \", vaultB: \",\r\n        vaultB?.toBase58() ?? \"\",\r\n      );\r\n    }\r\n\r\n    const userTokenAccountB = getATAAddress(this.scope.ownerPubKey, mintB, TOKEN_PROGRAM_ID).publicKey;\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          this.scope.ownerPubKey,\r\n          userTokenAccountB,\r\n          this.scope.ownerPubKey,\r\n          mintB,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        claimPlatformFee(\r\n          programId,\r\n          platformClaimFeeWallet,\r\n          authProgramId,\r\n          poolId,\r\n          platformId,\r\n          vaultB!,\r\n          userTokenAccountB!,\r\n          mintB,\r\n          mintBProgram,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async claimAllPlatformFee<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    platformId,\r\n    platformClaimFeeWallet,\r\n\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: ClaimAllPlatformFee<T>): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    const allPlatformPool = await this.scope.connection.getProgramAccounts(programId, {\r\n      filters: [\r\n        { dataSize: LaunchpadPool.span },\r\n        { memcmp: { offset: LaunchpadPool.offsetOf(\"platformId\"), bytes: platformId.toString() } },\r\n      ],\r\n    });\r\n\r\n    allPlatformPool.forEach((data) => {\r\n      const pool = LaunchpadPool.decode(data.account.data);\r\n      const userTokenAccountB = getATAAddress(this.scope.ownerPubKey, pool.mintB, TOKEN_PROGRAM_ID).publicKey;\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(\r\n            this.scope.ownerPubKey,\r\n            userTokenAccountB,\r\n            this.scope.ownerPubKey,\r\n            pool.mintB,\r\n          ),\r\n        ],\r\n      });\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          claimPlatformFee(\r\n            programId,\r\n            platformClaimFeeWallet,\r\n            authProgramId!,\r\n            data.pubkey,\r\n            platformId,\r\n            pool.vaultB,\r\n            userTokenAccountB!,\r\n            pool.mintB,\r\n            TOKEN_PROGRAM_ID,\r\n          ),\r\n        ],\r\n      });\r\n    });\r\n\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n\r\n    return txBuilder.sizeCheckBuild({\r\n      computeBudgetConfig,\r\n    }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async createVesting<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    poolId,\r\n    beneficiary,\r\n    shareAmount,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CreateVesting<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const vestingRecord = getPdaVestId(programId, poolId, beneficiary).publicKey;\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createVestingAccount(programId, this.scope.ownerPubKey, beneficiary, poolId, vestingRecord, shareAmount),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async claimVesting<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    poolId,\r\n    poolInfo: propsPoolInfo,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n  }: ClaimVesting<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const authProgramId = getPdaLaunchpadAuth(programId).publicKey;\r\n    const vestingRecord = getPdaVestId(programId, poolId, this.scope.ownerPubKey).publicKey;\r\n\r\n    let poolInfo = propsPoolInfo;\r\n    if (!poolInfo) {\r\n      const r = await this.scope.connection.getAccountInfo(poolId);\r\n      if (!r) this.logAndCreateError(\"pool not found\");\r\n      poolInfo = LaunchpadPool.decode(r!.data);\r\n    }\r\n\r\n    const userTokenAccountA = getATAAddress(this.scope.ownerPubKey, poolInfo.mintA, TOKEN_PROGRAM_ID).publicKey;\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          this.scope.ownerPubKey,\r\n          userTokenAccountA,\r\n          this.scope.ownerPubKey,\r\n          poolInfo.mintA,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        claimVestedToken(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          authProgramId,\r\n          poolId,\r\n          vestingRecord,\r\n          userTokenAccountA!,\r\n          poolInfo.vaultA,\r\n          poolInfo.mintA,\r\n          TOKEN_PROGRAM_ID,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async getRpcPoolInfo({\r\n    poolId,\r\n  }: {\r\n    poolId: PublicKey;\r\n  }): Promise<LaunchpadPoolInfo & { configInfo: LaunchpadConfigInfo }> {\r\n    const data = await this.getRpcPoolsInfo({ poolIdList: [poolId] });\r\n\r\n    return data.poolInfoMap[poolId.toBase58()];\r\n  }\r\n\r\n  public async getRpcPoolsInfo({\r\n    poolIdList,\r\n    config,\r\n  }: {\r\n    poolIdList: PublicKey[];\r\n    config?: { batchRequest?: boolean; chunkCount?: number };\r\n  }): Promise<{\r\n    poolInfoMap: Record<\r\n      string,\r\n      LaunchpadPoolInfo & {\r\n        poolId: PublicKey;\r\n        configInfo: LaunchpadConfigInfo;\r\n      }\r\n    >;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIdList.map((i) => ({ pubkey: i })),\r\n      config,\r\n    );\r\n\r\n    const poolInfoMap: { [poolId: string]: LaunchpadPoolInfo & { poolId: PublicKey } } = {};\r\n    const configKeys: PublicKey[] = [];\r\n\r\n    for (let i = 0; i < poolIdList.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + poolIdList[i].toBase58());\r\n      const poolInfo = LaunchpadPool.decode(item.accountInfo.data);\r\n      poolInfoMap[poolIdList[i].toBase58()] = {\r\n        ...poolInfo,\r\n        poolId: item.accountInfo.owner,\r\n      };\r\n      configKeys.push(poolInfo.configId);\r\n    }\r\n\r\n    const configAccounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      configKeys.map((i) => ({ pubkey: i })),\r\n      config,\r\n    );\r\n\r\n    const configInfoMap: { [poolId: string]: LaunchpadConfigInfo & { configId: PublicKey } } = {};\r\n\r\n    for (let i = 0; i < configKeys.length; i++) {\r\n      const item = configAccounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch config info error: \" + configKeys[i].toBase58());\r\n      const configInfo = LaunchpadConfig.decode(item.accountInfo.data);\r\n      configInfoMap[configKeys[i].toBase58()] = {\r\n        ...configInfo,\r\n        configId: item.accountInfo.owner,\r\n      };\r\n    }\r\n\r\n    return {\r\n      poolInfoMap: Object.keys(poolInfoMap).reduce(\r\n        (acc, cur) => ({\r\n          ...acc,\r\n          [cur]: {\r\n            ...poolInfoMap[cur],\r\n            configInfo: configInfoMap[poolInfoMap[cur].configId.toBase58()],\r\n          },\r\n        }),\r\n        {},\r\n      ),\r\n    };\r\n  }\r\n}\r\n","import { publicKey, seq, struct, u16, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const LaunchpadConfig = struct([\r\n  u64(),\r\n  u64(\"epoch\"),\r\n  u8(\"curveType\"),\r\n  u16(\"index\"),\r\n  u64(\"migrateFee\"),\r\n  u64(\"tradeFeeRate\"),\r\n  u64(\"maxShareFeeRate\"),\r\n  u64(\"minSupplyA\"),\r\n  u64(\"maxLockRate\"),\r\n  u64(\"minSellRateA\"),\r\n  u64(\"minMigrateRateA\"),\r\n  u64(\"minFundRaisingB\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"protocolFeeOwner\"),\r\n  publicKey(\"migrateFeeOwner\"),\r\n  publicKey(\"migrateToAmmWallet\"),\r\n  publicKey(\"migrateToCpmmWallet\"),\r\n  seq(u64(), 16),\r\n]);\r\n\r\nexport const LaunchpadVestingSchedule = struct([\r\n  u64(\"totalLockedAmount\"),\r\n  u64(\"cliffPeriod\"),\r\n  u64(\"unlockPeriod\"),\r\n  u64(\"startTime\"),\r\n  u64(\"totalAllocatedShare\"),\r\n]);\r\n\r\nexport const LaunchpadPool = struct([\r\n  u64(),\r\n  u64(\"epoch\"),\r\n  u8(\"bump\"),\r\n  u8(\"status\"),\r\n  u8(\"mintDecimalsA\"),\r\n  u8(\"mintDecimalsB\"),\r\n  u8(\"migrateType\"),\r\n\r\n  u64(\"supply\"),\r\n  u64(\"totalSellA\"),\r\n  u64(\"virtualA\"),\r\n  u64(\"virtualB\"),\r\n  u64(\"realA\"),\r\n  u64(\"realB\"),\r\n\r\n  u64(\"totalFundRaisingB\"),\r\n  u64(\"protocolFee\"),\r\n  u64(\"platformFee\"),\r\n  u64(\"migrateFee\"),\r\n\r\n  LaunchpadVestingSchedule.replicate(\"vestingSchedule\"),\r\n\r\n  publicKey(\"configId\"),\r\n  publicKey(\"platformId\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n\r\n  publicKey(\"creator\"),\r\n\r\n  seq(u64(), 8),\r\n]);\r\n\r\nexport const LaunchpadVesting = struct([\r\n  u64(),\r\n  u64(\"epoch\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"beneficiary\"),\r\n  u64(\"claimedAmount\"),\r\n  u64(\"tokenShareAmount\"),\r\n  seq(u64(), 8),\r\n]);\r\n\r\nexport const PlatformConfig = struct([\r\n  u64(),\r\n  u64(\"epoch\"),\r\n  publicKey(\"platformClaimFeeWallet\"),\r\n  publicKey(\"platformLockNftWallet\"),\r\n  u64(\"platformScale\"),\r\n  u64(\"creatorScale\"),\r\n  u64(\"burnScale\"),\r\n  u64(\"feeRate\"),\r\n  seq(u8(), 64, \"name\"),\r\n  seq(u8(), 256, \"web\"),\r\n  seq(u8(), 256, \"img\"),\r\n  publicKey('cpConfigId'),\r\n  seq(u8(), 224),\r\n]);\r\n","import BN from \"bn.js\";\r\nimport { LaunchPadConstantProductCurve } from \"./constantProductCurve\";\r\nimport { FixedPriceCurve } from \"./fixedPriceCurve\";\r\nimport { CurveBase, PoolBaseAmount } from \"./curveBase\";\r\nimport { LaunchpadConfigInfo, LaunchpadPoolInfo } from \"../type\";\r\nimport { FEE_RATE_DENOMINATOR_VALUE } from \"@/common/fee\";\r\nimport { LinearPriceCurve } from \"./linearPriceCurve\";\r\nimport { ceilDiv } from \"@/common/bignumber\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nexport class Curve {\r\n  static getPoolCurvePointByPoolInfo({\r\n    curveType,\r\n    pointCount,\r\n    poolInfo,\r\n  }: {\r\n    curveType: number;\r\n    poolInfo: LaunchpadPoolInfo;\r\n    pointCount: number;\r\n  }): {\r\n    price: Decimal;\r\n    totalSellSupply: number;\r\n  }[] {\r\n    return this.getPoolCurvePointByInit({\r\n      curveType,\r\n      pointCount,\r\n      supply: poolInfo.supply,\r\n      totalFundRaising: poolInfo.totalFundRaisingB,\r\n      totalSell: poolInfo.totalSellA,\r\n      totalLockedAmount: poolInfo.vestingSchedule.totalLockedAmount,\r\n      migrateFee: poolInfo.migrateFee,\r\n      decimalA: poolInfo.mintDecimalsA,\r\n      decimalB: poolInfo.mintDecimalsB,\r\n    });\r\n  }\r\n\r\n  static getPoolCurvePointByInit({\r\n    curveType,\r\n    pointCount,\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    curveType: number;\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n    pointCount: number;\r\n  }): {\r\n    price: Decimal;\r\n    totalSellSupply: number;\r\n  }[] {\r\n    if (pointCount < 3) throw Error(\"point count < 3\");\r\n\r\n    const curve = this.getCurve(curveType);\r\n    const initParam = curve.getInitParam({ supply, totalFundRaising, totalSell, totalLockedAmount, migrateFee });\r\n    const initPrice = curve.getPoolInitPriceByInit({ ...initParam, decimalA, decimalB });\r\n\r\n    const itemStepBuy = totalFundRaising.div(new BN(pointCount - 1));\r\n\r\n    const zero = new BN(0);\r\n\r\n    const returnPoints: { price: Decimal; totalSellSupply: number }[] = [{ price: initPrice, totalSellSupply: 0 }];\r\n    const { a, b } = initParam;\r\n    let realA = zero;\r\n    let realB = zero;\r\n    for (let i = 1; i < pointCount; i++) {\r\n      const amountB = i !== pointCount - 1 ? itemStepBuy : totalFundRaising.sub(realB);\r\n      const itemBuy = this.buyExactIn({\r\n        poolInfo: {\r\n          virtualA: a,\r\n          virtualB: b,\r\n          realA,\r\n          realB,\r\n          totalFundRaisingB: totalFundRaising,\r\n          totalSellA: totalSell,\r\n        },\r\n        amountB,\r\n        protocolFeeRate: zero,\r\n        platformFeeRate: zero,\r\n        curveType,\r\n        shareFeeRate: zero,\r\n      });\r\n      realA = realA.add(itemBuy.amountA);\r\n      realB = realB.add(itemBuy.amountB);\r\n\r\n      const nowPoolPrice = this.getPrice({\r\n        poolInfo: { virtualA: a, virtualB: b, realA, realB },\r\n        decimalA,\r\n        decimalB,\r\n        curveType,\r\n      });\r\n      returnPoints.push({\r\n        price: nowPoolPrice,\r\n        totalSellSupply: new Decimal(realA.toString()).div(10 ** decimalA).toNumber(),\r\n      });\r\n    }\r\n\r\n    return returnPoints;\r\n  }\r\n\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n    curveType,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n    curveType: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolInitPriceByPool({ poolInfo, decimalA, decimalB });\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n    curveType,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n    curveType: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolInitPriceByInit({ a, b, decimalA, decimalB });\r\n  }\r\n\r\n  static getPrice({\r\n    poolInfo,\r\n    curveType,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    curveType: number;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolPrice({ poolInfo, decimalA, decimalB });\r\n  }\r\n\r\n  static getEndPrice({\r\n    poolInfo,\r\n    curveType,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo;\r\n    curveType: number;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolPrice({ poolInfo, decimalA, decimalB });\r\n  }\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    curveType,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo;\r\n    curveType: number;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolEndPriceReal({ poolInfo, decimalA, decimalB });\r\n  }\r\n\r\n  static checkParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    decimals,\r\n    config,\r\n    migrateType,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    decimals: number;\r\n    config: LaunchpadConfigInfo;\r\n    migrateType: \"amm\" | \"cpmm\";\r\n  }): void {\r\n    if (Number(decimals) !== 6) throw Error(\"decimals = 6\");\r\n    const maxLockedA = supply.mul(config.maxLockRate).div(FEE_RATE_DENOMINATOR_VALUE);\r\n    if (maxLockedA.lt(totalLockedAmount)) throw Error(\"total lock amount gte max lock amount\");\r\n\r\n    if (supply.lt(config.minSupplyA.mul(new BN(10 ** decimals)))) throw Error(\"supply lt min supply\");\r\n\r\n    const minSellA = supply.mul(config.minSellRateA).div(FEE_RATE_DENOMINATOR_VALUE);\r\n    if (totalSell.lt(minSellA)) throw Error(\"invalid input\");\r\n    if (totalFundRaising.lt(config.minFundRaisingB)) throw Error(\"total fund raising lt min fund raising\");\r\n\r\n    const amountMigrate = supply.sub(totalSell).sub(totalLockedAmount);\r\n    const minAmountMigrate = supply.mul(config.minMigrateRateA).div(FEE_RATE_DENOMINATOR_VALUE);\r\n\r\n    if (amountMigrate.lt(minAmountMigrate)) throw Error(\"migrate lt min migrate amount\");\r\n\r\n    const migrateAmountA = supply.sub(totalSell).sub(totalLockedAmount);\r\n    const liquidity = new BN(new Decimal(migrateAmountA.mul(totalFundRaising).toString()).sqrt().toFixed(0));\r\n\r\n    if (migrateType === \"amm\") {\r\n      const minLockLp = new BN(10).pow(new BN(decimals));\r\n      if (liquidity.lte(minLockLp)) throw Error(\"check migrate lp error\");\r\n    } else if (migrateType === \"cpmm\") {\r\n      const minLockLp = new BN(100);\r\n      if (liquidity.lte(minLockLp)) throw Error(\"check migrate lp error\");\r\n    } else {\r\n      throw Error(\"migrate type error\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns Please note that amountA/B is subject to change\r\n   */\r\n  static buyExactIn({\r\n    poolInfo,\r\n    amountB,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    curveType,\r\n    shareFeeRate,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | (PoolBaseAmount & { totalSellA: BN; totalFundRaisingB: BN });\r\n    amountB: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    curveType: number;\r\n    shareFeeRate: BN;\r\n  }): {\r\n    amountA: BN;\r\n    amountB: BN;\r\n    splitFee: { platformFee: BN; shareFee: BN; protocolFee: BN };\r\n  } {\r\n    const feeRate = protocolFeeRate.add(shareFeeRate).add(platformFeeRate);\r\n    const _totalFee = this.calculateFee({ amount: amountB, feeRate });\r\n\r\n    const amountLessFeeB = amountB.sub(_totalFee);\r\n\r\n    const curve = this.getCurve(curveType);\r\n\r\n    const _amountA = curve.buyExactIn({ poolInfo, amount: amountLessFeeB });\r\n\r\n    const remainingAmountA = poolInfo.totalSellA.sub(poolInfo.realA);\r\n\r\n    let amountA: BN;\r\n    let realAmountB: BN;\r\n    let totalFee: BN;\r\n    if (_amountA.gt(remainingAmountA)) {\r\n      amountA = remainingAmountA;\r\n      // const amountLessFeeB = poolInfo.totalFundRaisingB.sub(poolInfo.realB);\r\n      const amountLessFeeB = curve.buyExactOut({\r\n        poolInfo,\r\n        amount: amountA,\r\n      });\r\n\r\n      realAmountB = this.calculatePreFee({ postFeeAmount: amountLessFeeB, feeRate });\r\n      totalFee = realAmountB.sub(amountLessFeeB);\r\n    } else {\r\n      amountA = _amountA;\r\n      realAmountB = amountB;\r\n      totalFee = _totalFee;\r\n    }\r\n\r\n    const splitFee = this.splitFee({ totalFee, protocolFeeRate, platformFeeRate, shareFeeRate });\r\n\r\n    return { amountA, amountB: realAmountB, splitFee };\r\n  }\r\n\r\n  /**\r\n   * @returns Please note that amountA/B is subject to change\r\n   */\r\n  static buyExactOut({\r\n    poolInfo,\r\n    amountA,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    curveType,\r\n    shareFeeRate,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | (PoolBaseAmount & { totalSellA: BN; totalFundRaisingB: BN });\r\n    amountA: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    curveType: number;\r\n    shareFeeRate: BN;\r\n  }): {\r\n    amountA: BN;\r\n    amountB: BN;\r\n    splitFee: { platformFee: BN; shareFee: BN; protocolFee: BN };\r\n  } {\r\n    const remainingAmountA = poolInfo.totalSellA.sub(poolInfo.realA);\r\n\r\n    let realAmountA = amountA;\r\n    // const amountInLessFeeB;\r\n    if (amountA.gt(remainingAmountA)) {\r\n      realAmountA = remainingAmountA;\r\n      // amountInLessFeeB = poolInfo.totalFundRaisingB.sub(poolInfo.realB);\r\n    } else {\r\n      // const curve = this.getCurve(curveType);\r\n      // amountInLessFeeB = curve.buyExactOut({ poolInfo, amount: amountA });\r\n    }\r\n\r\n    const curve = this.getCurve(curveType);\r\n    const amountInLessFeeB = curve.buyExactOut({ poolInfo, amount: amountA });\r\n    const totalFeeRate = protocolFeeRate.add(shareFeeRate).add(platformFeeRate);\r\n\r\n    const amountB = this.calculatePreFee({ postFeeAmount: amountInLessFeeB, feeRate: totalFeeRate });\r\n    const totalFee = amountB.sub(amountInLessFeeB);\r\n\r\n    const splitFee = this.splitFee({ totalFee, protocolFeeRate, platformFeeRate, shareFeeRate });\r\n\r\n    return { amountA: realAmountA, amountB, splitFee };\r\n  }\r\n\r\n  static sellExactIn({\r\n    poolInfo,\r\n    amountA,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    curveType,\r\n    shareFeeRate,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    amountA: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    curveType: number;\r\n    shareFeeRate: BN;\r\n  }): {\r\n    amountA: BN;\r\n    amountB: BN;\r\n    splitFee: { platformFee: BN; shareFee: BN; protocolFee: BN };\r\n  } {\r\n    const curve = this.getCurve(curveType);\r\n\r\n    const amountB = curve.sellExactIn({ poolInfo, amount: amountA });\r\n    const totalFee = this.calculateFee({\r\n      amount: amountB,\r\n      feeRate: protocolFeeRate.add(shareFeeRate).add(platformFeeRate),\r\n    });\r\n\r\n    const splitFee = this.splitFee({ totalFee, protocolFeeRate, platformFeeRate, shareFeeRate });\r\n\r\n    return { amountA, amountB: amountB.sub(totalFee), splitFee };\r\n  }\r\n\r\n  static sellExactOut({\r\n    poolInfo,\r\n    amountB,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    curveType,\r\n    shareFeeRate,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    amountB: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    curveType: number;\r\n    shareFeeRate: BN;\r\n  }): {\r\n    amountA: BN;\r\n    amountB: BN;\r\n    splitFee: { platformFee: BN; shareFee: BN; protocolFee: BN };\r\n  } {\r\n    const totalFeeRate = protocolFeeRate.add(shareFeeRate).add(platformFeeRate);\r\n\r\n    const amountOutWithFeeB = this.calculatePreFee({ postFeeAmount: amountB, feeRate: totalFeeRate });\r\n    if (poolInfo.realB.lt(amountOutWithFeeB)) throw Error(\"Insufficient liquidity\");\r\n\r\n    const totalFee = amountOutWithFeeB.sub(amountB);\r\n\r\n    const curve = Curve.getCurve(curveType);\r\n    const amountA = curve.sellExactOut({ poolInfo, amount: amountOutWithFeeB });\r\n\r\n    if (amountA.gt(poolInfo.realA)) throw Error();\r\n\r\n    const splitFee = this.splitFee({ totalFee, protocolFeeRate, platformFeeRate, shareFeeRate });\r\n\r\n    return { amountA, amountB, splitFee };\r\n  }\r\n\r\n  static splitFee({\r\n    totalFee,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    shareFeeRate,\r\n  }: {\r\n    totalFee: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    shareFeeRate: BN;\r\n  }): { platformFee: BN; shareFee: BN; protocolFee: BN } {\r\n    const totalFeeRate = protocolFeeRate.add(platformFeeRate).add(shareFeeRate);\r\n    const platformFee = totalFeeRate.isZero() ? new BN(0) : totalFee.mul(platformFeeRate).div(totalFeeRate);\r\n    const shareFee = totalFeeRate.isZero() ? new BN(0) : totalFee.mul(shareFeeRate).div(totalFeeRate);\r\n    const protocolFee = totalFee.sub(platformFee).sub(shareFee);\r\n\r\n    return { platformFee, shareFee, protocolFee };\r\n  }\r\n\r\n  static calculateFee({ amount, feeRate }: { amount: BN; feeRate: BN }): BN {\r\n    return ceilDiv(amount, feeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n  static calculatePreFee({ postFeeAmount, feeRate }: { postFeeAmount: BN; feeRate: BN }): BN {\r\n    if (feeRate.isZero()) return postFeeAmount;\r\n\r\n    const numerator = postFeeAmount.mul(FEE_RATE_DENOMINATOR_VALUE);\r\n    const denominator = FEE_RATE_DENOMINATOR_VALUE.sub(feeRate);\r\n\r\n    return numerator.add(denominator).sub(new BN(1)).div(denominator);\r\n  }\r\n\r\n  static getCurve(curveType: number): typeof CurveBase {\r\n    switch (curveType) {\r\n      case 0:\r\n        return LaunchPadConstantProductCurve;\r\n      case 1:\r\n        return FixedPriceCurve;\r\n      case 2:\r\n        return LinearPriceCurve;\r\n    }\r\n    throw Error(\"find curve error\");\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ceilDivBN } from \"@/common\";\r\nimport { CurveBase, PoolBaseAmount } from \"./curveBase\";\r\nimport { Q64 } from \"@/raydium/clmm\";\r\nimport { LaunchpadPoolInfo } from \"../type\";\r\nexport { Q64 };\r\n\r\nexport class LaunchPadConstantProductCurve extends CurveBase {\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualB.toString()).div(poolInfo.virtualA.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(b.toString()).div(a.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getPoolPrice({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualB.add(poolInfo.realB).toString())\r\n      .div(poolInfo.virtualA.sub(poolInfo.realA).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolEndPrice({\r\n    supply,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    totalFundRaising,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(totalFundRaising.sub(migrateFee).toString())\r\n      .div(supply.sub(totalSell).sub(totalLockedAmount).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const allSellToken = poolInfo.totalSellA.sub(poolInfo.realA);\r\n    const buyAllTokenUseB = poolInfo.totalFundRaisingB.sub(poolInfo.realB);\r\n\r\n    return new Decimal(poolInfo.virtualB.add(poolInfo.realB.add(buyAllTokenUseB)).toString())\r\n      .div(poolInfo.virtualA.sub(poolInfo.realA.add(allSellToken)).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getInitParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n  }): { a: BN; b: BN; c: BN } {\r\n    if (supply.lte(totalSell)) throw Error(\"supply need gt total sell\");\r\n    const supplyMinusSellLocked = supply.sub(totalSell).sub(totalLockedAmount);\r\n    if (supplyMinusSellLocked.lte(new BN(0))) throw Error(\"supplyMinusSellLocked <= 0\");\r\n\r\n    const tfMinusMf = totalFundRaising.sub(migrateFee);\r\n    if (tfMinusMf.lte(new BN(0))) throw Error(\"tfMinusMf <= 0\");\r\n\r\n    // const migratePriceX64 = tfMinusMf.mul(Q64).div(supplyMinusSellLocked);\r\n\r\n    const numerator = tfMinusMf.mul(totalSell).mul(totalSell).div(supplyMinusSellLocked);\r\n    const denominator = tfMinusMf.mul(totalSell).div(supplyMinusSellLocked).sub(totalFundRaising);\r\n\r\n    if (denominator.lt(new BN(0))) throw Error(\"supply/totalSell/totalLockedAmount diff too high\");\r\n\r\n    const x0 = numerator.div(denominator);\r\n    const y0 = totalFundRaising.mul(totalFundRaising).div(denominator);\r\n\r\n    if (x0.lt(new BN(0)) || y0.lt(new BN(0))) throw Error(\"invalid input 0\");\r\n\r\n    return {\r\n      a: x0,\r\n      b: y0,\r\n      c: totalSell,\r\n    };\r\n  }\r\n\r\n  static buyExactIn({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    return this.getAmountOut({\r\n      amountIn: amount,\r\n      inputReserve: poolInfo.virtualB.add(poolInfo.realB),\r\n      outputReserve: poolInfo.virtualA.sub(poolInfo.realA),\r\n    });\r\n  }\r\n\r\n  static buyExactOut({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    return this.getAmountIn({\r\n      amountOut: amount,\r\n      inputReserve: poolInfo.virtualB.add(poolInfo.realB),\r\n      outputReserve: poolInfo.virtualA.sub(poolInfo.realA),\r\n    });\r\n  }\r\n\r\n  static sellExactIn({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    return this.getAmountOut({\r\n      amountIn: amount,\r\n      inputReserve: poolInfo.virtualA.sub(poolInfo.realA),\r\n      outputReserve: poolInfo.virtualB.add(poolInfo.realB),\r\n    });\r\n  }\r\n\r\n  static sellExactOut({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    return this.getAmountIn({\r\n      amountOut: amount,\r\n      inputReserve: poolInfo.virtualA.sub(poolInfo.realA),\r\n      outputReserve: poolInfo.virtualB.add(poolInfo.realB),\r\n    });\r\n  }\r\n\r\n  static getAmountOut({\r\n    amountIn,\r\n    inputReserve,\r\n    outputReserve,\r\n  }: {\r\n    amountIn: BN;\r\n    inputReserve: BN;\r\n    outputReserve: BN;\r\n  }): BN {\r\n    const numerator = amountIn.mul(outputReserve);\r\n    const denominator = inputReserve.add(amountIn);\r\n    const amountOut = numerator.div(denominator);\r\n    return amountOut;\r\n  }\r\n  static getAmountIn({\r\n    amountOut,\r\n    inputReserve,\r\n    outputReserve,\r\n  }: {\r\n    amountOut: BN;\r\n    inputReserve: BN;\r\n    outputReserve: BN;\r\n  }): BN {\r\n    const numerator = inputReserve.mul(amountOut);\r\n    const denominator = outputReserve.sub(amountOut);\r\n    const amountIn = ceilDivBN(numerator, denominator);\r\n    return amountIn;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { LaunchpadPool } from \"../layout\";\r\nimport Decimal from \"decimal.js\";\r\nimport { LaunchpadPoolInfo } from \"../type\";\r\n\r\nexport interface PoolBaseAmount {\r\n  virtualA: BN;\r\n  virtualB: BN;\r\n  realA: BN;\r\n  realB: BN;\r\n}\r\n\r\nexport class CurveBase {\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n\r\n  static getPoolPrice({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n  static getPoolEndPrice({\r\n    supply,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    totalFundRaising,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n\r\n  static getInitParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n  }): { a: BN; b: BN; c: BN } {\r\n    throw Error();\r\n  }\r\n\r\n  static buyExactIn({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    throw Error();\r\n  }\r\n\r\n  static buyExactOut({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    throw Error();\r\n  }\r\n\r\n  static sellExactIn({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    throw Error();\r\n  }\r\n  static sellExactOut({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    throw Error();\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { CurveBase, PoolBaseAmount } from \"./curveBase\";\r\nimport { LaunchpadPoolInfo } from \"../type\";\r\nimport { ceilDivBN } from \"@/common\";\r\n\r\nexport class FixedPriceCurve extends CurveBase {\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualB.toString()).div(poolInfo.virtualA.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(b.toString()).div(a.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getPoolPrice({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualB.toString()).div(poolInfo.virtualA.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolEndPrice({\r\n    supply,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    totalFundRaising,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(totalFundRaising.sub(migrateFee).toString())\r\n      .div(supply.sub(totalSell).sub(totalLockedAmount).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const allSellToken = poolInfo.totalSellA.sub(poolInfo.realA);\r\n    const buyAllTokenUseB = poolInfo.totalFundRaisingB.sub(poolInfo.realB);\r\n\r\n    return new Decimal(poolInfo.virtualB.add(poolInfo.realB).add(buyAllTokenUseB).toString())\r\n      .div(poolInfo.virtualA.sub(poolInfo.realA).add(allSellToken).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getInitParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalFundRaising: BN;\r\n    totalLockedAmount: BN;\r\n    migrateFee: BN;\r\n  }): { a: BN; b: BN; c: BN } {\r\n    const supplyMinusLocked = supply.sub(totalLockedAmount);\r\n\r\n    if (supplyMinusLocked.lte(new BN(0))) throw Error(\"invalid input 1\");\r\n\r\n    const denominator = new BN(2).mul(totalFundRaising).sub(migrateFee);\r\n    const numerator = totalFundRaising.mul(supplyMinusLocked);\r\n    const totalSellExpect = numerator.div(denominator);\r\n\r\n    // if (!totalSell.eq(totalSellExpect)) throw Error(\"invalid input 2\");\r\n\r\n    return { a: totalSellExpect, b: totalFundRaising, c: totalSellExpect };\r\n  }\r\n\r\n  static buyExactIn({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    return this.getAmountOut({ amountIn: amount, initInput: poolInfo.virtualB, initOutput: poolInfo.virtualA });\r\n  }\r\n\r\n  static buyExactOut({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    return this.getAmountIn({ amountOut: amount, initInput: poolInfo.virtualB, initOutput: poolInfo.virtualA });\r\n  }\r\n\r\n  static sellExactIn({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    return this.getAmountOut({ amountIn: amount, initInput: poolInfo.virtualA, initOutput: poolInfo.virtualB });\r\n  }\r\n\r\n  static sellExactOut({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    return this.getAmountIn({ amountOut: amount, initInput: poolInfo.virtualA, initOutput: poolInfo.virtualB });\r\n  }\r\n\r\n  static getAmountOut({ amountIn, initInput, initOutput }: { amountIn: BN; initInput: BN; initOutput: BN }): BN {\r\n    const numerator = initOutput.mul(amountIn);\r\n    const amountOut = numerator.div(initInput);\r\n    return amountOut;\r\n  }\r\n\r\n  static getAmountIn({ amountOut, initInput, initOutput }: { amountOut: BN; initInput: BN; initOutput: BN }): BN {\r\n    const numerator = initInput.mul(amountOut);\r\n    const amountIn = ceilDivBN(numerator, initOutput);\r\n    return amountIn;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { Q64 } from \"./constantProductCurve\";\r\nimport { MathLaunch } from \"./func\";\r\nimport { MaxU64 } from \"@/raydium/clmm\";\r\nimport { LaunchpadPoolInfo } from \"../type\";\r\nimport { CurveBase, PoolBaseAmount } from \"./curveBase\";\r\nexport class LinearPriceCurve extends CurveBase {\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(0);\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(0);\r\n  }\r\n\r\n  static getPoolPrice({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualA.mul(poolInfo.realA).toString())\r\n      .div(MathLaunch._Q64)\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolEndPrice({\r\n    supply,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    totalFundRaising,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(totalFundRaising.sub(migrateFee).toString())\r\n      .div(supply.sub(totalSell).sub(totalLockedAmount).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: LaunchpadPoolInfo;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const allSellToken = poolInfo.totalSellA.sub(poolInfo.realA);\r\n    const buyAllTokenUseB = poolInfo.totalFundRaisingB.sub(poolInfo.realB);\r\n\r\n    return new Decimal(poolInfo.virtualB.add(poolInfo.realB).add(buyAllTokenUseB).toString())\r\n      .div(poolInfo.virtualA.sub(poolInfo.realA).add(allSellToken).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getInitParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n  }): { a: BN; b: BN; c: BN } {\r\n    const supplyMinusLocked = supply.sub(totalLockedAmount);\r\n    if (supplyMinusLocked.lte(new BN(0))) throw Error(\"supplyMinusLocked need gt 0\");\r\n    const denominator = totalFundRaising.mul(new BN(3)).sub(migrateFee);\r\n    const numerator = totalFundRaising.mul(new BN(2)).mul(supplyMinusLocked);\r\n\r\n    const totalSellExpect = numerator.div(denominator);\r\n\r\n    // if (!totalSell.eq(totalSellExpect)) throw Error(\"invalid input\");\r\n\r\n    const totalSellSquared = totalSellExpect.mul(totalSellExpect);\r\n    const a = totalFundRaising.mul(new BN(2)).mul(Q64).div(totalSellSquared);\r\n\r\n    if (!a.gt(new BN(0))) throw Error(\"a need gt 0\");\r\n\r\n    if (!MaxU64.gt(a)) throw Error(\"a need lt u64 max\");\r\n\r\n    return { a, b: new BN(0), c: totalSellExpect };\r\n  }\r\n\r\n  static buyExactIn({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    const newQuote = poolInfo.realB.add(amount);\r\n    const termInsideSqrt = new BN(2).mul(newQuote).mul(Q64).div(poolInfo.virtualA);\r\n    const sqrtTerm = new BN(new Decimal(termInsideSqrt.toString()).sqrt().toFixed(0));\r\n    const amountOut = sqrtTerm.sub(poolInfo.realA);\r\n\r\n    return amountOut;\r\n  }\r\n\r\n  static buyExactOut({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    const newBase = poolInfo.realA.add(amount);\r\n    const newBaseSquared = newBase.mul(newBase);\r\n    const { div: _newQuoteDiv, mod: _newQuoteMod } = poolInfo.virtualA.mul(newBaseSquared).divmod(new BN(2).mul(Q64));\r\n    const newQuote = _newQuoteMod.isZero() ? _newQuoteDiv : _newQuoteDiv.add(new BN(1));\r\n    return newQuote.sub(poolInfo.realB);\r\n  }\r\n\r\n  static sellExactIn({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    const newBase = poolInfo.realA.sub(amount);\r\n    const newBaseSquared = newBase.mul(newBase);\r\n\r\n    const { div: _newQuoteDiv, mod: _newQuoteMod } = poolInfo.virtualA.mul(newBaseSquared).divmod(new BN(2).mul(Q64));\r\n\r\n    const newQuote = _newQuoteMod.isZero() ? _newQuoteDiv : _newQuoteDiv.add(new BN(1));\r\n\r\n    return poolInfo.realB.sub(newQuote);\r\n  }\r\n\r\n  static sellExactOut({ poolInfo, amount }: { poolInfo: LaunchpadPoolInfo | PoolBaseAmount; amount: BN }): BN {\r\n    const newB = poolInfo.realB.sub(amount);\r\n    const termInsideSqrt = new BN(2).mul(newB).mul(Q64).div(poolInfo.virtualA);\r\n\r\n    const sqrtTerm = new BN(new Decimal(termInsideSqrt.toString()).sqrt().toFixed(0));\r\n\r\n    const amountIn = poolInfo.realA.sub(sqrtTerm);\r\n\r\n    return amountIn;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nexport class MathLaunch {\r\n  static _Q64 = new Decimal(new BN(1).shln(64).toString());\r\n\r\n  static _multipler(decimals: number): Decimal {\r\n    return new Decimal(10).pow(decimals);\r\n  }\r\n\r\n  static getPrice({ priceX64, decimalA, decimalB }: { priceX64: BN; decimalA: number; decimalB: number }): Decimal {\r\n    const priceWithDecimals = new Decimal(priceX64.toString()).div(this._Q64);\r\n    const price = priceWithDecimals.mul(this._multipler(decimalA)).div(this._multipler(decimalB));\r\n\r\n    return price;\r\n  }\r\n\r\n  static getPriceX64({ price, decimalA, decimalB }: { price: Decimal; decimalA: number; decimalB: number }): BN {\r\n    const priceWithDecimals = price.mul(this._multipler(decimalB)).div(this._multipler(decimalA));\r\n    const priceX64 = new BN(priceWithDecimals.mul(this._Q64).toFixed(0));\r\n    return priceX64;\r\n  }\r\n}\r\n\r\nexport function checkPoolToAmm({\r\n  supply,\r\n  totalFundRaisingB,\r\n  totalLockedAmount,\r\n  totalSellA,\r\n  migrateType,\r\n  decimalsA,\r\n}: {\r\n  supply: BN;\r\n  totalSellA: BN;\r\n  totalLockedAmount: BN;\r\n  totalFundRaisingB: BN;\r\n  migrateType: \"amm\" | \"cpmm\";\r\n  decimalsA: number;\r\n}): boolean {\r\n  const migrateAmountA = supply.sub(totalSellA).sub(totalLockedAmount);\r\n  const liquidity = new BN(new Decimal(migrateAmountA.mul(totalFundRaisingB).toString()).sqrt().toFixed(0));\r\n\r\n  if (migrateType === \"amm\") {\r\n    if (liquidity.gt(new BN(10).pow(new BN(decimalsA)))) return true;\r\n  } else if (migrateType === \"cpmm\") {\r\n    if (liquidity.gt(new BN(100))) return true;\r\n  } else {\r\n    throw Error(\"migrate type error\");\r\n  }\r\n\r\n  return false;\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { MintLayout, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nimport { ApiV3Token, JupTokenType } from \"@/api/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { LoadParams } from \"../type\";\r\n\r\nimport { SOL_INFO } from \"./constant\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nexport default class TokenModule extends ModuleBase {\r\n  private _tokenList: TokenInfo[] = [];\r\n  private _tokenMap: Map<string, TokenInfo> = new Map();\r\n  private _blackTokenMap: Set<string> = new Set();\r\n  private _mintGroup: { official: Set<string>; jup: Set<string>; extra: Set<string> } = {\r\n    official: new Set(),\r\n    jup: new Set(),\r\n    extra: new Set(),\r\n  };\r\n  private _whiteMap: Set<string> = new Set();\r\n  private _extraTokenList: TokenInfo[] = [];\r\n\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async load(params?: LoadParams & { type?: JupTokenType }): Promise<void> {\r\n    this.checkDisabled();\r\n    const { forceUpdate = false, type = JupTokenType.Strict } = params || {};\r\n    const { mintList, blacklist, whiteList } = await this.scope.fetchV3TokenList(forceUpdate);\r\n    const jup = await this.scope.fetchJupTokenList(forceUpdate);\r\n    // reset all data\r\n    this._tokenList = [];\r\n    this._tokenMap = new Map();\r\n    this._blackTokenMap = new Set(blacklist);\r\n    this._mintGroup = { official: new Set(), jup: new Set(), extra: new Set() };\r\n    this._whiteMap = new Set(whiteList);\r\n\r\n    this._tokenMap.set(SOL_INFO.address, SOL_INFO);\r\n    this._mintGroup.official.add(SOL_INFO.address);\r\n\r\n    mintList.forEach((token) => {\r\n      if (this._blackTokenMap.has(token.address)) return;\r\n      this._tokenMap.set(token.address, {\r\n        ...token,\r\n        type: \"raydium\",\r\n        priority: 2,\r\n        programId:\r\n          token.programId ??\r\n          (token.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58()),\r\n      });\r\n      this._mintGroup.official.add(token.address);\r\n    });\r\n\r\n    jup.forEach((token) => {\r\n      if (this._blackTokenMap.has(token.address) || this._tokenMap.has(token.address)) return;\r\n      this._tokenMap.set(token.address, {\r\n        ...token,\r\n        type: \"jupiter\",\r\n        priority: 1,\r\n        programId:\r\n          token.programId ??\r\n          (token.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58()),\r\n        tags: token.freezeAuthority ? [...(token.tags || []), \"hasFreeze\"] : token.tags,\r\n      });\r\n      this._mintGroup.jup.add(token.address);\r\n    });\r\n\r\n    this._extraTokenList.forEach((token) => {\r\n      if (this._blackTokenMap.has(token.address) || this._tokenMap.has(token.address)) return;\r\n      this._tokenMap.set(token.address, {\r\n        ...token,\r\n        type: \"extra\",\r\n        priority: 1,\r\n        programId:\r\n          token.programId || token.tags.includes(\"token-2022\")\r\n            ? TOKEN_2022_PROGRAM_ID.toBase58()\r\n            : TOKEN_PROGRAM_ID.toBase58(),\r\n      });\r\n      this._mintGroup.extra.add(token.address);\r\n    });\r\n\r\n    this._tokenList = Array.from(this._tokenMap).map((data) => data[1]);\r\n  }\r\n\r\n  get tokenList(): TokenInfo[] {\r\n    return this._tokenList;\r\n  }\r\n  get tokenMap(): Map<string, TokenInfo> {\r\n    return this._tokenMap;\r\n  }\r\n  get blackTokenMap(): Set<string> {\r\n    return this._blackTokenMap;\r\n  }\r\n  get mintGroup(): { official: Set<string>; jup: Set<string> } {\r\n    return this._mintGroup;\r\n  }\r\n  get whiteListMap(): Set<string> {\r\n    return this._whiteMap;\r\n  }\r\n\r\n  /** === util functions === */\r\n\r\n  public async getTokenInfo(mint: string | PublicKey): Promise<ApiV3Token> {\r\n    if (!mint) throw new Error(\"please input mint\");\r\n    const mintStr = mint.toString();\r\n    const info = this._tokenMap.get(mintStr);\r\n    if (info) return info;\r\n    if (mintStr.toLocaleUpperCase() === \"SOL\") return SOL_INFO;\r\n\r\n    const apiTokenInfo = (await this.scope.api.getTokenInfo([mintStr]))[0];\r\n    if (apiTokenInfo) {\r\n      this._mintGroup.extra.add(mintStr);\r\n      this._tokenMap.set(mintStr, { ...apiTokenInfo, priority: 2 });\r\n      return apiTokenInfo;\r\n    }\r\n\r\n    const onlineInfo = await this.scope.connection.getAccountInfo(new PublicKey(mintStr));\r\n    if (!onlineInfo) throw new Error(`mint address not found: ${mintStr}`);\r\n    const data = MintLayout.decode(onlineInfo.data);\r\n    const mintSymbol = mintStr.toString().substring(0, 6);\r\n    const fullInfo = {\r\n      chainId: 101,\r\n      address: mintStr,\r\n      programId: onlineInfo.owner.toBase58(),\r\n      logoURI: \"\",\r\n      symbol: mintSymbol,\r\n      name: mintSymbol,\r\n      decimals: data.decimals,\r\n      tags: [],\r\n      extensions: {},\r\n      priority: 0,\r\n      type: \"unknown\",\r\n    };\r\n    this._mintGroup.extra.add(mintStr);\r\n    this._tokenMap.set(mintStr, fullInfo);\r\n    return fullInfo;\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}